{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/trivr/src/basegroup.es6","src/improv.es6","src/input.es6","src/midikeymanager.es6","src/musictheory/keysignatureprediction.es6","src/musictheory/note.es6","src/objects/dome.es6","src/objects/floatingparticles.es6","src/objects/keyboards/basekeyboard.es6","src/objects/keyboards/circularkeyboard.es6","src/objects/keyboards/traditionalkeyboard.es6","src/objects/lighting.es6","src/objects/metronome.es6","src/qwertykeymanager.es6","src/shaders.es6","src/themeing/colors.es6","src/themeing/style.es6","src/toneplayback.es6","src/utils.es6"],"names":[],"mappings":"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","file":"improv.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export default class BaseGroup {\n    constructor(params) {\n\n        /**\n         * parent group of child objects we will create\n         * @type {THREE.Object3D}\n         * @private\n         */\n        this._group = new THREE.Object3D();\n\n        if (params && params.assets) {\n            // todo: determine when to use JSON Loader, OBJ loader, or whatever\n            var loader = new THREE.JSONLoader();\n            loader.load(params.assets, (geometry, materials) => {\n                this.onAssetsLoaded(geometry, materials);\n            });\n        }\n\n        this.onInitialize(params);\n    }\n\n    /**\n     * get name of group\n     */\n    get name() {\n        return this.constructor.name;\n    }\n\n    /**\n     * overridable methods\n     * leave empty to be a simple abstraction we don't have to call super on\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {};\n    onRender(scene, custom) {};\n    onInitialize(params) {};\n    onAssetsLoaded(geometry, material) {};\n\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     * @param custom\n     */\n    create(scene, custom) {\n        this._group.name = this.name;\n        scene.scene.add(this._group);\n        this.onCreate(scene, custom);\n    }\n\n    /**\n     * add object to scene\n     * @param object\n     */\n    add(object, name) {\n        if (!name) {\n            name = this.name + '-child';\n        }\n        object.name = name;\n        this._group.add(object);\n    }\n\n    /**\n     * get parent group object\n     * @returns {THREE.Object3D}\n     */\n    get group() {\n        return this._group;\n    }\n\n    /**\n     * get children of this group\n     * @returns {Array}\n     */\n    get children() {\n        return this._group.children;\n    }\n\n    /**\n     * on prerender scene\n     * @param scene\n     * @param custom\n     */\n    preRender(scene, custom) {}\n\n    /**\n     * on render scene\n     * @param scene\n     * @param custom\n     */\n    render(scene, custom) {\n        this.onRender(scene, custom);\n    }\n}","import Metronome from './objects/metronome.es6';\nimport CircularKeyboard from './objects/keyboards/circularkeyboard.es6';\nimport TraditionalKeyboard from './objects/keyboards/traditionalkeyboard.es6';\nimport Dome from './objects/dome.es6';\nimport FloatingParticles from './objects/floatingparticles.es6';\nimport Lighting from './objects/lighting.es6';\nimport TonePlayback from './toneplayback.es6';\nimport Input from './input.es6';\n\nexport default class Improv {\n    constructor(scene, configURI) {\n        /**\n         * current key signature\n         * @type {String}\n         */\n        this.currentKeySignature = null;\n\n        /**\n         * inactivity timer for suggestions\n         * @type {null}\n         * @private\n         */\n        this._inactivityTimer = null;\n\n        this._scene = scene;\n        this._request = new XMLHttpRequest();\n        this._request.onreadystatechange = () => this.onConfigLoaded();\n        this._request.open('GET', configURI);\n        this._request.send();\n    }\n\n    /**\n     * on key change\n     * @param keys\n     */\n    onKeyInputChange(event) {\n        clearTimeout(this._inactivityTimer);\n        this._inactivityTimer = setTimeout( () => this.onInactivityTimeout(), 5000);\n\n        this._keyboard.toggleKeyPressed({\n            notation: event.changed.notation,\n            octave: event.changed.octave,\n            velocity: event.changed.velocity });\n\n        if (event.predictedKey.length > 0 && this.currentKeySignature !== event.predictedKey[0].key) {\n            this._keyboard.changeKeySignature(event.predictedKey[0].key);\n            this._hudKeyboard.changeKeySignature(event.predictedKey[0].key);\n            this.currentKeySignature = event.predictedKey[0].key;\n        }\n\n        //this._keyboard.toggleKeyPressed(key[octave], event.changed.velocity);\n         /*var key = this.findKeyObjectsForNotation(event.changed.notation);\n         var octave;\n         if (event.changed.octave / 2 === Math.floor(event.changed.octave / 2)) {\n            octave = 1;\n         } else {\n            octave = 0;\n         }\n\n         this.toggleKeyPressed(key[octave], event.changed.velocity);\n\n         if (event.predictedKey.length > 0 && event.predictedKey[0] !== this.currentKeySignature) {\n            this.onKeySignatureChange(event.predictedKey[0].key);\n         }*/\n     }\n\n    /**\n     * inactivity timeout\n     */\n    onInactivityTimeout() {\n        this._keyboard.resetKeys();\n        this._hudKeyboard.resetKeys();\n        this._input.clearPredictionHistory();\n     }\n\n    /**\n     * on config loaded\n     */\n    onConfigLoaded() {\n        if (this._request.readyState === XMLHttpRequest.DONE) {\n            if (this._request.status === 200) {\n                var config = JSON.parse(this._request.responseText);\n                this.setup(config);\n            } else {\n                console.log('There was a problem with the request.');\n            }\n        }\n    }\n    /**\n     * setup app\n     * @param config\n     * @param config\n     */\n    setup(config) {\n        this._scene.onCreate = this.create;\n\n        this._input = new Input(config.input, (keys) => this.onKeyInputChange(keys) );\n        this._keyboard = new TraditionalKeyboard(config.keyboard);\n        this._hudKeyboard = new CircularKeyboard(config.notationdisplay);\n\n        this._scene.addObjects([\n            new Metronome(),\n            new FloatingParticles(),\n            new Dome(),\n            this._keyboard,\n            this._hudKeyboard,\n            new Lighting() ]);\n\n        for (var c = 0; c < config.sound.soundfonts.length; c++) {\n            TonePlayback.loadInstrument(config.sound.soundfonts[c], config.sound.soundfontlocation);\n        }\n        document.addEventListener('keydown', event => this.onKeyDown(event) );\n    }\n\n    /**\n     * on keydown\n     * @param event\n     */\n    onKeyDown(event) {\n        if (event.code === 'Space') {\n            switch (TonePlayback.playerState) {\n                case 'ready': TonePlayback.play('./assets/audio/Bonnie_Tyler_-_Total_Eclipse_of_the_Heart.mid'); break;\n                case 'playing': TonePlayback.pause(); break;\n                case 'paused': TonePlayback.resume(); break;\n            }\n        }\n    }\n\n    create(scene, custom) {\n        scene.renderer.gammaInput = true;\n        scene.renderer.gammaOutput = true;\n    }\n\n    render(scene, custom) {}\n}\n","import QWERTYKeyManager from './qwertykeymanager.es6';\nimport MIDIKeyManager from './midikeymanager.es6';\nimport KeySignaturePrediction from './musictheory/keysignatureprediction.es6';\n\nexport default class {\n    constructor(params, cb) {\n        /**\n         * key manager\n         * @type {$ES6_ANONYMOUS_CLASS$}\n         * @private\n         */\n        if (params.device === 'QWERTY') {\n            this._keymanager = new QWERTYKeyManager(params, changed => this.onKeyChange(changed));\n        } else if (params.device === 'MIDI') {\n            this._keymanager = new MIDIKeyManager(params, changed => this.onKeyChange(changed));\n        }\n\n        /**\n         * key signature prediction\n         * @type {$ES6_ANONYMOUS_CLASS$}\n         * @private\n         */\n        this._keySigPrediction = new KeySignaturePrediction();\n\n        /**\n         * key change callback\n         */\n        this._callback = cb;\n    }\n\n    /**\n     * clear prediction history\n     */\n    clearPredictionHistory() {\n        this._keySigPrediction.clearHistory();\n    }\n\n    /**\n     * on key change\n     * @param changed\n     */\n    onKeyChange(changed) {\n        var kd = this._keymanager.getKeysDown();\n        var predicted = this._keySigPrediction.update(kd);\n        this._callback.apply(this, [ { down: kd, predictedKey: predicted, changed: changed }]);\n    }\n}\n","import Note from './musictheory/note.es6';\n\nexport default class {\n    constructor(params, cb) {\n        /**\n         * event callback\n         */\n        this._callback = cb;\n\n        /**\n         * keys down\n         * @type {Array}\n         * @private\n         */\n        this._keys = [];\n\n        /**\n         * MIDI key to notation mapping (coming from MIDI, so not customizable)\n         * the splice happens because 0 index in MIDI starts with C\n         * @type {Array.<string>}\n         * @private\n         */\n        this._mapping = Note.sharpNotations\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations).splice(3, Note.sharpNotations.length *10);\n\n        this.initializeDevice();\n    }\n\n    /**\n     * initialize midi device\n     */\n    initializeDevice() {\n        // request MIDI access\n        if (navigator.requestMIDIAccess) {\n            navigator.requestMIDIAccess().then(\n                (event) => this.onMIDISuccess(event),\n                (event) => this.onMIDIFailure(event) );\n        } else {\n            console.log(\"No MIDI support in your browser.\");\n        }\n    }\n\n    /**\n     * on midi connection success\n     * @param midi\n     */\n    onMIDISuccess(midi) {\n        var inputs = midi.inputs;\n        for (let input of inputs.values()) {\n            input.onmidimessage = msg => this.onMIDIMessage(msg);\n        }\n    }\n\n    /**\n     * on midi connection failure\n     * @param event\n     */\n    onMIDIFailure(event) {\n        console.log(\"No access to MIDI devices or your browser doesn't support WebMIDI API. Please use WebMIDIAPIShim \" + event);\n    }\n\n    /**\n     * on midi message\n     * @param msg\n     */\n    onMIDIMessage(msg) {\n        console.log(msg)\n        var cmd = msg.data[0] >> 4;\n        var channel = msg.data[0] & 0xf;\n        var noteNumber = msg.data[1];\n        var velocity = 0;\n        if (msg.data.length > 2)\n            velocity = msg.data[2] / 100;\n\n        // MIDI noteon with velocity=0 is the same as noteoff\n        if ( cmd==8 || ((cmd==9)&&(velocity==0)) ) { // noteoff\n            this.onKeyUp(noteNumber);\n        } else if (cmd == 9) { // note on\n            this.onKeyDown(noteNumber, velocity);\n        } //else if (cmd == 11) { // controller message\n    }\n\n    /**\n     * get keys down\n     */\n    getKeysDown() {\n        var down = [];\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c] > 0) {\n                var octave = 0;\n                if (c >= this._keys.length/2) { octave = 1; }\n                down.push( { notation: this._mapping[c], octave: octave, index: c, velocity: this._keys[c]} );\n            }\n        }\n        return down;\n    }\n\n    /**\n     * on key down\n     * @param key\n     * @param velocity\n     */\n    onKeyDown(key, velocity) {\n        this._keys[key] = velocity;\n        var octave = 0;\n        octave = Math.floor(key / Note.sharpNotations.length);\n        this._callback({\n            notation: this._mapping[key],\n            octave: octave,\n            index: key,\n            velocity: velocity,\n            action: 'press' });\n    }\n\n    /**\n     * on key down\n     * @param key\n     */\n    onKeyUp(key) {\n        this._keys[key] = 0.0;\n        var octave = 0;\n        octave = Math.floor(key / Note.sharpNotations.length);\n        this._callback({\n            notation: this._mapping[key],\n            octave: octave,\n            index: key,\n            velocity: 0,\n            action: 'release' });\n    }\n}\n","import Note from './note.es6';\n\nexport default class {\n    constructor() {\n        /**\n         * key signature score history\n         * @type {Array}\n         * @private\n         */\n        this._keySignatureScoreHistory = [];\n\n        /**\n         * history decay rate\n         * @type {Number}\n         * @private\n         */\n        this._keySignatureDecayRate = 0.9;\n\n        Note.generateKeySignatureLookup();\n    }\n\n    /**\n     * update keys pressed\n     * @param {Array} keys\n     */\n    update(keys) {\n        if (keys.length === 0) { return this._keySignatureScoreHistory; }\n        var keysigScores = {};\n        for (var sig in Note.keys) {\n            for (var d = 0; d < keys.length; d++) {\n                if (Note.keys[sig].indexOf(keys[d].notation) !== -1) {\n                    if (!keysigScores[sig]) { keysigScores[sig] = 0; }\n                    keysigScores[sig] ++;\n\n                    if (keys[d].notation === sig) {\n                        keysigScores[sig] += .01; // small priority boost for root note\n                    }\n                }\n            }\n        }\n\n        var scores = [];\n        for (var score in keysigScores) {\n            scores.push( { score: keysigScores[score], key: score, timestamp: Date.now() });\n        }\n\n        this.decayHistoricalScores();\n        return this.applyCurrentScoreToHistory(scores);\n    }\n\n    /**\n     * clear history\n     */\n    clearHistory() {\n        this._keySignatureScoreHistory = [];\n    }\n\n    /**\n     * slowly decay current historical scores\n     */\n    decayHistoricalScores() {\n        for (var c = 0; c < this._keySignatureScoreHistory.length; c++) {\n            this._keySignatureScoreHistory[c].score *= this._keySignatureDecayRate;\n        }\n    }\n\n    /**\n     * apply scores to history (aggregate all scores: current and past)\n     * @param scores\n     */\n    applyCurrentScoreToHistory(scores) {\n        for (var c = 0; c < scores.length; c++) {\n            var found = false;\n            for (var d = 0; d < this._keySignatureScoreHistory.length; d++) {\n                if (this._keySignatureScoreHistory[d].key === scores[c].key) {\n                    found = true;\n                    this._keySignatureScoreHistory[d].score += scores[c].score;\n                }\n            }\n            if (!found) {\n                this._keySignatureScoreHistory.push(scores[c]);\n            }\n        }\n        return this._keySignatureScoreHistory.sort(function(a, b) { return (a.score < b.score ) ? 1 : ((b.score < a.score) ? -1 : 0); });\n    }\n}\n","/**\n * Note static class\n * @constructor\n */\nexport default {\n    /** cached keysignature lookup table */\n    keys: {},\n\n    /**\n     * incremental tones as sharp notation\n     * @const\n     * @static\n     * @type {Array.<string>}\n     **/\n    sharpNotations: [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"],\n\n    /**\n     * incremental tones as flat notation\n     * @const\n     * @static\n     * @type {Array.<string>}\n     **/\n    flatNotations: [\"A\", \"Bb\", \"B\", \"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\"],\n\n    /**\n     * get notation index when notation is either flat or sharp\n     * @param notation\n     */\n    indexOfNotation(notation) {\n        var index = this.sharpNotations.indexOf(notation);\n        if (index === -1) {\n            index = this.flatNotations.indexOf(notation);\n        }\n        return index;\n    },\n\n    /**\n     * get notation given an index\n     * @param index\n     */\n    notationAtIndex(index, preferFlat) {\n        if (index >= this.sharpNotations.length) {\n            index = index % this.sharpNotations.length;\n        }\n\n        if (preferFlat) {\n            return this.flatNotations[index];\n        } else {\n            return this.sharpNotations[index];\n        }\n    },\n\n    /**\n     * odd notations\n     * @const\n     * @static\n     * @type {Array.<string>}\n     **/\n     oddNotations: [\"B#\", \"Cb\", \"E#\", \"Fb\"],\n\n    /**\n     * corrected notations\n     * @const\n     * @static\n     * @type {Array.<string>}\n     **/\n     correctedNotations: [\"C\", \"C\", \"F\", \"F\"],\n\n    /**\n     * translate index from MIDI to notation\n     * @param index\n     * @constructor\n     */\n    MIDItoNotation(index) {\n        var position = index % this.sharpNotations.length;\n        return this.sharpNotations[position];\n    },\n\n    /**\n     * translate notation and octave to MIDI index\n     * @param notation\n     */\n    notationToMIDI(notation) {\n        var ntObj = this.parseNotation(notation);\n        var ntindx = this.sharpNotations.indexOf(ntObj.notation);\n        if (ntindx === -1) {\n            ntindx = this.flatNotations.indexOf(ntObj.notation);\n        }\n        return ntObj.octave * this.sharpNotations.length + ntindx;\n    },\n\n    /**\n     * parse notation to notation and octave\n     * @param notation\n     */\n    parseNotation(notation) {\n        var note = {};\n        // only supports one digit octaves (if thats even a real issue)\n        var octave = notation.charAt(notation.length-1);\n        if (parseInt(octave) == octave) {\n            note.octave = octave;\n            note.notation = notation.substr(0, notation.length-2);\n        } else {\n            note.octave = 4; // default\n            note.notation = notation;\n        }\n\n        return note;\n    },\n\n    /**\n     * turn a notation into a frequency\n     * @static\n     * @param {string} notation\n     * @return {string} frequency\n     */\n    getFrequencyForNotation(nt) {\n        var octave = 4;\n\n        // does notation include the octave?\n        if ( !isNaN( parseInt(nt.charAt(nt.length -1)) )) {\n            octave = parseInt(nt.charAt(nt.length -1));\n            nt = nt.substr(0, nt.length-1);\n        }\n\n        // correct any flat/sharps that resolve to a natural\n        if (this.oddNotations.indexOf(nt) != -1) {\n            nt = this.correctedNotations[this.oddNotations.indexOf(nt)];\n        }\n\n        var freq;\n        var indx = this.sharpNotations.indexOf(nt);\n\n        if (indx == -1) {\n            indx = this.flatNotations.indexOf(nt);\n        }\n\n        if (indx != -1) {\n            indx += (octave-4) * this.sharpNotations.length;\n            freq = 440 * (Math.pow(2, indx/12));\n        }\n        return freq;\n    },\n\n    /**\n     * get notes in a specific key signature\n     *\n     * @static\n     * @param {string} key (root note)\n     * @param {boolean} if major key signature\n     * @param {number} octave to use (optional)\n     * @return {Array.<string>} keys in key signature\n     */\n    notesInKeySignature(key, major, octave) {\n        var notesToIndex;\n        var notesInKey = [];\n        var startPos;\n\n        // correct any flat/sharps that resolve to a natural\n        if (this.oddNotations.indexOf(key) != -1) {\n            key = this.correctedNotations[this.oddNotations.indexOf(key)];\n        }\n\n        // find the correct note and notation\n        if (this.sharpNotations.indexOf(key) != -1) {\n            notesToIndex = this.sharpNotations.slice();\n            startPos = this.sharpNotations.indexOf(key);\n        } else {\n            notesToIndex = this.flatNotations.slice();\n            startPos = this.flatNotations.indexOf(key);\n        }\n\n        // double the array length\n        var len = notesToIndex.length;\n        for ( var c = 0; c < len; c++ ) {\n            if (octave) {\n                notesToIndex.push(notesToIndex[c] + (octave+1));\n            } else {\n                notesToIndex.push(notesToIndex[c]);\n            }\n        }\n\n        // add octave notation to the first half of the array\n        if (octave) {\n            for (var c = 0; c < this.flatNotations.length; c++) {\n                notesToIndex[c] += octave;\n            }\n        }\n        // chop off the front of the array to start at the root key in the key signature\n        notesToIndex.splice(0, startPos);\n\n        // build the key signature\n        if (major) {\n            // MAJOR From root: whole step, whole step, half step, whole step, whole step, whole step, half step\n            notesInKey.push( notesToIndex[0] );\n            notesInKey.push( notesToIndex[2] );\n            notesInKey.push( notesToIndex[4] );\n            notesInKey.push( notesToIndex[5] );\n            notesInKey.push( notesToIndex[7] );\n            notesInKey.push( notesToIndex[9] );\n            notesInKey.push( notesToIndex[11] );\n        } else {\n            // MINOR From root: whole step, half step, whole step, whole step, half step, whole step, whole step\n            notesInKey.push( notesToIndex[0] );\n            notesInKey.push( notesToIndex[2] );\n            notesInKey.push( notesToIndex[3] );\n            notesInKey.push( notesToIndex[5] );\n            notesInKey.push( notesToIndex[7] );\n            notesInKey.push( notesToIndex[8] );\n            notesInKey.push( notesToIndex[10] );\n        }\n        return notesInKey;\n    },\n\n    /**\n     * pregenerate a key signature lookup table for every note\n     */\n    generateKeySignatureLookup() {\n        var kys = this.sharpNotations;\n        for (var c = 0; c < kys.length; c++) {\n            this.keys[kys[c]] = this.notesInKeySignature(kys[c], true);\n            this.keys[kys[c] + 'm'] = this.notesInKeySignature(kys[c], false);\n        }\n    }\n\n};\n","import BaseGroup from '../../node_modules/trivr/src/basegroup.es6';\nimport Style from '../themeing/style.es6';\nimport TonePlayback from '../toneplayback.es6';\n\nexport default class Dome extends BaseGroup {\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {\n        var mesh = new THREE.Mesh(this.createGeometry(), this.createMaterial());\n        mesh.position.z = 5;\n        this.add(mesh, 'dome');\n    }\n\n    /**\n     * on render\n     * @param scenecollection\n     * @param mycollection\n     */\n    onRender(scenecollection, mycollection) {\n        if (TonePlayback.isPlaying) {\n            this.group.rotation.y += Math.PI / 1024;\n        }\n    }\n\n    /**\n     * create globe geometry\n     * @returns {THREE.IcosahedronGeometry}\n     */\n    createGeometry() {\n        return new THREE.IcosahedronGeometry( 800, 2 );\n    }\n\n    /**\n     * create globe material\n     */\n    createMaterial() {\n        return new THREE.MeshPhongMaterial({\n            color      :  Style.dome.color,\n            emissive   :  Style.dome.emissive,\n            specular   :  Style.dome.specular,\n            side       :  THREE.BackSide,\n            shininess  :  10,\n            shading    :  THREE.FlatShading,\n            transparent: 1,\n            opacity    : 1\n        });\n    }\n}","import BaseGroup from '../../node_modules/trivr/src/basegroup.es6';\nimport Style from '../themeing/style.es6';\n\nexport default class FloatingParticles extends BaseGroup {\n    /**\n     * on create scene\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {\n        var geometry = new THREE.Geometry();\n        var textureLoader = new THREE.TextureLoader();\n        var sprite = textureLoader.load(Style.floatingparticles.sprite);\n\n        for (var i = 0; i < 10000; i ++) {\n            var vertex = new THREE.Vector3();\n            vertex.x = Math.random() * 2000 - 1000;\n            vertex.y = Math.random() * 2000 - 1000;\n            vertex.z = Math.random() * 2000 - 1000;\n            geometry.vertices.push( vertex );\n        }\n\n        this.materials = [];\n        for (var i = 0; i < 4; i ++ ) {\n            this.materials[i] = new THREE.PointsMaterial({\n                size: Math.random()*1.0 + .75,\n                map: sprite,\n                blending: THREE.AdditiveBlending,\n                depthTest: false,\n                transparent : true });\n\n            this.materials[i].color.set(Style.floatingparticles.color);\n\n            var particles = new THREE.Points( geometry, this.materials[i] );\n\n            particles.rotation.x = Math.random() * 6;\n            particles.rotation.y = Math.random() * 6;\n            particles.rotation.z = Math.random() * 6;\n            this.add(particles);\n\n        }\n    }\n\n    onRender() {\n        var time = Date.now() * 0.00005;\n        for (var i = 0; i < this.children.length; i ++) {\n            var object = this.children[ i ];\n            if ( object instanceof THREE.Points ) {\n                object.rotation.y = time * ( i < 4 ? i + 1 : - ( i + 1 ) );\n            }\n        }\n\n        /*for ( i = 0; i < this.materials.length; i ++ ) {\n            var h = ( 360 * ( 0 + time ) % 360 ) / 360;\n            this.materials[i].color.setHSL( 1, .5, h );\n        }*/\n    }\n\n}","import BaseGroup from '../../../node_modules/trivr/src/basegroup.es6';\nimport Input from '../../input.es6';\nimport Note from '../../musictheory/note.es6';\nimport Style from '../../themeing/style.es6';\nimport Utils from '../../utils.es6';\nimport TonePlayback from '../../toneplayback.es6';\n\nexport default class BaseKeyboard extends BaseGroup {\n    onInitialize(params) {\n        /**\n         * how much rotation occurs on keypress\n         * @type {number}\n         * @private\n         */\n        this._rotationOnPress = Math.PI/16;\n\n        /**\n         * number of octaves\n         * @type {number}\n         * @private\n         */\n        this._numOctaves = params.octaves ? params.octaves : 2;\n\n        /**\n         * starting octave (to better match with MIDI input)\n         * @type {number}\n         * @private\n         */\n        this._startingOctave = params.startoctave ? params.startoctave : 0;\n\n        /**\n         * starting note on keyboard\n         * @type {string}\n         * @private\n         */\n        this._startingNote = 'C';\n\n        /**\n         * key visuals\n         * @type {Array}\n         * @private\n         */\n        this._keys = [];\n\n        /**\n         * midi channels used\n         * @type {Array}\n         * @private\n         */\n        this._midichannels = [];\n\n        /**\n         * starting index at which point to allocate MIDI channels\n         * @type {number}\n         * @private\n         */\n        this._midiChannelStartIndex = 11;\n\n        /**\n         * keyboard/key input\n         * @type {$ES6_ANONYMOUS_CLASS$}\n         * @private\n         */\n        //this._input = new Input(params.input, (keys) => this.onKeyInputChange(keys) );\n\n        /**\n         * suggested keys from key signature prediction\n         * @type {Array}\n         */\n        this.suggestedKeys = [];\n    }\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {\n        //TonePlayback.addEventListener('mididata', data => this.onSongData(data));\n    }\n\n    /**\n     * on render scene\n     * @param scene\n     * @param custom\n     */\n    onRender(scene, custom) {\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c].colortween.animating) {\n                this._keys[c].object.material.color.setRGB(\n                    this._keys[c].colortween.rcolor/100,\n                    this._keys[c].colortween.gcolor/100,\n                    this._keys[c].colortween.bcolor/100 );\n            }\n        }\n    }\n\n    /**\n     * on assets loaded\n     * @param geometry\n     */\n    onAssetsLoaded(geometry) {\n        var mat = new THREE.MeshStandardMaterial( {\n            metalness: 0.7,\n            roughness: 1,\n            side: THREE.FrontSide,\n            shading: THREE.FlatShading\n        });\n        this.setupScene(geometry, mat);\n    };\n\n    /**\n     * dynamically generate circle of keys\n     * @param geometry\n     * @param material\n     */\n    setupScene(geometry, material) {\n        var startOffset = Note.indexOfNotation(this._startingNote);\n        var ntindex = 0;\n        var transformPosition = 0;\n        for (var c = 0; c < this._numOctaves; c++) {\n            for (var d = 0; d < Note.sharpNotations.length; d++) {\n                var note = Note.notationAtIndex(d + startOffset);\n                transformPosition = this.addKey(transformPosition, note.indexOf('#') === -1, note, c, geometry, material);\n                ntindex ++;\n            }\n        }\n\n        return transformPosition;\n    }\n\n    /**\n     * on inactivity (fade away keys and clear key sig)\n     */\n    resetKeys() {\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c].suggested) {\n                var currentColor = this._keys[c].object.material.color.getHex();\n                Utils.copyPropsTo(this._keys[c].colortween, Utils.decToRGB(currentColor, 100), 'color');\n                this._keys[c].colortween.animating = true;\n                var target = Utils.copyPropsTo({}, Utils.decToRGB(Style.keys.normal[this._keys[c].type].color, 100), 'color');\n                createjs.Tween.get(this._keys[c].colortween)\n                    .to(target, 2000)\n                    .wait(100) // wait a few ticks, or the render cycle won't pick up the changes with the flag\n                    .call( function() { this.animating = false; } );\n            }\n        }\n    }\n\n    /**\n     * change key signature to notation given\n     * @param notation\n     */\n    changeKeySignature(notation) {\n        var c;\n        for (c = 0; c < this.suggestedKeys.length; c++) {\n            this.toggleKeySuggestion(this.suggestedKeys[c], notation, false);\n        }\n        this.suggestedKeys = Note.keys[notation];\n\n        for (c = 0; c < this.suggestedKeys.length; c++) {\n            this.toggleKeySuggestion(this.suggestedKeys[c], notation, true, c);\n        }\n    }\n\n    /**\n     * toggle key pressed\n     * @param key\n     */\n    toggleKeyPressed(k) {\n        var key = this.findKeyObjectForNotation(k.notation, k.octave);\n        if (key) {\n            if (k.velocity === 0) {\n                TonePlayback.noteOff(key.notation, key.midichannel, 1/8);\n                var channelindex = this._midichannels.indexOf(key.midichannel);\n                this._midichannels.splice(channelindex, 1);\n                clearTimeout(this._inactivityTimer);\n                key.object.rotation.set(key.originalRotation.x, key.originalRotation.y, key.originalRotation.z);\n                key.currentRotation = 0;\n                key.midichannel = -1;\n                key.down = false;\n            } else {\n                this._midichannels = this._midichannels.sort();\n                var midichannel = this._midichannels[this._midichannels.length-1] + 1;\n                if (!midichannel) {\n                    midichannel = this._midiChannelStartIndex;\n                }\n                TonePlayback.noteOn(TonePlayback.PIANO, key.notation, midichannel);\n                key.currentRotation = k.velocity * this._rotationOnPress;\n                key.object.rotateX(key.currentRotation);\n                key.midichannel = midichannel;\n                key.down = true;\n            }\n        }\n    }\n\n    /**\n     * toggle key suggestion\n     * @param notation\n     * @param keysignotation\n     * @param toggle\n     */\n    toggleKeySuggestion(notation, keysignotation, toggle) {\n        var ntIndex = Note.indexOfNotation(keysignotation);\n        var rootclr = Style.colorwheel[ntIndex];\n\n        var keys = this.findKeyObjectsForNotation(notation);\n\n        for (var c = 0; c < keys.length; c++) {\n            if (toggle) {\n                var clr;\n                if ( ntIndex===0 || ntIndex===2 || ntIndex===4 || ntIndex===6) {\n                    clr = Style.keys.stronglySuggested[keys[c].type];\n                    keys[c].suggested = 'stronglySuggested';\n                } else {\n                    clr = Style.keys.suggested[keys[c].type];\n                    keys[c].suggested = 'suggested';\n                }\n\n                keys[c].object.material.color.setHex(rootclr) ;//clr.color);\n              //  keys[c].object.material.emissive.setHex(rootclr) ; //clr.emissive);\n            } else {\n                keys[c].object.material.color.setHex(Style.keys.normal[keys[c].type].color);\n               // keys[c].object.material.emissive.setHex(Style.keys.normal[keys[c].type].emissive);\n                keys[c].suggested = false;\n            }\n        }\n    }\n\n    /**\n     * create white key geometry\n     * @returns {THREE.Mesh}\n     */\n    createWhiteKey(geometry, material) {\n        var keygeom = geometry.clone();\n        var mat = material.clone();\n        mat.color.setHex(Style.keys.normal.white.color);\n        mat.emissive.setHex(Style.keys.normal.white.emissive);\n        keygeom.translate( 0, -10, 0 );\n        var key = new THREE.Mesh( keygeom, mat);\n        return key;\n    }\n\n    /**\n     * create black key geometry\n     * @returns {THREE.Mesh}\n     */\n    createBlackKey(geometry, material) {\n        var keygeom = geometry.clone();\n        var mat = material.clone();\n        mat.color.setHex(Style.keys.normal.black.color);\n        mat.emissive.setHex(Style.keys.normal.black.emissive);\n        keygeom.translate( 0, -25, 0 );\n        keygeom.scale(1, .5, 1);\n        var key = new THREE.Mesh( keygeom, mat);\n        return key;\n    }\n\n    /**\n     * create and add a key\n     * @param {Number} transformPosition\n     * @param {Boolean} white\n     * @param {String} notation\n     * @param {Number} octave\n     * @param {THREE.Geometry} geometry\n     * @param {THREE.Material} material\n     * @return {Number} transform position\n     */\n    addKey(transformPosition, white, notation, octave, geometry, material) {\n        var key, color, rotation;\n        if (white) {\n            color = 'white';\n            key = this.createWhiteKey(geometry, material);\n        } else {\n            color = 'black';\n            key = this.createBlackKey(geometry, material);\n        }\n        transformPosition = this.applyKeyTransform(key, transformPosition, white);\n        this._keys.push({\n            type: color,\n            object: key,\n            octave: octave + this._startingOctave,\n            colortween: {},\n            notation: notation,\n            originalRotation: {\n                x: key.rotation.x,\n                y: key.rotation.y,\n                z: key.rotation.z }\n        });\n        this.add(key,'key_' + notation);\n        return transformPosition;\n    }\n\n    /**\n     * apply key transform\n     * @param {THREE.Mesh} keymesh\n     * @param {Number} transformPosition\n     * @param {Boolean} whitekey\n     */\n    applyKeyTransform(keymesh, transformPosition, whitekey) {}\n\n    /**\n     * find the key for a specific notation\n     * @param notation\n     * @returns {Array}\n     */\n    findKeyObjectsForNotation(notation) {\n        var keys = [];\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c].notation === notation) {\n                keys.push(this._keys[c]);\n            }\n        }\n        return keys;\n    }\n\n    /**\n     * find specific key object for notation and octave\n     * @param notation\n     * @param octave\n     */\n    findKeyObjectForNotation(notation, octave) {\n        var notationOffset = Note.indexOfNotation(this._startingNote);\n        var indx = octave * Note.sharpNotations.length + Note.sharpNotations.indexOf(notation) - notationOffset;\n        return this._keys[indx];\n    }\n\n    /**\n     * on song data\n     * @param data\n     */\n    onSongData(data) {\n        var notation = Note.MIDItoNotation(data.note);\n        var key = this.findKeyObjectsForNotation(notation);\n        this.toggleKeyPressed(key[0], data.velocity / 127);\n    }\n}\n","import BaseKeyboard from './basekeyboard.es6';\nimport Input from '../../input.es6';\nimport Note from '../../musictheory/note.es6';\nimport Style from '../../themeing/style.es6';\nimport Utils from '../../utils.es6';\nimport TonePlayback from '../../toneplayback.es6';\n\nexport default class CircularKeyboard extends BaseKeyboard {\n    /**\n     * apply key transform\n     * @param {THREE.Mesh} keymesh\n     * @param {Number} position in keyboard\n     * @param {Number} keyindex\n     * @param {Boolean} whitekey\n     */\n    applyKeyTransform(keymesh, transformPosition, whitekey) {\n        var rotate = 0;\n        var extraRotate = 0;\n        if (whitekey) {\n            rotate = (Math.PI * 2) / 14;\n        } else {\n            extraRotate = (Math.PI * 2) / 28;\n        }\n        keymesh.rotation.z = transformPosition + rotate + extraRotate;\n\n        return transformPosition + rotate;\n    }\n\n    /**\n     * setup scene\n     * @param geometry\n     * @param material\n     */\n    setupScene(geometry, material) {\n        super.setupScene(geometry, material);\n        this.group.position.z = -400;\n        this.group.scale.set(10, 10, 10);\n    }\n}\n","import BaseKeyboard from './basekeyboard.es6';\nimport Input from '../../input.es6';\nimport Note from '../../musictheory/note.es6';\nimport Style from '../../themeing/style.es6';\nimport Utils from '../../utils.es6';\nimport TonePlayback from '../../toneplayback.es6';\n\nexport default class TraditionalKeyboard extends BaseKeyboard {\n    onInitialize(params) {\n        super.onInitialize(params);\n\n        /**\n         * how much rotation occurs on keypress\n         * @type {number}\n         * @private\n         */\n        this._rotationOnPress = Math.PI/64;\n    }\n\n    /**\n     * apply key transform\n     * @param {THREE.Mesh} keymesh\n     * @param {Number} position in keyboard\n     * @param {Boolean} whitekey\n     * @return {Number} current position\n     */\n    applyKeyTransform(keymesh, transformPosition, whitekey) {\n        var translate = 2;\n        if (!whitekey) {\n            keymesh.position.y = 5;\n            keymesh.position.z = 1;\n            keymesh.position.x = transformPosition +1;\n            translate = 0;\n        } else {\n            keymesh.position.x = transformPosition +2;\n        }\n        keymesh.rotation.x = 0;\n        return transformPosition + translate;\n    }\n\n    /**\n     * setup scene\n     * @param geometry\n     * @param material\n     */\n    setupScene(geometry, material) {\n        var lastTransformPosition = super.setupScene(geometry, material);\n        this.group.position.x = -lastTransformPosition/2 * 10;\n        this.group.position.z = -200;\n        this.group.position.y = -200;\n        this.group.rotation.x = -Math.PI/2;\n        this.group.scale.set(10, 10, 10);\n    }\n}\n","import BaseGroup from '../../node_modules/trivr/src/basegroup.es6';\nimport Style from '../themeing/style.es6';\n\nexport default class Lighting extends BaseGroup {\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {\n        var light = new THREE.HemisphereLight( Style.lighting.hemisphere.top, Style.lighting.hemisphere.bottom, 4 );\n        var spotLight = new THREE.SpotLight( Style.lighting.spotlight );\n        spotLight.position.set( 0, 0, 400 );\n        spotLight.rotation.x = Math.PI / 2;\n\n        spotLight.shadow.mapSize.width = 1024;\n        spotLight.shadow.mapSize.height = 1024;\n\n        spotLight.shadow.camera.near = 100;\n        spotLight.shadow.camera.far = 400;\n        spotLight.shadow.camera.fov = 30;\n\n        this.add(spotLight);\n        this.add(light);\n    }\n}","import Shaders from './../shaders.es6';\nimport BaseGroup from '../../node_modules/trivr/src/basegroup.es6';\nimport Style from '../themeing/style.es6';\nimport Utils from '../utils.es6';\nimport TonePlayback from '../toneplayback.es6';\n\nexport default class Metronome extends BaseGroup {\n    onInitialize() {\n        /**\n         * metronome hammers in scene\n         * @type {Array}\n         * @private\n         */\n        this._hammers = [];\n\n        /**\n         * synth\n         * @type {Tone}\n         * @private\n         */\n        //this._synth = new Tone.DrumSynth().toMaster();\n\n        /**\n         * tween targets\n         * @type {{drum: {animating: boolean, props: {}}}}\n         * @private\n         */\n        this._tweenTargets = {\n            drum: { animating: false, props: {} },\n        }\n    }\n\n    onCreate(scenecollection, mycollection) {\n        //this.addHammer('right', Math.PI/64, Math.PI * 2, 'C4');\n        //this.addHammer('left', Math.PI/128, Math.PI/4, 'A4');\n        this.addHammer('up', Math.PI/32, Math.PI/2, 'G4');\n        this.addHammer('down', Math.PI/32, 0, 'F3');\n        this.addDrum();\n    }\n\n    /**\n     * on render\n     * @param scenecollection\n     * @param mycollection\n     */\n    onRender(scenecollection, mycollection) {\n        this.animateHammers();\n        this.animateDrum();\n    }\n\n    /**\n     * render cycle for drum\n     */\n    animateDrum() {\n        if (this._tweenTargets.drum.animating) {\n            this.drum.position.z = this._tweenTargets.drum.props.zPosition;\n            this.drum.material.bumpScale = this._tweenTargets.drum.props.bumpscale;\n            this.drum.material.color.setRGB(\n                this._tweenTargets.drum.props.r/100,\n                this._tweenTargets.drum.props.g/100,\n                this._tweenTargets.drum.props.b/100 );\n        }\n    }\n\n    /**\n     * render cycle for hammers\n     */\n    animateHammers() {\n        for (var c = 0; c < this._hammers.length; c++) {\n            var hammer = this._hammers[c];\n\n            if (hammer.animatingGlow) {\n                hammer.glow.material.color.setRGB(\n                    hammer.glowColor.r/100,\n                    hammer.glowColor.g/100,\n                    hammer.glowColor.b/100 );\n            }\n\n            var newrotation = hammer.pivot.rotation[hammer.rotationaxis] + hammer.direction * hammer.rate;\n\n            if (Math.abs(newrotation) > Math.PI - Math.PI/16) {\n                hammer.direction *= -1;\n                newrotation = Math.abs(newrotation)/newrotation * (Math.PI - Math.PI/16);\n                this.triggerDrum(hammer);\n            }\n            hammer.pivot.rotation[hammer.rotationaxis] = newrotation;\n        }\n    }\n\n    /**\n     * sound the drum, the hammer hit it\n     * @param hammer\n     */\n    triggerDrum(hammer) {\n        TonePlayback.noteOn(TonePlayback.SYNTHDRUM, hammer.note, 10, 1/8);\n       // this._synth.triggerAttackRelease(hammer.note, \"16n\");\n        hammer.animatingGlow = true;\n        var startcolor = Utils.decToRGB(Style.metronome.hammer.color, 100);\n        var endcolor = Utils.decToRGB(Style.metronome.hammer.hitcolor, 100);\n        hammer.glowColor.r = startcolor.r;\n        hammer.glowColor.g = startcolor.g;\n        hammer.glowColor.b = startcolor.b;\n        createjs.Tween.get(hammer.glowColor)\n            .to({ r: endcolor.r, g: endcolor.g, b: endcolor.b }, 500)\n            .to({ r: startcolor.r, g: startcolor.g, b: startcolor.b }, 500)\n            .wait(100) // wait a few ticks, or the render cycle won't pick up the changes with the flag\n            .call( function (scope) { scope.animatingGlow = false; } );\n\n        var startcolor = Utils.decToRGB(Style.metronome.drum.color, 100);\n        var endcolor = Utils.decToRGB(Style.metronome.drum.hitcolor, 100);\n        this._tweenTargets.drum.props.r = startcolor.r;\n        this._tweenTargets.drum.props.g = startcolor.g;\n        this._tweenTargets.drum.props.b = startcolor.b;\n        this._tweenTargets.drum.props.zPosition = -400;\n        this._tweenTargets.drum.props.bumpscale = 0;\n        this._tweenTargets.drum.animating = true;\n        this._tweenTargets.drum.currentTween = createjs.Tween.get(this._tweenTargets.drum.props)\n            .to({\n                r: endcolor.r, g: endcolor.g, b: endcolor.b,\n                bumpscale: 5,\n                zPosition: -400 + hammer.direction * 50 }, 150)\n            .to({\n                r: startcolor.r, g: startcolor.g, b: startcolor.b,\n                bumpscale: 0,\n                zPosition: -400 }, 150)\n            .wait(100) // wait a few ticks, or the render cycle won't pick up the changes with the flag\n            .call( () => { this._tweenTargets.drum.animating = false; } );\n    }\n\n    /**\n     * add center drum\n     */\n    addDrum() {\n        var drumgeom = new THREE.CircleGeometry( 30, 24 );\n        drumgeom.scale(1,1, 0.75);\n        var mapHeight = new THREE.TextureLoader().load(Style.metronome.drum.bumpmap);\n        mapHeight.anisotropy = 4;\n        mapHeight.repeat.set(1, 1);\n        mapHeight.wrapS = mapHeight.wrapT = THREE.ClampToEdgeWrapping;\n        mapHeight.format = THREE.RGBFormat;\n\n        var material = new THREE.MeshPhongMaterial( {\n            color: Style.metronome.drum.color,\n            emissive: Style.metronome.drum.emissive,\n            specular: Style.metronome.drum.specular,\n            bumpMap: mapHeight,\n            bumpScale: 0,\n        } );\n\n        this.drum = new THREE.Mesh( drumgeom, material );\n        this.drum.position.z = -400;\n        this.add(this.drum, 'drum');\n    }\n\n    /**\n     * add metronome hammer\n     * @param origin\n     * @param rate\n     * @param offset\n     */\n    addHammer(origin, rate, offset, tone) {\n        var hammergeom = new THREE.SphereGeometry(5);\n        var centerpivot = new THREE.Object3D();\n\n        var textureCube = new THREE.CubeTextureLoader().load(Style.metronome.hammer.refractioncube);\n        textureCube.mapping = THREE.CubeRefractionMapping;\n\n        var innermaterial = new THREE.MeshBasicMaterial( {\n            envMap: textureCube } );\n\n        var outermaterial = new THREE.MeshBasicMaterial( {\n            color: Style.metronome.hammer.color,\n            transparent: true,\n            wireframe: true,\n            opacity: 0.5 } );\n\n\n        var hammer = new THREE.Mesh( hammergeom, innermaterial );\n        hammer.name = 'ball';\n        centerpivot.add(hammer);\n        centerpivot.position.z = -400;\n\n        var glow = new THREE.Mesh( hammergeom.clone(), outermaterial );\n        glow.name = 'glow';\n        glow.scale.multiplyScalar(1.2);\n        centerpivot.add(glow);\n\n        var rotationaxis;\n        switch (origin) {\n            case 'right':\n                glow.position.x = -100;\n                centerpivot.position.x = -100;\n                hammer.position.x = -100;\n                rotationaxis = 'y';\n                break;\n\n            case 'left':\n                glow.position.x = 100;\n                centerpivot.position.x = 100;\n                hammer.position.x = 100;\n                rotationaxis = 'y';\n                break;\n\n            case 'down':\n                glow.position.y = 100;\n                centerpivot.position.y = 100;\n                hammer.position.y = 100;\n                rotationaxis = 'x';\n                break;\n\n            case 'up':\n                glow.position.y = -100;\n                centerpivot.position.y = -100;\n                hammer.position.y = -100;\n                rotationaxis = 'x';\n                break;\n        }\n\n        centerpivot.rotation[rotationaxis] += offset;\n\n        this._hammers.push( {\n            animatingGlow: false,\n            glow: glow,\n            glowColor: {},\n            hammer: hammer,\n            pivot: centerpivot,\n            direction: 1,\n            rate: rate,\n            rotationaxis: rotationaxis,\n            note: tone }\n        );\n\n        this.add(centerpivot, 'hammer');\n    }\n}","import Note from './musictheory/note.es6';\n\nexport default class {\n    constructor(params, cb) {\n        /**\n         * event callback\n         */\n        this._callback = cb;\n\n        /**\n         * JSON config\n         */\n        this._config = params;\n\n        /**\n         * keys down\n         * @type {Array}\n         * @private\n         */\n        this._keys = [];\n\n        /**\n         * potential keys pressed in order\n         * @type {string[]}\n         * @private\n         */\n        this._potentialKeys = [\n            '`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '+',\n            'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\\\\',\n            'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', '\\''\n        ];\n\n        document.addEventListener('keydown', event => this.onKeyDown(event));\n        document.addEventListener('keyup', event => this.onKeyUp(event));\n    }\n\n    /**\n     * get keys down\n     * @param mapping\n     */\n    getKeysDown() {\n        var down = [];\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c] > 0) {\n                var octave = 0;\n                if (c >= this._keys.length/2) { octave = 1; }\n                down.push( { notation: Note.notationAtIndex(c), octave: octave + 2, index: c, velocity: this._keys[c]} );\n            }\n        }\n        return down;\n    }\n\n    /**\n     * on key down\n     * @param event\n     */\n    onKeyDown(event) {\n        var key = this._potentialKeys.indexOf(event.key.toLowerCase());\n        if (key !== -1 && (this._keys[key] === 0 || !this._keys[key])) {\n            this._keys[key] = 1.0; // on an actual MIDI keyboard, we'd have a velocity\n            var octave = Math.floor(key / Note.sharpNotations.length);\n            this._callback({\n                notation: Note.notationAtIndex(key),\n                octave: octave + this._config.startoctave,\n                //index: key,\n                velocity: 1.0,\n                action: 'press' });\n        }\n    }\n\n    /**\n     * on key down\n     * @param event\n     */\n    onKeyUp(event) {\n        var key = this._potentialKeys.indexOf(event.key.toLowerCase());\n        if (key !== -1) {\n            this._keys[key] = 0.0; // on an actual MIDI keyboard, we'd have a velocity\n            var octave = Math.floor(key / Note.sharpNotations.length);\n            this._callback({\n                notation: Note.notationAtIndex(key),\n                octave: octave + this._config.startoctave,\n                //index: key,\n                velocity: 0,\n                action: 'release' });\n        }\n    }\n}\n","export default {\n  \"explosion\": {\n    \"fragment\": \"varying float noise; uniform sampler2D tExplosion;  float random( vec3 scale, float seed ){   return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed ) ; }  void main() {    float r = .01 * random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );   vec2 tPos = vec2( 0, 1.0 - 1.3 * noise + r );   vec4 color = texture2D( tExplosion, tPos );   gl_FragColor = vec4( color.rgb, 1.0 );  }\",\n    \"vertex\": \"  vec3 mod289(vec3 x) {   return x - floor(x * (1.0 / 289.0)) * 289.0; }  vec4 mod289(vec4 x) {   return x - floor(x * (1.0 / 289.0)) * 289.0; }  vec4 permute(vec4 x) {   return mod289(((x*34.0)+1.0)*x); }  vec4 taylorInvSqrt(vec4 r) {   return 1.79284291400159 - 0.85373472095314 * r; }  vec3 fade(vec3 t) {   return t*t*t*(t*(t*6.0-15.0)+10.0); }  float cnoise(vec3 P) {   vec3 Pi0 = floor(P);   vec3 Pi1 = Pi0 + vec3(1.0);   Pi0 = mod289(Pi0);   Pi1 = mod289(Pi1);   vec3 Pf0 = fract(P);   vec3 Pf1 = Pf0 - vec3(1.0);   vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);   vec4 iy = vec4(Pi0.yy, Pi1.yy);   vec4 iz0 = Pi0.zzzz;   vec4 iz1 = Pi1.zzzz;    vec4 ixy = permute(permute(ix) + iy);   vec4 ixy0 = permute(ixy + iz0);   vec4 ixy1 = permute(ixy + iz1);    vec4 gx0 = ixy0 * (1.0 / 7.0);   vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;   gx0 = fract(gx0);   vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);   vec4 sz0 = step(gz0, vec4(0.0));   gx0 -= sz0 * (step(0.0, gx0) - 0.5);   gy0 -= sz0 * (step(0.0, gy0) - 0.5);    vec4 gx1 = ixy1 * (1.0 / 7.0);   vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;   gx1 = fract(gx1);   vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);   vec4 sz1 = step(gz1, vec4(0.0));   gx1 -= sz1 * (step(0.0, gx1) - 0.5);   gy1 -= sz1 * (step(0.0, gy1) - 0.5);    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);   vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);   vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);   vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);   vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);   vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);   vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);   vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));   g000 *= norm0.x;   g010 *= norm0.y;   g100 *= norm0.z;   g110 *= norm0.w;   vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));   g001 *= norm1.x;   g011 *= norm1.y;   g101 *= norm1.z;   g111 *= norm1.w;    float n000 = dot(g000, Pf0);   float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));   float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));   float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));   float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));   float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));   float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));   float n111 = dot(g111, Pf1);    vec3 fade_xyz = fade(Pf0);   vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);   vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);   float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);   return 2.2 * n_xyz; }  float pnoise(vec3 P, vec3 rep) {   vec3 Pi0 = mod(floor(P), rep);   vec3 Pi1 = mod(Pi0 + vec3(1.0), rep);   Pi0 = mod289(Pi0);   Pi1 = mod289(Pi1);   vec3 Pf0 = fract(P);   vec3 Pf1 = Pf0 - vec3(1.0);   vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);   vec4 iy = vec4(Pi0.yy, Pi1.yy);   vec4 iz0 = Pi0.zzzz;   vec4 iz1 = Pi1.zzzz;    vec4 ixy = permute(permute(ix) + iy);   vec4 ixy0 = permute(ixy + iz0);   vec4 ixy1 = permute(ixy + iz1);    vec4 gx0 = ixy0 * (1.0 / 7.0);   vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;   gx0 = fract(gx0);   vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);   vec4 sz0 = step(gz0, vec4(0.0));   gx0 -= sz0 * (step(0.0, gx0) - 0.5);   gy0 -= sz0 * (step(0.0, gy0) - 0.5);    vec4 gx1 = ixy1 * (1.0 / 7.0);   vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;   gx1 = fract(gx1);   vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);   vec4 sz1 = step(gz1, vec4(0.0));   gx1 -= sz1 * (step(0.0, gx1) - 0.5);   gy1 -= sz1 * (step(0.0, gy1) - 0.5);    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);   vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);   vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);   vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);   vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);   vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);   vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);   vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));   g000 *= norm0.x;   g010 *= norm0.y;   g100 *= norm0.z;   g110 *= norm0.w;   vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));   g001 *= norm1.x;   g011 *= norm1.y;   g101 *= norm1.z;   g111 *= norm1.w;    float n000 = dot(g000, Pf0);   float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));   float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));   float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));   float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));   float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));   float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));   float n111 = dot(g111, Pf1);    vec3 fade_xyz = fade(Pf0);   vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);   vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);   float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);   return 2.2 * n_xyz; }  varying float noise; uniform float time;  float turbulence( vec3 p ) {   float w = 100.0;   float t = -.5;   for (float f = 1.0 ; f <= 10.0 ; f++ ){     float power = pow( 2.0, f );     t += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );   }   return t; }  void main() {   noise = 10.0 *  -.10 * turbulence( .5 * normal + time );   float b = 5.0 * pnoise( 0.05 * position + vec3( 2.0 * time ), vec3( 100.0 ) );   float displacement = - 10. * noise + b;    vec3 newPosition = position + normal * displacement;   gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );  }\"\n  },\n  \"glow\": {\n    \"fragment\": \"uniform vec3 glowColor; varying float intensity; void main()  {  vec3 glow = glowColor * intensity;     gl_FragColor = vec4( glow, 1.0 ); }\",\n    \"vertex\": \"uniform vec3 viewVector; uniform float c; uniform float p; varying float intensity; void main()  {     vec3 vNormal = normalize( normalMatrix * normal );  vec3 vNormel = normalize( normalMatrix * viewVector );  intensity = pow( c - dot(vNormal, vNormel), p );       gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }\"\n  }\n}","export default {\n    neutral: {\n        red: 0x7A6869,\n        darkred: 0x2d2627,\n        //green: 0x65876E,\n\n        green: 0xc0c4b6,\n        lightred: 0xeadfdb,\n        grayblue: 0xadaeb0,\n        brown: 0xd8c2b5,\n        orange: 0xf2cfb3\n    },\n\n    neon: {\n        blue: 0x00ecff,\n        green: 0x7cff00,\n        yellow: 0xe3ff00,\n        orange: 0xffb400,\n        violet: 0xfd00ff\n    },\n\n    grayscale: [\n        0x000000,\n        0x2a2a2a,\n        0x5a5a5a,\n        0x8a8a8a,\n        0xaaaaaa,\n        0xffffff\n    ]\n}","import Colors from './colors.es6';\nexport default {\n    colorwheel: [       0xfffa00, 0xffcf00, 0xffa600, 0xff7d01,\n                        0xff2000, 0xf42494, 0x8b20bb, 0x0024ba,\n                        0x007ac7, 0x00b2d6, 0x02b801, 0x84ce00 ],\n\n\n    keys: {\n        normal: {\n            white: {\n                emissive: Colors.grayscale[3],\n                color: Colors.neutral.red\n            },\n            black: {\n                emissive: Colors.grayscale[1],\n                color: Colors.neutral.red\n            }\n        },\n        suggested: {\n            white: {\n                emissive: Colors.grayscale[2],\n                color: Colors.neon.green\n            },\n            black: {\n                emissive: Colors.grayscale[1],\n                color: Colors.neon.green\n            }\n        },\n        stronglySuggested: {\n            white: {\n                emissive: Colors.grayscale[2],\n                color: Colors.neon.orange\n            },\n            black: {\n                emissive: Colors.grayscale[1],\n                color: Colors.neon.orange\n            }\n        },\n\n\n    },\n\n    metronome: {\n        drum: {\n            bumpmap: './assets/images/ripplemap.jpg',\n            color: Colors.neutral.darkred,\n            hitcolor: Colors.neon.blue,\n            emissive: Colors.grayscale[0],\n            specular: Colors.neutral.grayblue\n        },\n\n        hammer: {\n            refractioncube: [\n                './assets/images/nx.jpg',\n                './assets/images/ny.jpg',\n                './assets/images/nz.jpg',\n                './assets/images/nx.jpg',\n                './assets/images/ny.jpg',\n                './assets/images/nz.jpg' ],\n            color: Colors.neutral.red,\n            hitcolor: Colors.neon.blue\n        }\n    },\n\n    dome: {\n        color: Colors.neutral.darkred,\n        emissive: Colors.neutral.darkred,\n        specular: Colors.neutral.red\n    },\n\n    floatingparticles: {\n        sprite: './assets/images/snowflake1.png',\n        color: Colors.grayscale[2]\n    },\n\n    lighting: {\n        hemisphere: {\n            top: Colors.neutral.darkred,\n            bottom: Colors.neutral.green\n        },\n        spotlight: Colors.grayscale[1]\n    }\n}\n","import Note from './musictheory/note.es6';\n\nexport default {\n    SYNTHDRUM: 'synth_drum',\n    PIANO:     'acoustic_grand_piano',\n\n    playerState: 'ready',\n\n    /**\n     * instruments loaded\n     */\n    _instrumentsLoaded: [],\n\n    /**\n     * play midi file\n     * @param uri of midie file\n     */\n    play(uri) {\n        this.playerState = 'loading';\n        MIDI.Player.timeWarp = 1; // speed the song is played back\n        MIDI.Player.loadFile(uri,\n            () => this.onLoaded(),\n            () => this.onProgress(),\n            (err) => this.onError(err));\n    },\n\n    /**\n     * pause playing midi file\n     */\n    pause() {\n        this.playerState = 'paused';\n        MIDI.Player.pause();\n    },\n\n    /**\n     * resume playing midi file\n     */\n    resume() {\n        this.playerState = 'playing';\n        MIDI.Player.resume();\n    },\n\n    /**\n     * check if instrument is loaded\n     * @param instrument\n     * @returns {boolean}\n     */\n    isInstrumentLoaded(instrument) {\n        if (this._instrumentsLoaded.indexOf(instrument) !== -1) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    /**\n     * load instrument\n     * @param instrument\n     */\n    loadInstrument(instrument, path) {\n        MIDI.loadPlugin({\n            soundfontUrl: path,\n            instrument: instrument,\n            onprogress: (state, progress, instrument) => this.onInstrumentLoadProgress(state, progress, instrument),\n            onsuccess: (event) => this.onInstrumentLoaded(event),\n            onerror: (err) => this.onInstrumentLoadedError(err),\n        });\n    },\n\n    /**\n     * play a tone\n     * @param instrument\n     * @param notation\n     * @param duration\n     */\n    playTone(instrument, notation, midichannel, duration) {\n        if (!this.isInstrumentLoaded(instrument)) { return; }\n\n        MIDI.programChange(0, MIDI.GM.byName[instrument].number);\n        var delay = 0; // play one note every quarter second\n        var note = Note.notationToMIDI(notation); // the MIDI note\n        var velocity = 127; // how hard the note hits\n        // play the note\n        MIDI.setVolume(0, 127);\n        MIDI.noteOn(0, note, velocity, delay);\n\n        if (duration) {\n            MIDI.noteOff(0, note, delay + duration);\n        }\n    },\n\n    /**\n     * note on\n     * @param instrument\n     * @param notation\n     * @param midichannel\n     */\n    noteOn(instrument, notation, midichannel, duration) {\n        if (!this.isInstrumentLoaded(instrument)) { return; }\n        var note = Note.notationToMIDI(notation);\n        MIDI.programChange(midichannel, MIDI.GM.byName[instrument].number);\n        var velocity = 127; // how hard the note hits\n        MIDI.setVolume(0, 127);\n        MIDI.noteOn(midichannel, note, velocity, 0);\n\n        if (duration) {\n            MIDI.noteOff(midichannel, note, duration);\n        }\n    },\n\n    /**\n     * note off\n     * @param notation\n     * @param midichannel\n     * @param delay\n     */\n    noteOff(notation, midichannel, delay) {\n        if (!delay) { delay = 0; }\n        var note = Note.notationToMIDI(notation);\n        MIDI.noteOff(midichannel, note, delay);\n    },\n\n    /**\n     * add event listener\n     * @param eventtype\n     * @param callback\n     */\n    addEventListener(eventtype, callback) {\n        if (!this._listeners) { this._listeners = []; }\n        this._listeners.push( { type: eventtype, callback: callback });\n    },\n\n    /**\n     * on instrument loaded\n     * @param event\n     */\n    onInstrumentLoaded() {},\n\n    /**\n     * on instrument load progress\n     * @param state\n     * @param progress\n     * @param instrument\n     */\n    onInstrumentLoadProgress(state, progress, instrument) {\n        if (instrument && progress === 1) {\n            console.log(instrument + ' loaded');\n            this._instrumentsLoaded.push(instrument);\n        }\n    },\n\n    /**\n     * on instrument loaded error\n     * @param err\n     */\n    onInstrumentLoadedError(err) {\n        console.log('Instrument loading error', err);\n    },\n\n    onLoaded() {\n        MIDI.programChange(0, MIDI.GM.byName[this.PIANO].number);\n        MIDI.Player.start();\n        this.playerState = 'playing';\n        this.isPlaying = true;\n        MIDI.Player.addListener(data => this.onMIDIData(data));\n    },\n\n    onProgress() {\n        console.log('progress');\n    },\n\n    onError(err) {\n        console.log('error', err);\n    },\n\n    /**\n     * on midi data callback\n     * @param data\n     */\n    onMIDIData(data) {\n        if (this._listeners) {\n            for (var c = 0; c < this._listeners.length; c++) {\n                if (this._listeners[c].type === 'mididata') {\n                    console.log(data);\n                    this._listeners[c].callback.apply(this, [{ note: data.note - 21, velocity: data.velocity }]);\n                }\n            }\n        }\n    }\n}","import Note from './musictheory/note.es6';\n\nexport default {\n    /**\n     * apply n number of properties to an object\n     * @param object\n     * @param {Object} props\n     * @param {String} namespace of property (prepend key name)\n     */\n    copyPropsTo(object, props, namespace) {\n        if (!namespace) { namespace = ''; }\n        for (var c in props) {\n            object[c + namespace] = props[c];\n        }\n        return object;\n    },\n\n    /**\n     * turn decimal color to RGB\n     * @param dec\n     * @param max\n     * @returns {{r: number, g: number, b: number}}\n     */\n    decToRGB(dec, max) {\n        if (!max) { max = 255; }\n        max += 1; // aids with rounding\n        var r = Math.floor(dec / (256*256));\n        var g = Math.floor(dec / 256) % 256;\n        var b = dec % 256;\n        return { r: r/255 * max, g: g/255 * max, b: b/255 * max };\n    },\n\n    RGBToDec(rgb) {\n        return rgb.r << 16 + rgb.g << 16 + rgb.b;\n    }\n}"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}