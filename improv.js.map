{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/improv.es6","src/input.es6","src/midikeymanager.es6","src/musictheory/keysignatureprediction.es6","src/musictheory/note.es6","src/objects/dome.es6","src/objects/keyboards/basekeyboard.es6","src/objects/keyboards/circularkeyboard.es6","src/objects/keyboards/traditionalkeyboard.es6","src/objects/lighting.es6","src/objects/metronome.es6","src/objects/particleflock.es6","src/qwertykeymanager.es6","src/shaders.es6","src/themeing/colors.es6","src/themeing/style.es6","src/toneplayback.es6","src/utils.es6","../trivr/src/basegroup.es6"],"names":[],"mappings":"AAAA;;;;;;;;;ACAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqB,M;AACjB,oBAAY,KAAZ,EAAmB,SAAnB,EAA8B;AAAA;;AAAA;;AAC1B;;;;AAIA,aAAK,mBAAL,GAA2B,IAA3B;;AAEA;;;;;AAKA,aAAK,gBAAL,GAAwB,IAAxB;;AAEA,aAAK,MAAL,GAAc,KAAd;AACA,aAAK,QAAL,GAAgB,IAAI,cAAJ,EAAhB;AACA,aAAK,QAAL,CAAc,kBAAd,GAAmC;AAAA,mBAAM,MAAK,cAAL,EAAN;AAAA,SAAnC;AACA,aAAK,QAAL,CAAc,IAAd,CAAmB,KAAnB,EAA0B,SAA1B;AACA,aAAK,QAAL,CAAc,IAAd;AACH;;AAED;;;;;;;;yCAIiB,K,EAAO;AAAA;;AACpB,yBAAa,KAAK,gBAAlB;AACA,iBAAK,gBAAL,GAAwB,WAAY;AAAA,uBAAM,OAAK,mBAAL,EAAN;AAAA,aAAZ,EAA8C,IAA9C,CAAxB;;AAEA,iBAAK,SAAL,CAAe,gBAAf,CAAgC;AAC5B,0BAAU,MAAM,OAAN,CAAc,QADI;AAE5B,wBAAQ,MAAM,OAAN,CAAc,MAFM;AAG5B,0BAAU,MAAM,OAAN,CAAc,QAHI,EAAhC;;AAKA,gBAAI,MAAM,YAAN,CAAmB,MAAnB,GAA4B,CAA5B,IAAiC,KAAK,mBAAL,KAA6B,MAAM,YAAN,CAAmB,CAAnB,EAAsB,GAAxF,EAA6F;AACzF,qBAAK,SAAL,CAAe,kBAAf,CAAkC,MAAM,YAAN,CAAmB,CAAnB,EAAsB,GAAxD;AACA,qBAAK,YAAL,CAAkB,kBAAlB,CAAqC,MAAM,YAAN,CAAmB,CAAnB,EAAsB,GAA3D;AACA,qBAAK,mBAAL,GAA2B,MAAM,YAAN,CAAmB,CAAnB,EAAsB,GAAjD;AACA,qBAAK,UAAL,CAAgB,WAAhB,CAA4B,gBAAM,UAAN,CAAiB,eAAK,eAAL,CAAqB,MAAM,YAAN,CAAmB,CAAnB,EAAsB,GAA3C,CAAjB,CAA5B;AACA,qBAAK,UAAL,CAAgB,QAAhB,CAAyB,gBAAM,UAAN,CAAiB,eAAK,eAAL,CAAqB,MAAM,YAAN,CAAmB,CAAnB,EAAsB,GAA3C,CAAjB,CAAzB;AACH;;AAED;AACC;;;;;;;;;;;AAaH;;AAEF;;;;;;8CAGsB;AAClB,iBAAK,SAAL,CAAe,SAAf;AACA,iBAAK,YAAL,CAAkB,SAAlB;AACA,iBAAK,MAAL,CAAY,sBAAZ;AACA,iBAAK,UAAL,CAAgB,WAAhB;AACA,iBAAK,UAAL,CAAgB,QAAhB;AACF;;AAEF;;;;;;yCAGiB;AACb,gBAAI,KAAK,QAAL,CAAc,UAAd,KAA6B,eAAe,IAAhD,EAAsD;AAClD,oBAAI,KAAK,QAAL,CAAc,MAAd,KAAyB,GAA7B,EAAkC;AAC9B,wBAAI,SAAS,KAAK,KAAL,CAAW,KAAK,QAAL,CAAc,YAAzB,CAAb;AACA,yBAAK,KAAL,CAAW,MAAX;AACH,iBAHD,MAGO;AACH,4BAAQ,GAAR,CAAY,uCAAZ;AACH;AACJ;AACJ;AACD;;;;;;;;8BAKM,M,EAAQ;AAAA;;AACV,iBAAK,MAAL,CAAY,QAAZ,GAAuB,KAAK,MAA5B;;AAEA,iBAAK,MAAL,GAAc,oBAAU,OAAO,KAAjB,EAAwB,UAAC,IAAD;AAAA,uBAAU,OAAK,gBAAL,CAAsB,IAAtB,CAAV;AAAA,aAAxB,CAAd;AACA,iBAAK,SAAL,GAAiB,kCAAwB,OAAO,QAA/B,CAAjB;AACA,iBAAK,YAAL,GAAoB,+BAAqB,OAAO,eAA5B,CAApB;AACA,iBAAK,UAAL,GAAkB,yBAAlB;AACA,iBAAK,UAAL,GAAkB,6BAAlB;;AAEA,iBAAK,MAAL,CAAY,UAAZ,CAAuB,CACnB,KAAK,UADc,EAEnB,KAAK,UAFc,EAGnB,oBAHmB,EAInB,KAAK,SAJc,EAKnB,KAAK,YALc,EAMnB,wBANmB,CAAvB;;AAQA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,KAAP,CAAa,UAAb,CAAwB,MAA5C,EAAoD,GAApD,EAAyD;AACrD,uCAAa,cAAb,CAA4B,OAAO,KAAP,CAAa,UAAb,CAAwB,CAAxB,CAA5B,EAAwD,OAAO,KAAP,CAAa,iBAArE;AACH;AACD,qBAAS,gBAAT,CAA0B,SAA1B,EAAqC;AAAA,uBAAS,OAAK,SAAL,CAAe,KAAf,CAAT;AAAA,aAArC;AACH;;AAED;;;;;;;kCAIU,K,EAAO;AACb,gBAAI,MAAM,IAAN,KAAe,OAAnB,EAA4B;AACxB,wBAAQ,uBAAa,WAArB;AACI,yBAAK,OAAL;AAAc,+CAAa,IAAb,CAAkB,8DAAlB,EAAmF;AACjG,yBAAK,SAAL;AAAgB,+CAAa,KAAb,GAAsB;AACtC,yBAAK,QAAL;AAAe,+CAAa,MAAb,GAAuB;AAH1C;AAKH;AACJ;;;+BAEM,K,EAAO,M,EAAQ;AAClB,kBAAM,QAAN,CAAe,UAAf,GAA4B,IAA5B;AACA,kBAAM,QAAN,CAAe,WAAf,GAA6B,IAA7B;AACH;;;+BAEM,K,EAAO,M,EAAQ,CAAE;;;;;;kBAlIP,M;;;;;;;;;;;ACXrB;;;;AACA;;;;AACA;;;;;;;;;AAGI,oBAAY,MAAZ,EAAoB,EAApB,EAAwB;AAAA;;AAAA;;AACpB;;;;;AAKA,YAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC5B,iBAAK,WAAL,GAAmB,+BAAqB,MAArB,EAA6B;AAAA,uBAAW,MAAK,WAAL,CAAiB,OAAjB,CAAX;AAAA,aAA7B,CAAnB;AACH,SAFD,MAEO,IAAI,OAAO,MAAP,KAAkB,MAAtB,EAA8B;AACjC,iBAAK,WAAL,GAAmB,6BAAmB,MAAnB,EAA2B;AAAA,uBAAW,MAAK,WAAL,CAAiB,OAAjB,CAAX;AAAA,aAA3B,CAAnB;AACH;;AAED;;;;;AAKA,aAAK,iBAAL,GAAyB,sCAAzB;;AAEA;;;AAGA,aAAK,SAAL,GAAiB,EAAjB;AACH;;AAED;;;;;;;iDAGyB;AACrB,iBAAK,iBAAL,CAAuB,YAAvB;AACH;;AAED;;;;;;;oCAIY,O,EAAS;AACjB,gBAAI,KAAK,KAAK,WAAL,CAAiB,WAAjB,EAAT;AACA,gBAAI,YAAY,KAAK,iBAAL,CAAuB,MAAvB,CAA8B,EAA9B,CAAhB;AACA,iBAAK,SAAL,CAAe,KAAf,CAAqB,IAArB,EAA2B,CAAE,EAAE,MAAM,EAAR,EAAY,cAAc,SAA1B,EAAqC,SAAS,OAA9C,EAAF,CAA3B;AACH;;;;;;;;;;;;;;;;;AC7CL;;;;;;;;;AAGI,oBAAY,MAAZ,EAAoB,EAApB,EAAwB;AAAA;;AACpB;;;AAGA,aAAK,SAAL,GAAiB,EAAjB;;AAEA;;;;;AAKA,aAAK,KAAL,GAAa,EAAb;;AAEA;;;;;;AAMA,aAAK,QAAL,GAAgB,eAAK,cAAL,CACX,MADW,CACJ,eAAK,cADD,EAEX,MAFW,CAEJ,eAAK,cAFD,EAGX,MAHW,CAGJ,eAAK,cAHD,EAIX,MAJW,CAIJ,eAAK,cAJD,EAKX,MALW,CAKJ,eAAK,cALD,EAMX,MANW,CAMJ,eAAK,cAND,EAOX,MAPW,CAOJ,eAAK,cAPD,EAQX,MARW,CAQJ,eAAK,cARD,EASX,MATW,CASJ,eAAK,cATD,EASiB,MATjB,CASwB,CATxB,EAS2B,eAAK,cAAL,CAAoB,MAApB,GAA4B,EATvD,CAAhB;;AAWA,aAAK,gBAAL;AACH;;AAED;;;;;;;2CAGmB;AAAA;;AACf;AACA,gBAAI,UAAU,iBAAd,EAAiC;AAC7B,0BAAU,iBAAV,GAA8B,IAA9B,CACI,UAAC,KAAD;AAAA,2BAAW,MAAK,aAAL,CAAmB,KAAnB,CAAX;AAAA,iBADJ,EAEI,UAAC,KAAD;AAAA,2BAAW,MAAK,aAAL,CAAmB,KAAnB,CAAX;AAAA,iBAFJ;AAGH,aAJD,MAIO;AACH,wBAAQ,GAAR,CAAY,kCAAZ;AACH;AACJ;;AAED;;;;;;;sCAIc,I,EAAM;AAAA;;AAChB,gBAAI,SAAS,KAAK,MAAlB;AADgB;AAAA;AAAA;;AAAA;AAEhB,qCAAkB,OAAO,MAAP,EAAlB,8HAAmC;AAAA,wBAA1B,KAA0B;;AAC/B,0BAAM,aAAN,GAAsB;AAAA,+BAAO,OAAK,aAAL,CAAmB,GAAnB,CAAP;AAAA,qBAAtB;AACH;AAJe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKnB;;AAED;;;;;;;sCAIc,K,EAAO;AACjB,oBAAQ,GAAR,CAAY,sGAAsG,KAAlH;AACH;;AAED;;;;;;;sCAIc,G,EAAK;AACf,oBAAQ,GAAR,CAAY,GAAZ;AACA,gBAAI,MAAM,IAAI,IAAJ,CAAS,CAAT,KAAe,CAAzB;AACA,gBAAI,UAAU,IAAI,IAAJ,CAAS,CAAT,IAAc,GAA5B;AACA,gBAAI,aAAa,IAAI,IAAJ,CAAS,CAAT,CAAjB;AACA,gBAAI,WAAW,CAAf;AACA,gBAAI,IAAI,IAAJ,CAAS,MAAT,GAAkB,CAAtB,EACI,WAAW,IAAI,IAAJ,CAAS,CAAT,IAAc,GAAzB;;AAEJ;AACA,gBAAK,OAAK,CAAL,IAAY,OAAK,CAAN,IAAW,YAAU,CAArC,EAA2C;AAAE;AACzC,qBAAK,OAAL,CAAa,UAAb;AACH,aAFD,MAEO,IAAI,OAAO,CAAX,EAAc;AAAE;AACnB,qBAAK,SAAL,CAAe,UAAf,EAA2B,QAA3B;AACH,aAdc,CAcb;AACL;;AAED;;;;;;sCAGc;AACV,gBAAI,OAAO,EAAX;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,KAAL,CAAW,MAA/B,EAAuC,GAAvC,EAA4C;AACxC,oBAAI,KAAK,KAAL,CAAW,CAAX,IAAgB,CAApB,EAAuB;AACnB,wBAAI,SAAS,CAAb;AACA,wBAAI,KAAK,KAAK,KAAL,CAAW,MAAX,GAAkB,CAA3B,EAA8B;AAAE,iCAAS,CAAT;AAAa;AAC7C,yBAAK,IAAL,CAAW,EAAE,UAAU,KAAK,QAAL,CAAc,CAAd,CAAZ,EAA8B,QAAQ,MAAtC,EAA8C,OAAO,CAArD,EAAwD,UAAU,KAAK,KAAL,CAAW,CAAX,CAAlE,EAAX;AACH;AACJ;AACD,mBAAO,IAAP;AACH;;AAED;;;;;;;;kCAKU,G,EAAK,Q,EAAU;AACrB,iBAAK,KAAL,CAAW,GAAX,IAAkB,QAAlB;AACA,gBAAI,SAAS,CAAb;AACA,qBAAS,KAAK,KAAL,CAAW,MAAM,eAAK,cAAL,CAAoB,MAArC,CAAT;AACA,iBAAK,SAAL,CAAe;AACX,0BAAU,KAAK,QAAL,CAAc,GAAd,CADC;AAEX,wBAAQ,MAFG;AAGX,uBAAO,GAHI;AAIX,0BAAU,QAJC;AAKX,wBAAQ,OALG,EAAf;AAMH;;AAED;;;;;;;gCAIQ,G,EAAK;AACT,iBAAK,KAAL,CAAW,GAAX,IAAkB,GAAlB;AACA,gBAAI,SAAS,CAAb;AACA,qBAAS,KAAK,KAAL,CAAW,MAAM,eAAK,cAAL,CAAoB,MAArC,CAAT;AACA,iBAAK,SAAL,CAAe;AACX,0BAAU,KAAK,QAAL,CAAc,GAAd,CADC;AAEX,wBAAQ,MAFG;AAGX,uBAAO,GAHI;AAIX,0BAAU,CAJC;AAKX,wBAAQ,SALG,EAAf;AAMH;;;;;;;;;;;;;;;;;ACxIL;;;;;;;;;AAGI,sBAAc;AAAA;;AACV;;;;;AAKA,aAAK,yBAAL,GAAiC,EAAjC;;AAEA;;;;;AAKA,aAAK,sBAAL,GAA8B,GAA9B;;AAEA,uBAAK,0BAAL;AACH;;AAED;;;;;;;;+BAIO,I,EAAM;AACT,gBAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AAAE,uBAAO,KAAK,yBAAZ;AAAwC;AACjE,gBAAI,eAAe,EAAnB;AACA,iBAAK,IAAI,GAAT,IAAgB,eAAK,IAArB,EAA2B;AACvB,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AAClC,wBAAI,eAAK,IAAL,CAAU,GAAV,EAAe,OAAf,CAAuB,KAAK,CAAL,EAAQ,QAA/B,MAA6C,CAAC,CAAlD,EAAqD;AACjD,4BAAI,CAAC,aAAa,GAAb,CAAL,EAAwB;AAAE,yCAAa,GAAb,IAAoB,CAApB;AAAwB;AAClD,qCAAa,GAAb;;AAEA,4BAAI,KAAK,CAAL,EAAQ,QAAR,KAAqB,GAAzB,EAA8B;AAC1B,yCAAa,GAAb,KAAqB,GAArB,CAD0B,CACA;AAC7B;AACJ;AACJ;AACJ;;AAED,gBAAI,SAAS,EAAb;AACA,iBAAK,IAAI,KAAT,IAAkB,YAAlB,EAAgC;AAC5B,uBAAO,IAAP,CAAa,EAAE,OAAO,aAAa,KAAb,CAAT,EAA8B,KAAK,KAAnC,EAA0C,WAAW,KAAK,GAAL,EAArD,EAAb;AACH;;AAED,iBAAK,qBAAL;AACA,mBAAO,KAAK,0BAAL,CAAgC,MAAhC,CAAP;AACH;;AAED;;;;;;uCAGe;AACX,iBAAK,yBAAL,GAAiC,EAAjC;AACH;;AAED;;;;;;gDAGwB;AACpB,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,yBAAL,CAA+B,MAAnD,EAA2D,GAA3D,EAAgE;AAC5D,qBAAK,yBAAL,CAA+B,CAA/B,EAAkC,KAAlC,IAA2C,KAAK,sBAAhD;AACH;AACJ;;AAED;;;;;;;mDAI2B,M,EAAQ;AAC/B,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,OAAO,MAA3B,EAAmC,GAAnC,EAAwC;AACpC,oBAAI,QAAQ,KAAZ;AACA,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,yBAAL,CAA+B,MAAnD,EAA2D,GAA3D,EAAgE;AAC5D,wBAAI,KAAK,yBAAL,CAA+B,CAA/B,EAAkC,GAAlC,KAA0C,OAAO,CAAP,EAAU,GAAxD,EAA6D;AACzD,gCAAQ,IAAR;AACA,6BAAK,yBAAL,CAA+B,CAA/B,EAAkC,KAAlC,IAA2C,OAAO,CAAP,EAAU,KAArD;AACH;AACJ;AACD,oBAAI,CAAC,KAAL,EAAY;AACR,yBAAK,yBAAL,CAA+B,IAA/B,CAAoC,OAAO,CAAP,CAApC;AACH;AACJ;AACD,mBAAO,KAAK,yBAAL,CAA+B,IAA/B,CAAoC,UAAS,CAAT,EAAY,CAAZ,EAAe;AAAE,uBAAQ,EAAE,KAAF,GAAU,EAAE,KAAb,GAAuB,CAAvB,GAA6B,EAAE,KAAF,GAAU,EAAE,KAAb,GAAsB,CAAC,CAAvB,GAA2B,CAA9D;AAAmE,aAAxH,CAAP;AACH;;;;;;;;;;;;;;ACpFL;;;;kBAIe;AACX;AACA,UAAM,EAFK;;AAIX;;;;;;AAMA,oBAAgB,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,IAAtB,EAA4B,GAA5B,EAAiC,IAAjC,EAAuC,GAAvC,EAA4C,GAA5C,EAAiD,IAAjD,EAAuD,GAAvD,EAA4D,IAA5D,CAVL;;AAYX;;;;;;AAMA,mBAAe,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,IAAtB,EAA4B,GAA5B,EAAiC,IAAjC,EAAuC,GAAvC,EAA4C,GAA5C,EAAiD,IAAjD,EAAuD,GAAvD,EAA4D,IAA5D,CAlBJ;;AAoBX;;;;AAIA,mBAxBW,2BAwBK,QAxBL,EAwBe;AACtB,YAAI,QAAQ,KAAK,cAAL,CAAoB,OAApB,CAA4B,QAA5B,CAAZ;AACA,YAAI,UAAU,CAAC,CAAf,EAAkB;AACd,oBAAQ,KAAK,aAAL,CAAmB,OAAnB,CAA2B,QAA3B,CAAR;AACH;AACD,eAAO,KAAP;AACH,KA9BU;;;AAgCX;;;;AAIA,mBApCW,2BAoCK,KApCL,EAoCY,UApCZ,EAoCwB;AAC/B,YAAI,SAAS,KAAK,cAAL,CAAoB,MAAjC,EAAyC;AACrC,oBAAQ,QAAQ,KAAK,cAAL,CAAoB,MAApC;AACH;;AAED,YAAI,UAAJ,EAAgB;AACZ,mBAAO,KAAK,aAAL,CAAmB,KAAnB,CAAP;AACH,SAFD,MAEO;AACH,mBAAO,KAAK,cAAL,CAAoB,KAApB,CAAP;AACH;AACJ,KA9CU;;;AAgDX;;;;;;AAMC,kBAAc,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAtDJ;;AAwDX;;;;;;AAMC,wBAAoB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CA9DV;;AAgEX;;;;;AAKA,kBArEW,0BAqEI,KArEJ,EAqEW;AAClB,YAAI,WAAW,QAAQ,KAAK,cAAL,CAAoB,MAA3C;AACA,eAAO,KAAK,cAAL,CAAoB,QAApB,CAAP;AACH,KAxEU;;;AA0EX;;;;AAIA,kBA9EW,0BA8EI,QA9EJ,EA8Ec;AACrB,YAAI,QAAQ,KAAK,aAAL,CAAmB,QAAnB,CAAZ;AACA,YAAI,SAAS,KAAK,cAAL,CAAoB,OAApB,CAA4B,MAAM,QAAlC,CAAb;AACA,YAAI,WAAW,CAAC,CAAhB,EAAmB;AACf,qBAAS,KAAK,aAAL,CAAmB,OAAnB,CAA2B,MAAM,QAAjC,CAAT;AACH;AACD,eAAO,MAAM,MAAN,GAAe,KAAK,cAAL,CAAoB,MAAnC,GAA4C,MAAnD;AACH,KArFU;;;AAuFX;;;;AAIA,iBA3FW,yBA2FG,QA3FH,EA2Fa;AACpB,YAAI,OAAO,EAAX;AACA;AACA,YAAI,SAAS,SAAS,MAAT,CAAgB,SAAS,MAAT,GAAgB,CAAhC,CAAb;AACA,YAAI,SAAS,MAAT,KAAoB,MAAxB,EAAgC;AAC5B,iBAAK,MAAL,GAAc,MAAd;AACA,iBAAK,QAAL,GAAgB,SAAS,MAAT,CAAgB,CAAhB,EAAmB,SAAS,MAAT,GAAgB,CAAnC,CAAhB;AACH,SAHD,MAGO;AACH,iBAAK,MAAL,GAAc,CAAd,CADG,CACc;AACjB,iBAAK,QAAL,GAAgB,QAAhB;AACH;;AAED,eAAO,IAAP;AACH,KAxGU;;;AA0GX;;;;;;AAMA,2BAhHW,mCAgHa,EAhHb,EAgHiB;AACxB,YAAI,SAAS,CAAb;;AAEA;AACA,YAAK,CAAC,MAAO,SAAS,GAAG,MAAH,CAAU,GAAG,MAAH,GAAW,CAArB,CAAT,CAAP,CAAN,EAAkD;AAC9C,qBAAS,SAAS,GAAG,MAAH,CAAU,GAAG,MAAH,GAAW,CAArB,CAAT,CAAT;AACA,iBAAK,GAAG,MAAH,CAAU,CAAV,EAAa,GAAG,MAAH,GAAU,CAAvB,CAAL;AACH;;AAED;AACA,YAAI,KAAK,YAAL,CAAkB,OAAlB,CAA0B,EAA1B,KAAiC,CAAC,CAAtC,EAAyC;AACrC,iBAAK,KAAK,kBAAL,CAAwB,KAAK,YAAL,CAAkB,OAAlB,CAA0B,EAA1B,CAAxB,CAAL;AACH;;AAED,YAAI,IAAJ;AACA,YAAI,OAAO,KAAK,cAAL,CAAoB,OAApB,CAA4B,EAA5B,CAAX;;AAEA,YAAI,QAAQ,CAAC,CAAb,EAAgB;AACZ,mBAAO,KAAK,aAAL,CAAmB,OAAnB,CAA2B,EAA3B,CAAP;AACH;;AAED,YAAI,QAAQ,CAAC,CAAb,EAAgB;AACZ,oBAAQ,CAAC,SAAO,CAAR,IAAa,KAAK,cAAL,CAAoB,MAAzC;AACA,mBAAO,MAAO,KAAK,GAAL,CAAS,CAAT,EAAY,OAAK,EAAjB,CAAd;AACH;AACD,eAAO,IAAP;AACH,KA1IU;;;AA4IX;;;;;;;;;AASA,uBArJW,+BAqJS,GArJT,EAqJc,KArJd,EAqJqB,MArJrB,EAqJ6B;AACpC,YAAI,YAAJ;AACA,YAAI,aAAa,EAAjB;AACA,YAAI,QAAJ;;AAEA;AACA,YAAI,KAAK,YAAL,CAAkB,OAAlB,CAA0B,GAA1B,KAAkC,CAAC,CAAvC,EAA0C;AACtC,kBAAM,KAAK,kBAAL,CAAwB,KAAK,YAAL,CAAkB,OAAlB,CAA0B,GAA1B,CAAxB,CAAN;AACH;;AAED;AACA,YAAI,KAAK,cAAL,CAAoB,OAApB,CAA4B,GAA5B,KAAoC,CAAC,CAAzC,EAA4C;AACxC,2BAAe,KAAK,cAAL,CAAoB,KAApB,EAAf;AACA,uBAAW,KAAK,cAAL,CAAoB,OAApB,CAA4B,GAA5B,CAAX;AACH,SAHD,MAGO;AACH,2BAAe,KAAK,aAAL,CAAmB,KAAnB,EAAf;AACA,uBAAW,KAAK,aAAL,CAAmB,OAAnB,CAA2B,GAA3B,CAAX;AACH;;AAED;AACA,YAAI,MAAM,aAAa,MAAvB;AACA,aAAM,IAAI,IAAI,CAAd,EAAiB,IAAI,GAArB,EAA0B,GAA1B,EAAgC;AAC5B,gBAAI,MAAJ,EAAY;AACR,6BAAa,IAAb,CAAkB,aAAa,CAAb,KAAmB,SAAO,CAA1B,CAAlB;AACH,aAFD,MAEO;AACH,6BAAa,IAAb,CAAkB,aAAa,CAAb,CAAlB;AACH;AACJ;;AAED;AACA,YAAI,MAAJ,EAAY;AACR,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,aAAL,CAAmB,MAAvC,EAA+C,GAA/C,EAAoD;AAChD,6BAAa,CAAb,KAAmB,MAAnB;AACH;AACJ;AACD;AACA,qBAAa,MAAb,CAAoB,CAApB,EAAuB,QAAvB;;AAEA;AACA,YAAI,KAAJ,EAAW;AACP;AACA,uBAAW,IAAX,CAAiB,aAAa,CAAb,CAAjB;AACA,uBAAW,IAAX,CAAiB,aAAa,CAAb,CAAjB;AACA,uBAAW,IAAX,CAAiB,aAAa,CAAb,CAAjB;AACA,uBAAW,IAAX,CAAiB,aAAa,CAAb,CAAjB;AACA,uBAAW,IAAX,CAAiB,aAAa,CAAb,CAAjB;AACA,uBAAW,IAAX,CAAiB,aAAa,CAAb,CAAjB;AACA,uBAAW,IAAX,CAAiB,aAAa,EAAb,CAAjB;AACH,SATD,MASO;AACH;AACA,uBAAW,IAAX,CAAiB,aAAa,CAAb,CAAjB;AACA,uBAAW,IAAX,CAAiB,aAAa,CAAb,CAAjB;AACA,uBAAW,IAAX,CAAiB,aAAa,CAAb,CAAjB;AACA,uBAAW,IAAX,CAAiB,aAAa,CAAb,CAAjB;AACA,uBAAW,IAAX,CAAiB,aAAa,CAAb,CAAjB;AACA,uBAAW,IAAX,CAAiB,aAAa,CAAb,CAAjB;AACA,uBAAW,IAAX,CAAiB,aAAa,EAAb,CAAjB;AACH;AACD,eAAO,UAAP;AACH,KAhNU;;;AAkNX;;;AAGA,8BArNW,wCAqNkB;AACzB,YAAI,MAAM,KAAK,cAAf;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,IAAI,MAAxB,EAAgC,GAAhC,EAAqC;AACjC,iBAAK,IAAL,CAAU,IAAI,CAAJ,CAAV,IAAoB,KAAK,mBAAL,CAAyB,IAAI,CAAJ,CAAzB,EAAiC,IAAjC,CAApB;AACA,iBAAK,IAAL,CAAU,IAAI,CAAJ,IAAS,GAAnB,IAA0B,KAAK,mBAAL,CAAyB,IAAI,CAAJ,CAAzB,EAAiC,KAAjC,CAA1B;AACH;AACJ;AA3NU,C;;;;;;;;;;;ACJf;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqB,I;;;;;;;;;;;;AACjB;;;;;iCAKS,K,EAAO,M,EAAQ;AACpB,gBAAI,OAAO,IAAI,MAAM,IAAV,CAAe,KAAK,cAAL,EAAf,EAAsC,KAAK,cAAL,EAAtC,CAAX;AACA,iBAAK,QAAL,CAAc,CAAd,GAAkB,CAAlB;AACA,iBAAK,GAAL,CAAS,IAAT,EAAe,MAAf;AACH;;AAED;;;;;;;;iCAKS,e,EAAiB,Y,EAAc;AACpC,gBAAI,uBAAa,SAAjB,EAA4B;AACxB,qBAAK,KAAL,CAAW,QAAX,CAAoB,CAApB,IAAyB,KAAK,EAAL,GAAU,IAAnC;AACH;AACJ;;AAED;;;;;;;yCAIiB;AACb,mBAAO,IAAI,MAAM,mBAAV,CAA+B,GAA/B,EAAoC,CAApC,CAAP;AACH;;AAED;;;;;;yCAGiB;AACb,mBAAO,IAAI,MAAM,iBAAV,CAA4B;AAC/B,uBAAc,gBAAM,IAAN,CAAW,KADM;AAE/B,0BAAc,gBAAM,IAAN,CAAW,QAFM;AAG/B,0BAAc,gBAAM,IAAN,CAAW,QAHM;AAI/B,sBAAc,MAAM,QAJW;AAK/B,2BAAc,EALiB;AAM/B,yBAAc,MAAM,WANW;AAO/B,6BAAa,CAPkB;AAQ/B,yBAAa;AARkB,aAA5B,CAAP;AAUH;;;;;;kBA7CgB,I;;;;;;;;;;;ACJrB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqB,Y;;;;;;;;;;;qCACJ,M,EAAQ;AACjB;;;;;AAKA,iBAAK,gBAAL,GAAwB,KAAK,EAAL,GAAQ,EAAhC;;AAEA;;;;;AAKA,iBAAK,WAAL,GAAmB,OAAO,OAAP,GAAiB,OAAO,OAAxB,GAAkC,CAArD;;AAEA;;;;;AAKA,iBAAK,eAAL,GAAuB,OAAO,WAAP,GAAqB,OAAO,WAA5B,GAA0C,CAAjE;;AAEA;;;;;AAKA,iBAAK,aAAL,GAAqB,GAArB;;AAEA;;;;;AAKA,iBAAK,KAAL,GAAa,EAAb;;AAEA;;;;;AAKA,iBAAK,aAAL,GAAqB,EAArB;;AAEA;;;;;AAKA,iBAAK,sBAAL,GAA8B,EAA9B;;AAEA;;;;AAIA,iBAAK,aAAL,GAAqB,EAArB;AACH;AACD;;;;;;;;iCAKS,K,EAAO,M,EAAQ,CAEvB;AADG;;;AAGJ;;;;;;;;iCAKS,K,EAAO,M,EAAQ;AACpB,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,KAAL,CAAW,MAA/B,EAAuC,GAAvC,EAA4C;AACxC,oBAAI,KAAK,KAAL,CAAW,CAAX,EAAc,UAAd,CAAyB,SAA7B,EAAwC;AACpC,yBAAK,KAAL,CAAW,CAAX,EAAc,MAAd,CAAqB,QAArB,CAA8B,KAA9B,CAAoC,MAApC,CACI,KAAK,KAAL,CAAW,CAAX,EAAc,UAAd,CAAyB,MAAzB,GAAgC,GADpC,EAEI,KAAK,KAAL,CAAW,CAAX,EAAc,UAAd,CAAyB,MAAzB,GAAgC,GAFpC,EAGI,KAAK,KAAL,CAAW,CAAX,EAAc,UAAd,CAAyB,MAAzB,GAAgC,GAHpC;AAIH;AACJ;AACJ;;AAED;;;;;;;uCAIe,Q,EAAU;AACrB,gBAAI,MAAM,IAAI,MAAM,oBAAV,CAAgC;AACtC,2BAAW,GAD2B;AAEtC,2BAAW,CAF2B;AAGtC,sBAAM,MAAM,SAH0B;AAItC,yBAAS,MAAM;AAJuB,aAAhC,CAAV;AAMA,iBAAK,UAAL,CAAgB,QAAhB,EAA0B,GAA1B;AACH;;;;;AAED;;;;;mCAKW,Q,EAAU,Q,EAAU;AAC3B,gBAAI,cAAc,eAAK,eAAL,CAAqB,KAAK,aAA1B,CAAlB;AACA,gBAAI,UAAU,CAAd;AACA,gBAAI,oBAAoB,CAAxB;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,WAAzB,EAAsC,GAAtC,EAA2C;AACvC,qBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,eAAK,cAAL,CAAoB,MAAxC,EAAgD,GAAhD,EAAqD;AACjD,wBAAI,OAAO,eAAK,eAAL,CAAqB,IAAI,WAAzB,CAAX;AACA,wCAAoB,KAAK,MAAL,CAAY,iBAAZ,EAA+B,KAAK,OAAL,CAAa,GAAb,MAAsB,CAAC,CAAtD,EAAyD,IAAzD,EAA+D,CAA/D,EAAkE,QAAlE,EAA4E,QAA5E,CAApB;AACA;AACH;AACJ;;AAED,mBAAO,iBAAP;AACH;;AAED;;;;;;oCAGY;AACR,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,KAAL,CAAW,MAA/B,EAAuC,GAAvC,EAA4C;AACxC,oBAAI,KAAK,KAAL,CAAW,CAAX,EAAc,SAAlB,EAA6B;AACzB,wBAAI,eAAe,KAAK,KAAL,CAAW,CAAX,EAAc,MAAd,CAAqB,QAArB,CAA8B,KAA9B,CAAoC,MAApC,EAAnB;AACA,oCAAM,WAAN,CAAkB,KAAK,KAAL,CAAW,CAAX,EAAc,UAAhC,EAA4C,gBAAM,QAAN,CAAe,YAAf,EAA6B,GAA7B,CAA5C,EAA+E,OAA/E;AACA,yBAAK,KAAL,CAAW,CAAX,EAAc,UAAd,CAAyB,SAAzB,GAAqC,IAArC;AACA,wBAAI,SAAS,gBAAM,WAAN,CAAkB,EAAlB,EAAsB,gBAAM,QAAN,CAAe,gBAAM,IAAN,CAAW,MAAX,CAAkB,KAAK,KAAL,CAAW,CAAX,EAAc,IAAhC,EAAsC,KAArD,EAA4D,GAA5D,CAAtB,EAAwF,OAAxF,CAAb;AACA,6BAAS,KAAT,CAAe,GAAf,CAAmB,KAAK,KAAL,CAAW,CAAX,EAAc,UAAjC,EACK,EADL,CACQ,MADR,EACgB,IADhB,EAEK,IAFL,CAEU,GAFV,EAEe;AAFf,qBAGK,IAHL,CAGW,YAAW;AAAE,6BAAK,SAAL,GAAiB,KAAjB;AAAyB,qBAHjD;AAIH;AACJ;AACJ;;AAED;;;;;;;2CAImB,Q,EAAU;AACzB,gBAAI,CAAJ;AACA,iBAAK,IAAI,CAAT,EAAY,IAAI,KAAK,aAAL,CAAmB,MAAnC,EAA2C,GAA3C,EAAgD;AAC5C,qBAAK,mBAAL,CAAyB,KAAK,aAAL,CAAmB,CAAnB,CAAzB,EAAgD,QAAhD,EAA0D,KAA1D;AACH;AACD,iBAAK,aAAL,GAAqB,eAAK,IAAL,CAAU,QAAV,CAArB;;AAEA,iBAAK,IAAI,CAAT,EAAY,IAAI,KAAK,aAAL,CAAmB,MAAnC,EAA2C,GAA3C,EAAgD;AAC5C,qBAAK,mBAAL,CAAyB,KAAK,aAAL,CAAmB,CAAnB,CAAzB,EAAgD,QAAhD,EAA0D,IAA1D,EAAgE,CAAhE;AACH;AACJ;;AAED;;;;;;;yCAIiB,C,EAAG;AAChB,gBAAI,MAAM,KAAK,wBAAL,CAA8B,EAAE,QAAhC,EAA0C,EAAE,MAA5C,CAAV;AACA,gBAAI,GAAJ,EAAS;AACL,oBAAI,EAAE,QAAF,KAAe,CAAnB,EAAsB;AAClB,2CAAa,OAAb,CAAqB,IAAI,QAAzB,EAAmC,IAAI,WAAvC,EAAoD,IAAE,CAAtD;AACA,wBAAI,eAAe,KAAK,aAAL,CAAmB,OAAnB,CAA2B,IAAI,WAA/B,CAAnB;AACA,yBAAK,aAAL,CAAmB,MAAnB,CAA0B,YAA1B,EAAwC,CAAxC;AACA,iCAAa,KAAK,gBAAlB;AACA,wBAAI,MAAJ,CAAW,QAAX,CAAoB,GAApB,CAAwB,IAAI,gBAAJ,CAAqB,CAA7C,EAAgD,IAAI,gBAAJ,CAAqB,CAArE,EAAwE,IAAI,gBAAJ,CAAqB,CAA7F;AACA,wBAAI,eAAJ,GAAsB,CAAtB;AACA,wBAAI,WAAJ,GAAkB,CAAC,CAAnB;AACA,wBAAI,IAAJ,GAAW,KAAX;AACH,iBATD,MASO;AACH,yBAAK,aAAL,GAAqB,KAAK,aAAL,CAAmB,IAAnB,EAArB;AACA,wBAAI,cAAc,KAAK,aAAL,CAAmB,KAAK,aAAL,CAAmB,MAAnB,GAA0B,CAA7C,IAAkD,CAApE;AACA,wBAAI,CAAC,WAAL,EAAkB;AACd,sCAAc,KAAK,sBAAnB;AACH;AACD,2CAAa,MAAb,CAAoB,uBAAa,KAAjC,EAAwC,IAAI,QAA5C,EAAsD,WAAtD;AACA,wBAAI,eAAJ,GAAsB,EAAE,QAAF,GAAa,KAAK,gBAAxC;AACA,wBAAI,MAAJ,CAAW,OAAX,CAAmB,IAAI,eAAvB;AACA,wBAAI,WAAJ,GAAkB,WAAlB;AACA,wBAAI,IAAJ,GAAW,IAAX;AACH;AACJ;AACJ;;AAED;;;;;;;;;4CAMoB,Q,EAAU,c,EAAgB,M,EAAQ;AAClD,gBAAI,UAAU,eAAK,eAAL,CAAqB,cAArB,CAAd;AACA,gBAAI,UAAU,gBAAM,UAAN,CAAiB,OAAjB,CAAd;;AAEA,gBAAI,OAAO,KAAK,yBAAL,CAA+B,QAA/B,CAAX;;AAEA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,MAAzB,EAAiC,GAAjC,EAAsC;AAClC,oBAAI,MAAJ,EAAY;AACR,wBAAI,GAAJ;AACA,wBAAK,YAAU,CAAV,IAAe,YAAU,CAAzB,IAA8B,YAAU,CAAxC,IAA6C,YAAU,CAA5D,EAA+D;AAC3D,8BAAM,gBAAM,IAAN,CAAW,iBAAX,CAA6B,KAAK,CAAL,EAAQ,IAArC,CAAN;AACA,6BAAK,CAAL,EAAQ,SAAR,GAAoB,mBAApB;AACH,qBAHD,MAGO;AACH,8BAAM,gBAAM,IAAN,CAAW,SAAX,CAAqB,KAAK,CAAL,EAAQ,IAA7B,CAAN;AACA,6BAAK,CAAL,EAAQ,SAAR,GAAoB,WAApB;AACH;;AAED,yBAAK,CAAL,EAAQ,MAAR,CAAe,QAAf,CAAwB,KAAxB,CAA8B,MAA9B,CAAqC,OAArC,EAVQ,CAUuC;AACjD;AACD,iBAZD,MAYO;AACH,yBAAK,CAAL,EAAQ,MAAR,CAAe,QAAf,CAAwB,KAAxB,CAA8B,MAA9B,CAAqC,gBAAM,IAAN,CAAW,MAAX,CAAkB,KAAK,CAAL,EAAQ,IAA1B,EAAgC,KAArE;AACD;AACC,yBAAK,CAAL,EAAQ,SAAR,GAAoB,KAApB;AACH;AACJ;AACJ;;AAED;;;;;;;uCAIe,Q,EAAU,Q,EAAU;AAC/B,gBAAI,UAAU,SAAS,KAAT,EAAd;AACA,gBAAI,MAAM,SAAS,KAAT,EAAV;AACA,gBAAI,KAAJ,CAAU,MAAV,CAAiB,gBAAM,IAAN,CAAW,MAAX,CAAkB,KAAlB,CAAwB,KAAzC;AACA,gBAAI,QAAJ,CAAa,MAAb,CAAoB,gBAAM,IAAN,CAAW,MAAX,CAAkB,KAAlB,CAAwB,QAA5C;AACA,oBAAQ,SAAR,CAAmB,CAAnB,EAAsB,CAAC,EAAvB,EAA2B,CAA3B;AACA,gBAAI,MAAM,IAAI,MAAM,IAAV,CAAgB,OAAhB,EAAyB,GAAzB,CAAV;AACA,mBAAO,GAAP;AACH;;AAED;;;;;;;uCAIe,Q,EAAU,Q,EAAU;AAC/B,gBAAI,UAAU,SAAS,KAAT,EAAd;AACA,gBAAI,MAAM,SAAS,KAAT,EAAV;AACA,gBAAI,KAAJ,CAAU,MAAV,CAAiB,gBAAM,IAAN,CAAW,MAAX,CAAkB,KAAlB,CAAwB,KAAzC;AACA,gBAAI,QAAJ,CAAa,MAAb,CAAoB,gBAAM,IAAN,CAAW,MAAX,CAAkB,KAAlB,CAAwB,QAA5C;AACA,oBAAQ,SAAR,CAAmB,CAAnB,EAAsB,CAAC,EAAvB,EAA2B,CAA3B;AACA,oBAAQ,KAAR,CAAc,CAAd,EAAiB,EAAjB,EAAqB,CAArB;AACA,gBAAI,MAAM,IAAI,MAAM,IAAV,CAAgB,OAAhB,EAAyB,GAAzB,CAAV;AACA,mBAAO,GAAP;AACH;;AAED;;;;;;;;;;;;;+BAUO,iB,EAAmB,K,EAAO,Q,EAAU,M,EAAQ,Q,EAAU,Q,EAAU;AACnE,gBAAI,GAAJ,EAAS,KAAT,EAAgB,QAAhB;AACA,gBAAI,KAAJ,EAAW;AACP,wBAAQ,OAAR;AACA,sBAAM,KAAK,cAAL,CAAoB,QAApB,EAA8B,QAA9B,CAAN;AACH,aAHD,MAGO;AACH,wBAAQ,OAAR;AACA,sBAAM,KAAK,cAAL,CAAoB,QAApB,EAA8B,QAA9B,CAAN;AACH;AACD,gCAAoB,KAAK,iBAAL,CAAuB,GAAvB,EAA4B,iBAA5B,EAA+C,KAA/C,CAApB;AACA,iBAAK,KAAL,CAAW,IAAX,CAAgB;AACZ,sBAAM,KADM;AAEZ,wBAAQ,GAFI;AAGZ,wBAAQ,SAAS,KAAK,eAHV;AAIZ,4BAAY,EAJA;AAKZ,0BAAU,QALE;AAMZ,kCAAkB;AACd,uBAAG,IAAI,QAAJ,CAAa,CADF;AAEd,uBAAG,IAAI,QAAJ,CAAa,CAFF;AAGd,uBAAG,IAAI,QAAJ,CAAa,CAHF;AANN,aAAhB;AAWA,iBAAK,GAAL,CAAS,GAAT,EAAa,SAAS,QAAtB;AACA,mBAAO,iBAAP;AACH;;AAED;;;;;;;;;0CAMkB,O,EAAS,iB,EAAmB,Q,EAAU,CAAE;;AAE1D;;;;;;;;kDAK0B,Q,EAAU;AAChC,gBAAI,OAAO,EAAX;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,KAAL,CAAW,MAA/B,EAAuC,GAAvC,EAA4C;AACxC,oBAAI,KAAK,KAAL,CAAW,CAAX,EAAc,QAAd,KAA2B,QAA/B,EAAyC;AACrC,yBAAK,IAAL,CAAU,KAAK,KAAL,CAAW,CAAX,CAAV;AACH;AACJ;AACD,mBAAO,IAAP;AACH;;AAED;;;;;;;;iDAKyB,Q,EAAU,M,EAAQ;AACvC,gBAAI,iBAAiB,eAAK,eAAL,CAAqB,KAAK,aAA1B,CAArB;AACA,gBAAI,OAAO,SAAS,eAAK,cAAL,CAAoB,MAA7B,GAAsC,eAAK,cAAL,CAAoB,OAApB,CAA4B,QAA5B,CAAtC,GAA8E,cAAzF;AACA,mBAAO,KAAK,KAAL,CAAW,IAAX,CAAP;AACH;;AAED;;;;;;;mCAIW,I,EAAM;AACb,gBAAI,WAAW,eAAK,cAAL,CAAoB,KAAK,IAAzB,CAAf;AACA,gBAAI,MAAM,KAAK,yBAAL,CAA+B,QAA/B,CAAV;AACA,iBAAK,gBAAL,CAAsB,IAAI,CAAJ,CAAtB,EAA8B,KAAK,QAAL,GAAgB,GAA9C;AACH;;;;;;kBAhUgB,Y;;;;;;;;;;;;;ACPrB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqB,gB;;;;;;;;;;;;AACjB;;;;;;;0CAOkB,O,EAAS,iB,EAAmB,Q,EAAU;AACpD,gBAAI,SAAS,CAAb;AACA,gBAAI,cAAc,CAAlB;AACA,gBAAI,QAAJ,EAAc;AACV,yBAAU,KAAK,EAAL,GAAU,CAAX,GAAgB,EAAzB;AACH,aAFD,MAEO;AACH,8BAAe,KAAK,EAAL,GAAU,CAAX,GAAgB,EAA9B;AACH;AACD,oBAAQ,QAAR,CAAiB,CAAjB,GAAqB,oBAAoB,MAApB,GAA6B,WAAlD;;AAEA,mBAAO,oBAAoB,MAA3B;AACH;;AAED;;;;;;;;mCAKW,Q,EAAU,Q,EAAU;AAC3B,2IAAiB,QAAjB,EAA2B,QAA3B;AACA,iBAAK,KAAL,CAAW,QAAX,CAAoB,CAApB,GAAwB,CAAC,GAAzB;AACA,iBAAK,KAAL,CAAW,KAAX,CAAiB,GAAjB,CAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B;AACH;;;;;;kBA9BgB,gB;;;;;;;;;;;;;ACPrB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqB,mB;;;;;;;;;;;qCACJ,M,EAAQ;AACjB,mJAAmB,MAAnB;;AAEA;;;;;AAKA,iBAAK,gBAAL,GAAwB,KAAK,EAAL,GAAQ,EAAhC;AACH;;AAED;;;;;;;;;;0CAOkB,O,EAAS,iB,EAAmB,Q,EAAU;AACpD,gBAAI,YAAY,CAAhB;AACA,gBAAI,CAAC,QAAL,EAAe;AACX,wBAAQ,QAAR,CAAiB,CAAjB,GAAqB,CAArB;AACA,wBAAQ,QAAR,CAAiB,CAAjB,GAAqB,CAArB;AACA,wBAAQ,QAAR,CAAiB,CAAjB,GAAqB,oBAAmB,CAAxC;AACA,4BAAY,CAAZ;AACH,aALD,MAKO;AACH,wBAAQ,QAAR,CAAiB,CAAjB,GAAqB,oBAAmB,CAAxC;AACH;AACD,oBAAQ,QAAR,CAAiB,CAAjB,GAAqB,CAArB;AACA,mBAAO,oBAAoB,SAA3B;AACH;;AAED;;;;;;;;mCAKW,Q,EAAU,Q,EAAU;AAC3B,gBAAI,6JAAyC,QAAzC,EAAmD,QAAnD,CAAJ;AACA,iBAAK,KAAL,CAAW,QAAX,CAAoB,CAApB,GAAwB,CAAC,qBAAD,GAAuB,CAAvB,GAA2B,EAAnD;AACA,iBAAK,KAAL,CAAW,QAAX,CAAoB,CAApB,GAAwB,CAAC,GAAzB;AACA,iBAAK,KAAL,CAAW,QAAX,CAAoB,CAApB,GAAwB,CAAC,GAAzB;AACA,iBAAK,KAAL,CAAW,QAAX,CAAoB,CAApB,GAAwB,CAAC,KAAK,EAAN,GAAS,CAAjC;AACA,iBAAK,KAAL,CAAW,KAAX,CAAiB,GAAjB,CAAqB,EAArB,EAAyB,EAAzB,EAA6B,EAA7B;AACH;;;;;;kBA7CgB,mB;;;;;;;;;;;ACPrB;;;;AACA;;;;;;;;;;;;IAEqB,Q;;;;;;;;;;;;AACjB;;;;;iCAKS,K,EAAO,M,EAAQ;AACpB,gBAAI,QAAQ,IAAI,MAAM,eAAV,CAA2B,gBAAM,QAAN,CAAe,UAAf,CAA0B,GAArD,EAA0D,gBAAM,QAAN,CAAe,UAAf,CAA0B,MAApF,EAA4F,CAA5F,CAAZ;AACA,gBAAI,YAAY,IAAI,MAAM,SAAV,CAAqB,gBAAM,QAAN,CAAe,SAApC,CAAhB;AACA,sBAAU,QAAV,CAAmB,GAAnB,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B,GAA9B;AACA,sBAAU,QAAV,CAAmB,CAAnB,GAAuB,KAAK,EAAL,GAAU,CAAjC;;AAEA,sBAAU,MAAV,CAAiB,OAAjB,CAAyB,KAAzB,GAAiC,IAAjC;AACA,sBAAU,MAAV,CAAiB,OAAjB,CAAyB,MAAzB,GAAkC,IAAlC;;AAEA,sBAAU,MAAV,CAAiB,MAAjB,CAAwB,IAAxB,GAA+B,GAA/B;AACA,sBAAU,MAAV,CAAiB,MAAjB,CAAwB,GAAxB,GAA8B,GAA9B;AACA,sBAAU,MAAV,CAAiB,MAAjB,CAAwB,GAAxB,GAA8B,EAA9B;;AAEA,iBAAK,GAAL,CAAS,SAAT;AACA,iBAAK,GAAL,CAAS,KAAT;AACH;;;;;;kBArBgB,Q;;;;;;;;;;;ACHrB;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqB,S;;;;;;;;;;;uCACF;AACX;;;;;AAKA,iBAAK,QAAL,GAAgB,EAAhB;;AAEA;;;;;AAKA;;AAEA;;;;;AAKA,iBAAK,aAAL,GAAqB;AACjB,sBAAM,EAAE,WAAW,KAAb,EAAoB,OAAO,EAA3B;AADW,aAArB;;AAIA,iBAAK,WAAL;AACH;;AAED;;;;;;;oCAIY,G,EAAK;AACb,gBAAI,GAAJ,EAAS;AACL,qBAAK,SAAL,GAAiB,gBAAM,QAAN,CAAe,GAAf,EAAoB,GAApB,CAAjB;AACH,aAFD,MAEO;AACH,qBAAK,SAAL,GAAiB,gBAAM,QAAN,CAAe,gBAAM,SAAN,CAAgB,MAAhB,CAAuB,QAAtC,EAAgD,GAAhD,CAAjB;AACH;AACJ;;;iCAEQ,e,EAAiB,Y,EAAc;AACpC;AACA;AACA,iBAAK,SAAL,CAAe,IAAf,EAAqB,KAAK,EAAL,GAAQ,GAA7B,EAAkC,KAAK,EAAL,GAAQ,CAA1C,EAA6C,IAA7C;AACA,iBAAK,SAAL,CAAe,MAAf,EAAuB,KAAK,EAAL,GAAQ,EAA/B,EAAmC,CAAnC,EAAsC,IAAtC;AACA,iBAAK,OAAL;AACH;;AAED;;;;;;;;iCAKS,e,EAAiB,Y,EAAc;AACpC,iBAAK,cAAL;AACA,iBAAK,WAAL;AACH;;AAED;;;;;;sCAGc;AACV,gBAAI,KAAK,aAAL,CAAmB,IAAnB,CAAwB,SAA5B,EAAuC;AACnC,qBAAK,IAAL,CAAU,QAAV,CAAmB,CAAnB,GAAuB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAxB,CAA8B,SAArD;AACA,qBAAK,IAAL,CAAU,QAAV,CAAmB,SAAnB,GAA+B,KAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAxB,CAA8B,SAA7D;AACA,qBAAK,IAAL,CAAU,QAAV,CAAmB,KAAnB,CAAyB,MAAzB,CACI,KAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAxB,CAA8B,CAA9B,GAAgC,GADpC,EAEI,KAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAxB,CAA8B,CAA9B,GAAgC,GAFpC,EAGI,KAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAxB,CAA8B,CAA9B,GAAgC,GAHpC;AAIH;AACJ;;AAED;;;;;;yCAGiB;AACb,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,QAAL,CAAc,MAAlC,EAA0C,GAA1C,EAA+C;AAC3C,oBAAI,SAAS,KAAK,QAAL,CAAc,CAAd,CAAb;;AAEA,oBAAI,OAAO,aAAX,EAA0B;AACtB,2BAAO,IAAP,CAAY,QAAZ,CAAqB,KAArB,CAA2B,MAA3B,CACI,OAAO,SAAP,CAAiB,CAAjB,GAAmB,GADvB,EAEI,OAAO,SAAP,CAAiB,CAAjB,GAAmB,GAFvB,EAGI,OAAO,SAAP,CAAiB,CAAjB,GAAmB,GAHvB;AAIH;;AAED,oBAAI,cAAc,OAAO,KAAP,CAAa,QAAb,CAAsB,OAAO,YAA7B,IAA6C,OAAO,SAAP,GAAmB,OAAO,IAAzF;;AAEA,oBAAI,KAAK,GAAL,CAAS,WAAT,IAAwB,KAAK,EAAL,GAAU,KAAK,EAAL,GAAQ,EAA9C,EAAkD;AAC9C,2BAAO,SAAP,IAAoB,CAAC,CAArB;AACA,kCAAc,KAAK,GAAL,CAAS,WAAT,IAAsB,WAAtB,IAAqC,KAAK,EAAL,GAAU,KAAK,EAAL,GAAQ,EAAvD,CAAd;AACA,yBAAK,WAAL,CAAiB,MAAjB;AACH;AACD,uBAAO,KAAP,CAAa,QAAb,CAAsB,OAAO,YAA7B,IAA6C,WAA7C;AACH;AACJ;;AAED;;;;;;;oCAIY,M,EAAQ;AAAA;;AAChB,mCAAa,MAAb,CAAoB,uBAAa,SAAjC,EAA4C,OAAO,IAAnD,EAAyD,EAAzD,EAA6D,IAAE,CAA/D;AACD;AACC,mBAAO,aAAP,GAAuB,IAAvB;AACA,gBAAI,aAAa,gBAAM,QAAN,CAAe,gBAAM,SAAN,CAAgB,MAAhB,CAAuB,KAAtC,EAA6C,GAA7C,CAAjB;AACA,gBAAI,WAAW,KAAK,SAApB;AACA,mBAAO,SAAP,CAAiB,CAAjB,GAAqB,WAAW,CAAhC;AACA,mBAAO,SAAP,CAAiB,CAAjB,GAAqB,WAAW,CAAhC;AACA,mBAAO,SAAP,CAAiB,CAAjB,GAAqB,WAAW,CAAhC;AACA,qBAAS,KAAT,CAAe,GAAf,CAAmB,OAAO,SAA1B,EACK,EADL,CACQ,EAAE,GAAG,SAAS,CAAd,EAAiB,GAAG,SAAS,CAA7B,EAAgC,GAAG,SAAS,CAA5C,EADR,EACyD,GADzD,EAEK,EAFL,CAEQ,EAAE,GAAG,WAAW,CAAhB,EAAmB,GAAG,WAAW,CAAjC,EAAoC,GAAG,WAAW,CAAlD,EAFR,EAE+D,GAF/D,EAGK,IAHL,CAGU,GAHV,EAGe;AAHf,aAIK,IAJL,CAIW,UAAU,KAAV,EAAiB;AAAE,sBAAM,aAAN,GAAsB,KAAtB;AAA8B,aAJ5D;;AAMA,gBAAI,aAAa,gBAAM,QAAN,CAAe,gBAAM,SAAN,CAAgB,IAAhB,CAAqB,KAApC,EAA2C,GAA3C,CAAjB;AACA,gBAAI,WAAW,KAAK,SAApB;AACA,iBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAxB,CAA8B,CAA9B,GAAkC,WAAW,CAA7C;AACA,iBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAxB,CAA8B,CAA9B,GAAkC,WAAW,CAA7C;AACA,iBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAxB,CAA8B,CAA9B,GAAkC,WAAW,CAA7C;AACA,iBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAxB,CAA8B,SAA9B,GAA0C,CAAC,GAA3C;AACA,iBAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAxB,CAA8B,SAA9B,GAA0C,CAA1C;AACA,iBAAK,aAAL,CAAmB,IAAnB,CAAwB,SAAxB,GAAoC,IAApC;AACA,iBAAK,aAAL,CAAmB,IAAnB,CAAwB,YAAxB,GAAuC,SAAS,KAAT,CAAe,GAAf,CAAmB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,KAA3C,EAClC,EADkC,CAC/B;AACA,mBAAG,SAAS,CADZ,EACe,GAAG,SAAS,CAD3B,EAC8B,GAAG,SAAS,CAD1C;AAEA,2BAAW,GAFX;AAGA,2BAAW,CAAC,GAAD,GAAO,OAAO,SAAP,GAAmB,EAHrC,EAD+B,EAIY,GAJZ,EAKlC,EALkC,CAK/B;AACA,mBAAG,WAAW,CADd,EACiB,GAAG,WAAW,CAD/B,EACkC,GAAG,WAAW,CADhD;AAEA,2BAAW,CAFX;AAGA,2BAAW,CAAC,GAHZ,EAL+B,EAQZ,GARY,EASlC,IATkC,CAS7B,GAT6B,EASxB;AATwB,aAUlC,IAVkC,CAU5B,YAAM;AAAE,uBAAK,aAAL,CAAmB,IAAnB,CAAwB,SAAxB,GAAoC,KAApC;AAA4C,aAVxB,CAAvC;AAWH;;AAED;;;;;;kCAGU;AACN,gBAAI,WAAW,IAAI,MAAM,cAAV,CAA0B,EAA1B,EAA8B,EAA9B,CAAf;AACA,qBAAS,KAAT,CAAe,CAAf,EAAiB,CAAjB,EAAoB,IAApB;AACA,gBAAI,YAAY,IAAI,MAAM,aAAV,GAA0B,IAA1B,CAA+B,gBAAM,SAAN,CAAgB,IAAhB,CAAqB,OAApD,CAAhB;AACA,sBAAU,UAAV,GAAuB,CAAvB;AACA,sBAAU,MAAV,CAAiB,GAAjB,CAAqB,CAArB,EAAwB,CAAxB;AACA,sBAAU,KAAV,GAAkB,UAAU,KAAV,GAAkB,MAAM,mBAA1C;AACA,sBAAU,MAAV,GAAmB,MAAM,SAAzB;;AAEA,gBAAI,WAAW,IAAI,MAAM,iBAAV,CAA6B;AACxC,uBAAO,gBAAM,SAAN,CAAgB,IAAhB,CAAqB,KADY;AAExC,0BAAU,gBAAM,SAAN,CAAgB,IAAhB,CAAqB,QAFS;AAGxC,0BAAU,gBAAM,SAAN,CAAgB,IAAhB,CAAqB,QAHS;AAIxC,yBAAS,SAJ+B;AAKxC,2BAAW;AAL6B,aAA7B,CAAf;;AAQA,iBAAK,IAAL,GAAY,IAAI,MAAM,IAAV,CAAgB,QAAhB,EAA0B,QAA1B,CAAZ;AACA,iBAAK,IAAL,CAAU,QAAV,CAAmB,CAAnB,GAAuB,CAAC,GAAxB;AACA,iBAAK,GAAL,CAAS,KAAK,IAAd,EAAoB,MAApB;AACH;;AAED;;;;;;;;;kCAMU,M,EAAQ,I,EAAM,M,EAAQ,I,EAAM;AAClC,gBAAI,aAAa,IAAI,MAAM,cAAV,CAAyB,CAAzB,CAAjB;AACA,gBAAI,cAAc,IAAI,MAAM,QAAV,EAAlB;;AAEA,gBAAI,cAAc,IAAI,MAAM,iBAAV,GAA8B,IAA9B,CAAmC,gBAAM,SAAN,CAAgB,MAAhB,CAAuB,cAA1D,CAAlB;AACA,wBAAY,OAAZ,GAAsB,MAAM,qBAA5B;;AAEA,gBAAI,gBAAgB,IAAI,MAAM,iBAAV,CAA6B;AAC7C,wBAAQ,WADqC,EAA7B,CAApB;;AAGA,gBAAI,gBAAgB,IAAI,MAAM,iBAAV,CAA6B;AAC7C,uBAAO,gBAAM,SAAN,CAAgB,MAAhB,CAAuB,KADe;AAE7C,6BAAa,IAFgC;AAG7C,2BAAW,IAHkC;AAI7C,yBAAS,GAJoC,EAA7B,CAApB;;AAOA,gBAAI,SAAS,IAAI,MAAM,IAAV,CAAgB,UAAhB,EAA4B,aAA5B,CAAb;AACA,mBAAO,IAAP,GAAc,MAAd;AACA,wBAAY,GAAZ,CAAgB,MAAhB;AACA,wBAAY,QAAZ,CAAqB,CAArB,GAAyB,CAAC,GAA1B;;AAEA,gBAAI,OAAO,IAAI,MAAM,IAAV,CAAgB,WAAW,KAAX,EAAhB,EAAoC,aAApC,CAAX;AACA,iBAAK,IAAL,GAAY,MAAZ;AACA,iBAAK,KAAL,CAAW,cAAX,CAA0B,GAA1B;AACA,wBAAY,GAAZ,CAAgB,IAAhB;;AAEA,gBAAI,YAAJ;AACA,oBAAQ,MAAR;AACI,qBAAK,OAAL;AACI,yBAAK,QAAL,CAAc,CAAd,GAAkB,CAAC,GAAnB;AACA,gCAAY,QAAZ,CAAqB,CAArB,GAAyB,CAAC,GAA1B;AACA,2BAAO,QAAP,CAAgB,CAAhB,GAAoB,CAAC,GAArB;AACA,mCAAe,GAAf;AACA;;AAEJ,qBAAK,MAAL;AACI,yBAAK,QAAL,CAAc,CAAd,GAAkB,GAAlB;AACA,gCAAY,QAAZ,CAAqB,CAArB,GAAyB,GAAzB;AACA,2BAAO,QAAP,CAAgB,CAAhB,GAAoB,GAApB;AACA,mCAAe,GAAf;AACA;;AAEJ,qBAAK,MAAL;AACI,yBAAK,QAAL,CAAc,CAAd,GAAkB,GAAlB;AACA,gCAAY,QAAZ,CAAqB,CAArB,GAAyB,GAAzB;AACA,2BAAO,QAAP,CAAgB,CAAhB,GAAoB,GAApB;AACA,mCAAe,GAAf;AACA;;AAEJ,qBAAK,IAAL;AACI,yBAAK,QAAL,CAAc,CAAd,GAAkB,CAAC,GAAnB;AACA,gCAAY,QAAZ,CAAqB,CAArB,GAAyB,CAAC,GAA1B;AACA,2BAAO,QAAP,CAAgB,CAAhB,GAAoB,CAAC,GAArB;AACA,mCAAe,GAAf;AACA;AA3BR;;AA8BA,wBAAY,QAAZ,CAAqB,YAArB,KAAsC,MAAtC;;AAEA,iBAAK,QAAL,CAAc,IAAd,CAAoB;AAChB,+BAAe,KADC;AAEhB,sBAAM,IAFU;AAGhB,2BAAW,EAHK;AAIhB,wBAAQ,MAJQ;AAKhB,uBAAO,WALS;AAMhB,2BAAW,CANK;AAOhB,sBAAM,IAPU;AAQhB,8BAAc,YARE;AAShB,sBAAM,IATU,EAApB;;AAYA,iBAAK,GAAL,CAAS,WAAT,EAAsB,QAAtB;AACH;;;;;;kBAjPgB,S;;;;;;;;;;;ACNrB;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqB,a;;;;;;;;;;;;AACjB;;;;;iCAKS,K,EAAO,M,EAAQ;AACpB,iBAAK,gBAAL,GAAwB;AACpB,4BAAY,IADQ;AAEpB,kCAAkB,IAFE;AAGpB,kCAAkB,IAHE;AAIpB,kCAAkB,IAJE;AAKpB,kCAAkB,IALE;AAMpB,0BAAU;AANU,aAAxB;;AASA,iBAAK,MAAL;;AAEA;AACA,iBAAK,KAAL,GAAa,EAAb;;AAEA,gBAAI,QAAQ,KAAK,KAAL,GAAa,KAAK,KAA9B;;AAEA,iBAAK,MAAL,GAAc,CAAd;AACA,iBAAK,MAAL,GAAc,CAAd;AACA,iBAAK,MAAL,GAAc,IAAd;AACA,iBAAK,WAAL,GAAmB,KAAK,MAAL,GAAc,CAAjC;;AAEA,iBAAK,QAAL,GAAgB,KAAhB;AACA,iBAAK,eAAL,GAAuB,EAAE,KAAK,CAAC,KAAR,EAAe,KAAK,MAApB,EAAvB;AACA,iBAAK,mBAAL,CAAyB,MAAM,QAA/B;;AAEA;;;AAGA,iBAAK,SAAL;AACH;;;4CAEoB,K,EAAQ;AACzB,iBAAK,MAAL,GAAc,MAAM,OAAN,GAAgB,GAA9B,CADyB,CACS;AAClC,iBAAK,MAAL,GAAc,MAAM,OAAN,GAAgB,GAA9B,CAFyB,CAES;AACrC;;;6CAEqB,K,EAAQ;AAC1B,gBAAK,MAAM,OAAN,CAAc,MAAd,KAAyB,CAA9B,EAAkC;;AAE9B,sBAAM,cAAN;;AAEA,qBAAK,MAAL,GAAc,MAAM,OAAN,CAAe,CAAf,EAAmB,KAAnB,GAA2B,GAAzC,CAJ8B,CAIe;AAC7C,qBAAK,MAAL,GAAc,MAAM,OAAN,CAAe,CAAf,EAAmB,KAAnB,GAA2B,GAAzC,CAL8B,CAKe;AAEhD;AACJ;;;4CAEoB,K,EAAQ;;AAEzB,gBAAK,MAAM,OAAN,CAAc,MAAd,KAAyB,CAA9B,EAAkC;;AAE9B,sBAAM,cAAN;;AAEA,qBAAK,MAAL,GAAc,MAAM,OAAN,CAAe,CAAf,EAAmB,KAAnB,GAA2B,GAAzC,CAJ8B,CAIe;AAC7C,qBAAK,MAAL,GAAc,MAAM,OAAN,CAAe,CAAf,EAAmB,KAAnB,GAA2B,GAAzC,CAL8B,CAKe;AAEhD;AACJ;;AAED;;;;;;;iCAIS,G,EAAK;AACV,gBAAI,KAAJ;AACA,gBAAI,GAAJ,EAAS;AACL,wBAAQ,gBAAM,QAAN,CAAe,GAAf,EAAoB,CAApB,CAAR;AACA,qBAAK,QAAL,GAAgB,IAAhB;AACH,aAHD,MAGO;AACH,wBAAQ,gBAAM,QAAN,CAAe,gBAAM,iBAAN,CAAwB,KAAvC,EAA8C,CAA9C,CAAR;AACA,qBAAK,QAAL,GAAgB,KAAhB;AACH;;AAED,gBAAI,CAAC,KAAK,MAAV,EAAmB;AACf,qBAAK,MAAL,GAAc,KAAd;AACA,qBAAK,IAAL,CAAU,QAAV,CAAmB,QAAnB,CAA4B,KAA5B,CAAkC,KAAlC,GAA0C,CAAE,KAAK,MAAL,CAAY,CAAd,EAAiB,KAAK,MAAL,CAAY,CAA7B,EAAgC,KAAK,MAAL,CAAY,CAA5C,CAA1C;AACH,aAHD,MAGO;AACH,qBAAK,MAAL,CAAY,SAAZ,GAAwB,IAAxB;AACA,yBAAS,KAAT,CAAe,GAAf,CAAmB,KAAK,MAAxB,EACK,EADL,CACQ,KADR,EACe,IADf,EAEK,IAFL,CAEU,GAFV,EAEe;AAFf,iBAGK,IAHL,CAGW,YAAW;AAAE,yBAAK,SAAL,GAAiB,KAAjB;AAAyB,iBAHjD;AAIH;AACJ;;;iCAEQ,I,EAAM;;AAEX,gBAAI,KAAK,QAAL,IAAiB,KAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAvC,CAA6C,KAA7C,GAAqD,KAAK,eAAL,CAAqB,GAA/F,EAAoG;AAChG,qBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAvC,CAA6C,KAA7C,IAAsD,GAAtD;AACH;;AAED,gBAAI,CAAC,KAAK,QAAN,IAAkB,KAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAvC,CAA6C,KAA7C,GAAqD,KAAK,eAAL,CAAqB,GAAhG,EAAqG;AACjG,qBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAvC,CAA6C,KAA7C,IAAsD,GAAtD;AACH;;AAED,gBAAI,QAAQ,KAAK,KAAL,GAAa,IAAzB;AACA,gBAAI,QAAQ,CAAZ,EAAe,QAAQ,CAAR;AACf,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,IAAvC,CAA4C,KAA5C,GAAoD,KAAK,GAAzD;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAvC,CAA6C,KAA7C,GAAqD,KAArD;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,IAAvC,CAA4C,KAA5C,GAAoD,KAAK,GAAzD;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAvC,CAA6C,KAA7C,GAAqD,KAArD;AACA,iBAAK,gBAAL,CAAsB,QAAtB,CAA+B,IAA/B,CAAoC,KAApC,GAA4C,KAAK,GAAjD;AACA,iBAAK,gBAAL,CAAsB,QAAtB,CAA+B,KAA/B,CAAqC,KAArC,GAA6C,KAA7C;AACA;;AAEA;AACA,iBAAK,gBAAL,CAAsB,UAAtB,CAAiC,OAAjC;;AAEA,iBAAK,gBAAL,CAAsB,QAAtB,CAA+B,eAA/B,CAA+C,KAA/C,GAAuD,KAAK,gBAAL,CAAsB,UAAtB,CAAiC,sBAAjC,CAAyD,KAAK,gBAAL,CAAsB,gBAA/E,EAAkG,OAAzJ;AACA,iBAAK,gBAAL,CAAsB,QAAtB,CAA+B,eAA/B,CAA+C,KAA/C,GAAuD,KAAK,gBAAL,CAAsB,UAAtB,CAAiC,sBAAjC,CAAyD,KAAK,gBAAL,CAAsB,gBAA/E,EAAkG,OAAzJ;;AAEA,gBAAI,KAAK,MAAL,CAAY,SAAhB,EAA2B;AACvB,qBAAK,IAAL,CAAU,QAAV,CAAmB,QAAnB,CAA4B,KAA5B,CAAkC,KAAlC,GAA0C,CAAE,KAAK,MAAL,CAAY,CAAd,EAAiB,KAAK,MAAL,CAAY,CAA7B,EAAgC,KAAK,MAAL,CAAY,CAA5C,CAA1C;AACH;AACJ;;;4CAEmB,Q,EAAU;AAC1B,iBAAK,gBAAL,CAAsB,UAAtB,GAAmC,IAAI,sBAAJ,CAA4B,KAAK,KAAjC,EAAwC,KAAK,KAA7C,EAAoD,QAApD,CAAnC;AACA,gBAAI,aAAa,KAAK,gBAAL,CAAsB,UAAtB,CAAiC,aAAjC,EAAjB;AACA,gBAAI,aAAa,KAAK,gBAAL,CAAsB,UAAtB,CAAiC,aAAjC,EAAjB;AACA,iBAAK,mBAAL,CAA0B,UAA1B;AACA,iBAAK,mBAAL,CAA0B,UAA1B;;AAEA,iBAAK,gBAAL,CAAsB,gBAAtB,GAAyC,KAAK,gBAAL,CAAsB,UAAtB,CAAiC,WAAjC,CAA8C,iBAA9C,EAAiE,kBAAQ,aAAR,CAAsB,QAAvF,EAAiG,UAAjG,CAAzC;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,GAAyC,KAAK,gBAAL,CAAsB,UAAtB,CAAiC,WAAjC,CAA8C,iBAA9C,EAAiE,kBAAQ,aAAR,CAAsB,QAAvF,EAAiG,UAAjG,CAAzC;;AAEA,iBAAK,gBAAL,CAAsB,UAAtB,CAAiC,uBAAjC,CAA0D,KAAK,gBAAL,CAAsB,gBAAhF,EAAkG,CAAE,KAAK,gBAAL,CAAsB,gBAAxB,EAA0C,KAAK,gBAAL,CAAsB,gBAAhE,CAAlG;AACA,iBAAK,gBAAL,CAAsB,UAAtB,CAAiC,uBAAjC,CAA0D,KAAK,gBAAL,CAAsB,gBAAhF,EAAkG,CAAE,KAAK,gBAAL,CAAsB,gBAAxB,EAA0C,KAAK,gBAAL,CAAsB,gBAAhE,CAAlG;;AAEA,iBAAK,gBAAL,CAAsB,gBAAtB,GAAyC,KAAK,gBAAL,CAAsB,gBAAtB,CAAuC,QAAvC,CAAgD,QAAzF;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,GAAyC,KAAK,gBAAL,CAAsB,gBAAtB,CAAuC,QAAvC,CAAgD,QAAzF;;AAEA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,IAAvC,GAA8C,EAAE,OAAO,GAAT,EAA9C;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAvC,GAA+C,EAAE,OAAO,GAAT,EAA/C;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAvC,GAA+C,EAAE,OAAO,CAAC,KAAV,EAA/C;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,IAAvC,GAA8C,EAAE,OAAO,GAAT,EAA9C;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAvC,GAA+C,EAAE,OAAO,GAAT,EAA/C;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,OAAvC,GAAiD,EAAE,OAAO,GAAT,EAAjD;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,kBAAvC,GAA4D,EAAE,OAAO,GAAT,EAA5D;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,iBAAvC,GAA2D,EAAE,OAAO,GAAT,EAA3D;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,gBAAvC,GAA0D,EAAE,OAAO,GAAT,EAA1D;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,aAAvC,GAAuD,EAAE,OAAO,GAAT,EAAvD;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,QAAvC,GAAkD,EAAE,OAAO,IAAI,MAAM,OAAV,EAAT,EAAlD;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,QAAvC,CAAgD,OAAhD,CAAwD,MAAxD,GAAiE,KAAK,MAAL,CAAY,OAAZ,CAAqB,CAArB,CAAjE;;AAEA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAvC,GAA+C,MAAM,cAArD;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAvC,GAA+C,MAAM,cAArD;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAvC,GAA+C,MAAM,cAArD;AACA,iBAAK,gBAAL,CAAsB,gBAAtB,CAAuC,KAAvC,GAA+C,MAAM,cAArD;;AAEA,gBAAI,QAAQ,KAAK,gBAAL,CAAsB,UAAtB,CAAiC,IAAjC,EAAZ;AACA,gBAAK,UAAU,IAAf,EAAsB;AAClB,wBAAQ,KAAR,CAAe,KAAf;AACH;AACJ;;;oCAEW;AACR,gBAAI,WAAW,IAAI,MAAM,qBAAV,CAAgC,KAAK,KAArC,CAAf;;AAEA;AACA,iBAAK,gBAAL,CAAsB,QAAtB,GAAiC;AAC7B,uBAAO,EAAE,OAAO,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,CAAT,EADsB;AAE7B,iCAAiB,EAAE,OAAO,IAAT,EAFY;AAG7B,iCAAiB,EAAE,OAAO,IAAT,EAHY;AAI7B,sBAAM,EAAE,OAAO,GAAT,EAJuB;AAK7B,uBAAO,EAAE,OAAO,GAAT;AALsB,aAAjC;;AAQA;AACA,gBAAI,WAAW,IAAI,MAAM,cAAV,CAA0B;AACrC,0BAAgB,KAAK,gBAAL,CAAsB,QADD;AAErC,8BAAgB,kBAAQ,KAAR,CAAc,MAFO;AAGrC,gCAAgB,kBAAQ,KAAR,CAAc;AAHO,aAA1B,CAAf;;AAQA,iBAAK,IAAL,GAAY,IAAI,MAAM,IAAV,CAAgB,QAAhB,EAA0B,QAA1B,CAAZ;AACA,iBAAK,IAAL,CAAU,QAAV,CAAmB,CAAnB,GAAuB,KAAK,EAAL,GAAU,CAAjC;AACA;AACA;AACA;;;AAGA,iBAAK,IAAL,CAAU,gBAAV,GAA6B,IAA7B;AACA,iBAAK,IAAL,CAAU,YAAV;;AAEA,iBAAK,GAAL,CAAS,KAAK,IAAd;AACA,iBAAK,QAAL;AAEH;;;4CAEoB,O,EAAU;AAC3B,gBAAI,WAAW,QAAQ,KAAR,CAAc,IAA7B;;AAEA,iBAAM,IAAI,IAAI,CAAR,EAAW,KAAK,SAAS,MAA/B,EAAuC,IAAI,EAA3C,EAA+C,KAAK,CAApD,EAAwD;;AAEpD,oBAAI,IAAI,CAAC,KAAK,MAAL,KAAgB,KAAK,MAArB,GAA8B,KAAK,WAApC,IAAiD,CAAzD;AACA,oBAAI,IAAI,CAAC,KAAK,MAAL,KAAgB,KAAK,MAArB,GAA8B,KAAK,WAApC,IAAiD,CAAzD;AACA,oBAAI,IAAI,CAAC,KAAK,MAAL,KAAgB,KAAK,MAArB,GAA8B,KAAK,WAApC,IAAiD,CAAzD;;AAEA,yBAAU,IAAI,CAAd,IAAoB,CAApB;AACA,yBAAU,IAAI,CAAd,IAAoB,CAApB;AACA,yBAAU,IAAI,CAAd,IAAoB,CAApB;AACA,yBAAU,IAAI,CAAd,IAAoB,CAApB;AACH;AACJ;;;4CAEoB,O,EAAU;AAC3B,gBAAI,WAAW,QAAQ,KAAR,CAAc,IAA7B;;AAEA,iBAAM,IAAI,IAAI,CAAR,EAAW,KAAK,SAAS,MAA/B,EAAuC,IAAI,EAA3C,EAA+C,KAAK,CAApD,EAAwD;AACpD,oBAAI,IAAI,KAAK,MAAL,KAAgB,GAAxB;AACA,oBAAI,IAAI,KAAK,MAAL,KAAgB,GAAxB;AACA,oBAAI,IAAI,KAAK,MAAL,KAAgB,GAAxB;;AAEA,yBAAU,IAAI,CAAd,IAAoB,IAAI,EAAxB;AACA,yBAAU,IAAI,CAAd,IAAoB,IAAI,EAAxB;AACA,yBAAU,IAAI,CAAd,IAAoB,IAAI,EAAxB;AACA,yBAAU,IAAI,CAAd,IAAoB,CAApB;AACH;AACJ;;;;;;kBApOgB,a;;;;;;;;;;;ACLrB;;;;;;;;;AAGI,oBAAY,MAAZ,EAAoB,EAApB,EAAwB;AAAA;;AAAA;;AACpB;;;AAGA,aAAK,SAAL,GAAiB,EAAjB;;AAEA;;;AAGA,aAAK,OAAL,GAAe,MAAf;;AAEA;;;;;AAKA,aAAK,KAAL,GAAa,EAAb;;AAEA;;;;;AAKA,aAAK,cAAL,GAAsB,CAClB,GADkB,EACb,GADa,EACR,GADQ,EACH,GADG,EACE,GADF,EACO,GADP,EACY,GADZ,EACiB,GADjB,EACsB,GADtB,EAC2B,GAD3B,EACgC,GADhC,EACqC,GADrC,EAC0C,GAD1C,EAElB,GAFkB,EAEb,GAFa,EAER,GAFQ,EAEH,GAFG,EAEE,GAFF,EAEO,GAFP,EAEY,GAFZ,EAEiB,GAFjB,EAEsB,GAFtB,EAE2B,GAF3B,EAEgC,GAFhC,EAEqC,GAFrC,EAE0C,IAF1C,EAGlB,GAHkB,EAGb,GAHa,EAGR,GAHQ,EAGH,GAHG,EAGE,GAHF,EAGO,GAHP,EAGY,GAHZ,EAGiB,GAHjB,EAGsB,GAHtB,EAG2B,GAH3B,EAGgC,IAHhC,CAAtB;;AAMA,iBAAS,gBAAT,CAA0B,SAA1B,EAAqC;AAAA,mBAAS,MAAK,SAAL,CAAe,KAAf,CAAT;AAAA,SAArC;AACA,iBAAS,gBAAT,CAA0B,OAA1B,EAAmC;AAAA,mBAAS,MAAK,OAAL,CAAa,KAAb,CAAT;AAAA,SAAnC;AACH;;AAED;;;;;;;;sCAIc;AACV,gBAAI,OAAO,EAAX;AACA,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,KAAL,CAAW,MAA/B,EAAuC,GAAvC,EAA4C;AACxC,oBAAI,KAAK,KAAL,CAAW,CAAX,IAAgB,CAApB,EAAuB;AACnB,wBAAI,SAAS,CAAb;AACA,wBAAI,KAAK,KAAK,KAAL,CAAW,MAAX,GAAkB,CAA3B,EAA8B;AAAE,iCAAS,CAAT;AAAa;AAC7C,yBAAK,IAAL,CAAW,EAAE,UAAU,eAAK,eAAL,CAAqB,CAArB,CAAZ,EAAqC,QAAQ,SAAS,CAAtD,EAAyD,OAAO,CAAhE,EAAmE,UAAU,KAAK,KAAL,CAAW,CAAX,CAA7E,EAAX;AACH;AACJ;AACD,mBAAO,IAAP;AACH;;AAED;;;;;;;kCAIU,K,EAAO;AACb,gBAAI,MAAM,KAAK,cAAL,CAAoB,OAApB,CAA4B,MAAM,GAAN,CAAU,WAAV,EAA5B,CAAV;AACA,gBAAI,QAAQ,CAAC,CAAT,KAAe,KAAK,KAAL,CAAW,GAAX,MAAoB,CAApB,IAAyB,CAAC,KAAK,KAAL,CAAW,GAAX,CAAzC,CAAJ,EAA+D;AAC3D,qBAAK,KAAL,CAAW,GAAX,IAAkB,GAAlB,CAD2D,CACpC;AACvB,oBAAI,SAAS,KAAK,KAAL,CAAW,MAAM,eAAK,cAAL,CAAoB,MAArC,CAAb;AACA,qBAAK,SAAL,CAAe;AACX,8BAAU,eAAK,eAAL,CAAqB,GAArB,CADC;AAEX,4BAAQ,SAAS,KAAK,OAAL,CAAa,WAFnB;AAGX;AACA,8BAAU,GAJC;AAKX,4BAAQ,OALG,EAAf;AAMH;AACJ;;AAED;;;;;;;gCAIQ,K,EAAO;AACX,gBAAI,MAAM,KAAK,cAAL,CAAoB,OAApB,CAA4B,MAAM,GAAN,CAAU,WAAV,EAA5B,CAAV;AACA,gBAAI,QAAQ,CAAC,CAAb,EAAgB;AACZ,qBAAK,KAAL,CAAW,GAAX,IAAkB,GAAlB,CADY,CACW;AACvB,oBAAI,SAAS,KAAK,KAAL,CAAW,MAAM,eAAK,cAAL,CAAoB,MAArC,CAAb;AACA,qBAAK,SAAL,CAAe;AACX,8BAAU,eAAK,eAAL,CAAqB,GAArB,CADC;AAEX,4BAAQ,SAAS,KAAK,OAAL,CAAa,WAFnB;AAGX;AACA,8BAAU,CAJC;AAKX,4BAAQ,SALG,EAAf;AAMH;AACJ;;;;;;;;;;;;;;kBCtFU;AACb,eAAa;AACX,gBAAY,kZADD;AAEX,cAAU;AAFC,GADA;AAKb,WAAS;AACP,gBAAY,8EADL;AAEP,cAAU;AAFH,GALI;AASb,mBAAiB;AACf,gBAAY;AADG,GATJ;AAYb,mBAAiB;AACf,gBAAY;AADG,GAZJ;AAeb,UAAQ;AACN,gBAAY,6IADN;AAEN,cAAU;AAFJ;AAfK,C;;;;;;;;kBCAA;AACX,aAAS;AACL,aAAK,QADA;AAEL,iBAAS,QAFJ;AAGL;;AAEA,eAAO,QALF;AAML,kBAAU,QANL;AAOL,kBAAU,QAPL;AAQL,eAAO,QARF;AASL,gBAAQ;AATH,KADE;;AAaX,UAAM;AACF,cAAM,QADJ;AAEF,eAAO,QAFL;AAGF,gBAAQ,QAHN;AAIF,gBAAQ,QAJN;AAKF,gBAAQ;AALN,KAbK;;AAqBX,eAAW,CACP,QADO,EAEP,QAFO,EAGP,QAHO,EAIP,QAJO,EAKP,QALO,EAMP,QANO;AArBA,C;;;;;;;;;ACAf;;;;;;kBACe;AACX,gBAAY,CAAQ,QAAR,EAAkB,QAAlB,EAA4B,QAA5B,EAAsC,QAAtC,EACQ,QADR,EACkB,QADlB,EAC4B,QAD5B,EACsC,QADtC,EAEQ,QAFR,EAEkB,QAFlB,EAE4B,QAF5B,EAEsC,QAFtC,CADD;;AAMX,UAAM;AACF,gBAAQ;AACJ,mBAAO;AACH,0BAAU,iBAAO,SAAP,CAAiB,CAAjB,CADP;AAEH,uBAAO,iBAAO,OAAP,CAAe;AAFnB,aADH;AAKJ,mBAAO;AACH,0BAAU,iBAAO,SAAP,CAAiB,CAAjB,CADP;AAEH,uBAAO,iBAAO,OAAP,CAAe;AAFnB;AALH,SADN;AAWF,mBAAW;AACP,mBAAO;AACH,0BAAU,iBAAO,SAAP,CAAiB,CAAjB,CADP;AAEH,uBAAO,iBAAO,IAAP,CAAY;AAFhB,aADA;AAKP,mBAAO;AACH,0BAAU,iBAAO,SAAP,CAAiB,CAAjB,CADP;AAEH,uBAAO,iBAAO,IAAP,CAAY;AAFhB;AALA,SAXT;AAqBF,2BAAmB;AACf,mBAAO;AACH,0BAAU,iBAAO,SAAP,CAAiB,CAAjB,CADP;AAEH,uBAAO,iBAAO,IAAP,CAAY;AAFhB,aADQ;AAKf,mBAAO;AACH,0BAAU,iBAAO,SAAP,CAAiB,CAAjB,CADP;AAEH,uBAAO,iBAAO,IAAP,CAAY;AAFhB;AALQ;;AArBjB,KANK;;AAyCX,eAAW;AACP,cAAM;AACF,qBAAS,+BADP;AAEF,mBAAO,iBAAO,OAAP,CAAe,OAFpB;AAGF,sBAAU,iBAAO,SAAP,CAAiB,CAAjB,CAHR;AAIF,sBAAU,iBAAO,SAAP,CAAiB,CAAjB,CAJR;AAKF,sBAAU,iBAAO,OAAP,CAAe;AALvB,SADC;;AASP,gBAAQ;AACJ,4BAAgB,CACZ,wBADY,EAEZ,wBAFY,EAGZ,wBAHY,EAIZ,wBAJY,EAKZ,wBALY,EAMZ,wBANY,CADZ;AAQJ,mBAAO,iBAAO,OAAP,CAAe,GARlB;AASJ,sBAAU,iBAAO,SAAP,CAAiB,CAAjB;AATN;AATD,KAzCA;;AA+DX,UAAM;AACF,eAAO,iBAAO,OAAP,CAAe,OADpB;AAEF,kBAAU,iBAAO,OAAP,CAAe,OAFvB;AAGF,kBAAU,iBAAO,OAAP,CAAe;AAHvB,KA/DK;;AAqEX,uBAAmB;AACf,gBAAQ,gCADO;AAEf,eAAO,iBAAO,SAAP,CAAiB,CAAjB;AAFQ,KArER;;AA0EX,cAAU;AACN,oBAAY;AACR,iBAAK,iBAAO,OAAP,CAAe,OADZ;AAER,oBAAQ,iBAAO,OAAP,CAAe;AAFf,SADN;AAKN,mBAAW,iBAAO,SAAP,CAAiB,CAAjB;AALL;AA1EC,C;;;;;;;;;ACDf;;;;;;kBAEe;AACX,eAAW,YADA;AAEX,WAAW,sBAFA;;AAIX,iBAAa,OAJF;;AAMX;;;AAGA,wBAAoB,EATT;;AAWX;;;;AAIA,QAfW,gBAeN,GAfM,EAeD;AAAA;;AACN,aAAK,WAAL,GAAmB,SAAnB;AACA,aAAK,MAAL,CAAY,QAAZ,GAAuB,CAAvB,CAFM,CAEoB;AAC1B,aAAK,MAAL,CAAY,QAAZ,CAAqB,GAArB,EACI;AAAA,mBAAM,MAAK,QAAL,EAAN;AAAA,SADJ,EAEI;AAAA,mBAAM,MAAK,UAAL,EAAN;AAAA,SAFJ,EAGI,UAAC,GAAD;AAAA,mBAAS,MAAK,OAAL,CAAa,GAAb,CAAT;AAAA,SAHJ;AAIH,KAtBU;;;AAwBX;;;AAGA,SA3BW,mBA2BH;AACJ,aAAK,WAAL,GAAmB,QAAnB;AACA,aAAK,MAAL,CAAY,KAAZ;AACH,KA9BU;;;AAgCX;;;AAGA,UAnCW,oBAmCF;AACL,aAAK,WAAL,GAAmB,SAAnB;AACA,aAAK,MAAL,CAAY,MAAZ;AACH,KAtCU;;;AAwCX;;;;;AAKA,sBA7CW,8BA6CQ,UA7CR,EA6CoB;AAC3B,YAAI,KAAK,kBAAL,CAAwB,OAAxB,CAAgC,UAAhC,MAAgD,CAAC,CAArD,EAAwD;AACpD,mBAAO,IAAP;AACH,SAFD,MAEO;AACH,mBAAO,KAAP;AACH;AACJ,KAnDU;;;AAqDX;;;;AAIA,kBAzDW,0BAyDI,UAzDJ,EAyDgB,IAzDhB,EAyDsB;AAAA;;AAC7B,aAAK,UAAL,CAAgB;AACZ,0BAAc,IADF;AAEZ,wBAAY,UAFA;AAGZ,wBAAY,oBAAC,KAAD,EAAQ,QAAR,EAAkB,UAAlB;AAAA,uBAAiC,OAAK,wBAAL,CAA8B,KAA9B,EAAqC,QAArC,EAA+C,UAA/C,CAAjC;AAAA,aAHA;AAIZ,uBAAW,mBAAC,KAAD;AAAA,uBAAW,OAAK,kBAAL,CAAwB,KAAxB,CAAX;AAAA,aAJC;AAKZ,qBAAS,iBAAC,GAAD;AAAA,uBAAS,OAAK,uBAAL,CAA6B,GAA7B,CAAT;AAAA;AALG,SAAhB;AAOH,KAjEU;;;AAmEX;;;;;;AAMA,YAzEW,oBAyEF,UAzEE,EAyEU,QAzEV,EAyEoB,WAzEpB,EAyEiC,QAzEjC,EAyE2C;AAClD,YAAI,CAAC,KAAK,kBAAL,CAAwB,UAAxB,CAAL,EAA0C;AAAE;AAAS;;AAErD,aAAK,aAAL,CAAmB,CAAnB,EAAsB,KAAK,EAAL,CAAQ,MAAR,CAAe,UAAf,EAA2B,MAAjD;AACA,YAAI,QAAQ,CAAZ,CAJkD,CAInC;AACf,YAAI,OAAO,eAAK,cAAL,CAAoB,QAApB,CAAX,CALkD,CAKR;AAC1C,YAAI,WAAW,GAAf,CANkD,CAM9B;AACpB;AACA,aAAK,SAAL,CAAe,CAAf,EAAkB,GAAlB;AACA,aAAK,MAAL,CAAY,CAAZ,EAAe,IAAf,EAAqB,QAArB,EAA+B,KAA/B;;AAEA,YAAI,QAAJ,EAAc;AACV,iBAAK,OAAL,CAAa,CAAb,EAAgB,IAAhB,EAAsB,QAAQ,QAA9B;AACH;AACJ,KAvFU;;;AAyFX;;;;;;AAMA,UA/FW,kBA+FJ,UA/FI,EA+FQ,QA/FR,EA+FkB,WA/FlB,EA+F+B,QA/F/B,EA+FyC;AAChD,YAAI,CAAC,KAAK,kBAAL,CAAwB,UAAxB,CAAL,EAA0C;AAAE;AAAS;AACrD,YAAI,OAAO,eAAK,cAAL,CAAoB,QAApB,CAAX;AACA,aAAK,aAAL,CAAmB,WAAnB,EAAgC,KAAK,EAAL,CAAQ,MAAR,CAAe,UAAf,EAA2B,MAA3D;AACA,YAAI,WAAW,GAAf,CAJgD,CAI5B;AACpB,aAAK,SAAL,CAAe,CAAf,EAAkB,GAAlB;AACA,aAAK,MAAL,CAAY,WAAZ,EAAyB,IAAzB,EAA+B,QAA/B,EAAyC,CAAzC;;AAEA,YAAI,QAAJ,EAAc;AACV,iBAAK,OAAL,CAAa,WAAb,EAA0B,IAA1B,EAAgC,QAAhC;AACH;AACJ,KA1GU;;;AA4GX;;;;;;AAMA,WAlHW,mBAkHH,QAlHG,EAkHO,WAlHP,EAkHoB,KAlHpB,EAkH2B;AAClC,YAAI,CAAC,KAAL,EAAY;AAAE,oBAAQ,CAAR;AAAY;AAC1B,YAAI,OAAO,eAAK,cAAL,CAAoB,QAApB,CAAX;AACA,aAAK,OAAL,CAAa,WAAb,EAA0B,IAA1B,EAAgC,KAAhC;AACH,KAtHU;;;AAwHX;;;;;AAKA,oBA7HW,4BA6HM,SA7HN,EA6HiB,QA7HjB,EA6H2B;AAClC,YAAI,CAAC,KAAK,UAAV,EAAsB;AAAE,iBAAK,UAAL,GAAkB,EAAlB;AAAuB;AAC/C,aAAK,UAAL,CAAgB,IAAhB,CAAsB,EAAE,MAAM,SAAR,EAAmB,UAAU,QAA7B,EAAtB;AACH,KAhIU;;;AAkIX;;;;AAIA,sBAtIW,gCAsIU,CAAE,CAtIZ;;;AAwIX;;;;;;AAMA,4BA9IW,oCA8Ic,KA9Id,EA8IqB,QA9IrB,EA8I+B,UA9I/B,EA8I2C;AAClD,YAAI,cAAc,aAAa,CAA/B,EAAkC;AAC9B,oBAAQ,GAAR,CAAY,aAAa,SAAzB;AACA,iBAAK,kBAAL,CAAwB,IAAxB,CAA6B,UAA7B;AACH;AACJ,KAnJU;;;AAqJX;;;;AAIA,2BAzJW,mCAyJa,GAzJb,EAyJkB;AACzB,gBAAQ,GAAR,CAAY,0BAAZ,EAAwC,GAAxC;AACH,KA3JU;AA6JX,YA7JW,sBA6JA;AAAA;;AACP,aAAK,aAAL,CAAmB,CAAnB,EAAsB,KAAK,EAAL,CAAQ,MAAR,CAAe,KAAK,KAApB,EAA2B,MAAjD;AACA,aAAK,MAAL,CAAY,KAAZ;AACA,aAAK,WAAL,GAAmB,SAAnB;AACA,aAAK,SAAL,GAAiB,IAAjB;AACA,aAAK,MAAL,CAAY,WAAZ,CAAwB;AAAA,mBAAQ,OAAK,UAAL,CAAgB,IAAhB,CAAR;AAAA,SAAxB;AACH,KAnKU;AAqKX,cArKW,wBAqKE;AACT,gBAAQ,GAAR,CAAY,UAAZ;AACH,KAvKU;AAyKX,WAzKW,mBAyKH,GAzKG,EAyKE;AACT,gBAAQ,GAAR,CAAY,OAAZ,EAAqB,GAArB;AACH,KA3KU;;;AA6KX;;;;AAIA,cAjLW,sBAiLA,IAjLA,EAiLM;AACb,YAAI,KAAK,UAAT,EAAqB;AACjB,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,UAAL,CAAgB,MAApC,EAA4C,GAA5C,EAAiD;AAC7C,oBAAI,KAAK,UAAL,CAAgB,CAAhB,EAAmB,IAAnB,KAA4B,UAAhC,EAA4C;AACxC,4BAAQ,GAAR,CAAY,IAAZ;AACA,yBAAK,UAAL,CAAgB,CAAhB,EAAmB,QAAnB,CAA4B,KAA5B,CAAkC,IAAlC,EAAwC,CAAC,EAAE,MAAM,KAAK,IAAL,GAAY,EAApB,EAAwB,UAAU,KAAK,QAAvC,EAAD,CAAxC;AACH;AACJ;AACJ;AACJ;AA1LU,C;;;;;;;;;ACFf;;;;;;kBAEe;AACX;;;;;;AAMA,eAPW,uBAOC,MAPD,EAOS,KAPT,EAOgB,SAPhB,EAO2B;AAClC,YAAI,CAAC,SAAL,EAAgB;AAAE,wBAAY,EAAZ;AAAiB;AACnC,aAAK,IAAI,CAAT,IAAc,KAAd,EAAqB;AACjB,mBAAO,IAAI,SAAX,IAAwB,MAAM,CAAN,CAAxB;AACH;AACD,eAAO,MAAP;AACH,KAbU;;;AAeX;;;;;;AAMA,YArBW,oBAqBF,GArBE,EAqBG,GArBH,EAqBQ;AACf,YAAI,CAAC,GAAL,EAAU;AAAE,kBAAM,GAAN;AAAY;AACxB,eAAO,CAAP,CAFe,CAEL;AACV,YAAI,IAAI,KAAK,KAAL,CAAW,OAAO,MAAI,GAAX,CAAX,CAAR;AACA,YAAI,IAAI,KAAK,KAAL,CAAW,MAAM,GAAjB,IAAwB,GAAhC;AACA,YAAI,IAAI,MAAM,GAAd;AACA,eAAO,EAAE,GAAG,IAAE,GAAF,GAAQ,GAAb,EAAkB,GAAG,IAAE,GAAF,GAAQ,GAA7B,EAAkC,GAAG,IAAE,GAAF,GAAQ,GAA7C,EAAP;AACH,KA5BU;AA8BX,YA9BW,oBA8BF,GA9BE,EA8BG;AACV,eAAO,IAAI,CAAJ,IAAS,KAAK,IAAI,CAAlB,IAAuB,KAAK,IAAI,CAAvC;AACH;AAhCU,C;;;;;;;;;;;;;ICFM,S;AACjB,uBAAY,MAAZ,EAAoB;AAAA;;AAAA;;AAEhB;;;;;AAKA,aAAK,MAAL,GAAc,IAAI,MAAM,QAAV,EAAd;;AAEA,YAAI,UAAU,OAAO,MAArB,EAA6B;AACzB;AACA,gBAAI,SAAS,IAAI,MAAM,UAAV,EAAb;AACA,mBAAO,IAAP,CAAY,OAAO,MAAnB,EAA2B,UAAC,QAAD,EAAW,SAAX,EAAyB;AAChD,sBAAK,cAAL,CAAoB,QAApB,EAA8B,SAA9B;AACH,aAFD;AAGH;;AAED,aAAK,YAAL,CAAkB,MAAlB;AACH;;AAED;;;;;;;;;AAOA;;;;;;iCAMS,K,EAAO,M,EAAQ,CAAE;;;iCACjB,K,EAAO,M,EAAQ,CAAE;;;qCACb,M,EAAQ,CAAE;;;uCACR,Q,EAAU,Q,EAAU,CAAE;;;;;AAErC;;;;;+BAKO,K,EAAO,M,EAAQ;AAClB,iBAAK,MAAL,CAAY,IAAZ,GAAmB,KAAK,IAAxB;AACA,kBAAM,KAAN,CAAY,GAAZ,CAAgB,KAAK,MAArB;AACA,iBAAK,QAAL,CAAc,KAAd,EAAqB,MAArB;AACH;;AAED;;;;;;;4BAII,M,EAAQ,I,EAAM;AACd,gBAAI,CAAC,IAAL,EAAW;AACP,uBAAO,KAAK,IAAL,GAAY,QAAnB;AACH;AACD,mBAAO,IAAP,GAAc,IAAd;AACA,iBAAK,MAAL,CAAY,GAAZ,CAAgB,MAAhB;AACH;;AAED;;;;;;;;;AAgBA;;;;;kCAKU,K,EAAO,M,EAAQ,CAAE;;AAE3B;;;;;;;;+BAKO,K,EAAO,M,EAAQ;AAClB,iBAAK,QAAL,CAAc,KAAd,EAAqB,MAArB;AACH;;;4BApEU;AACP,mBAAO,KAAK,WAAL,CAAiB,IAAxB;AACH;;;4BAwCW;AACR,mBAAO,KAAK,MAAZ;AACH;;AAED;;;;;;;4BAIe;AACX,mBAAO,KAAK,MAAL,CAAY,QAAnB;AACH;;;;;;kBA5EgB,S","file":"improv.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Metronome from './objects/metronome.es6';\nimport CircularKeyboard from './objects/keyboards/circularkeyboard.es6';\nimport TraditionalKeyboard from './objects/keyboards/traditionalkeyboard.es6';\nimport Dome from './objects/dome.es6';\nimport Particles from './objects/particleflock.es6';\nimport Lighting from './objects/lighting.es6';\nimport TonePlayback from './toneplayback.es6';\nimport Input from './input.es6';\nimport Style from './themeing/style.es6';\nimport Note from './musictheory/note.es6';\n\nexport default class Improv {\n    constructor(scene, configURI) {\n        /**\n         * current key signature\n         * @type {String}\n         */\n        this.currentKeySignature = null;\n\n        /**\n         * inactivity timer for suggestions\n         * @type {null}\n         * @private\n         */\n        this._inactivityTimer = null;\n\n        this._scene = scene;\n        this._request = new XMLHttpRequest();\n        this._request.onreadystatechange = () => this.onConfigLoaded();\n        this._request.open('GET', configURI);\n        this._request.send();\n    }\n\n    /**\n     * on key change\n     * @param keys\n     */\n    onKeyInputChange(event) {\n        clearTimeout(this._inactivityTimer);\n        this._inactivityTimer = setTimeout( () => this.onInactivityTimeout(), 5000);\n\n        this._keyboard.toggleKeyPressed({\n            notation: event.changed.notation,\n            octave: event.changed.octave,\n            velocity: event.changed.velocity });\n\n        if (event.predictedKey.length > 0 && this.currentKeySignature !== event.predictedKey[0].key) {\n            this._keyboard.changeKeySignature(event.predictedKey[0].key);\n            this._hudKeyboard.changeKeySignature(event.predictedKey[0].key);\n            this.currentKeySignature = event.predictedKey[0].key;\n            this._metronome.setHitColor(Style.colorwheel[Note.indexOfNotation(event.predictedKey[0].key)]);\n            this._particles.setColor(Style.colorwheel[Note.indexOfNotation(event.predictedKey[0].key)]);\n        }\n\n        //this._keyboard.toggleKeyPressed(key[octave], event.changed.velocity);\n         /*var key = this.findKeyObjectsForNotation(event.changed.notation);\n         var octave;\n         if (event.changed.octave / 2 === Math.floor(event.changed.octave / 2)) {\n            octave = 1;\n         } else {\n            octave = 0;\n         }\n\n         this.toggleKeyPressed(key[octave], event.changed.velocity);\n\n         if (event.predictedKey.length > 0 && event.predictedKey[0] !== this.currentKeySignature) {\n            this.onKeySignatureChange(event.predictedKey[0].key);\n         }*/\n     }\n\n    /**\n     * inactivity timeout\n     */\n    onInactivityTimeout() {\n        this._keyboard.resetKeys();\n        this._hudKeyboard.resetKeys();\n        this._input.clearPredictionHistory();\n        this._metronome.setHitColor();\n        this._particles.setColor();\n     }\n\n    /**\n     * on config loaded\n     */\n    onConfigLoaded() {\n        if (this._request.readyState === XMLHttpRequest.DONE) {\n            if (this._request.status === 200) {\n                var config = JSON.parse(this._request.responseText);\n                this.setup(config);\n            } else {\n                console.log('There was a problem with the request.');\n            }\n        }\n    }\n    /**\n     * setup app\n     * @param config\n     * @param config\n     */\n    setup(config) {\n        this._scene.onCreate = this.create;\n\n        this._input = new Input(config.input, (keys) => this.onKeyInputChange(keys) );\n        this._keyboard = new TraditionalKeyboard(config.keyboard);\n        this._hudKeyboard = new CircularKeyboard(config.notationdisplay);\n        this._metronome = new Metronome();\n        this._particles = new Particles();\n\n        this._scene.addObjects([\n            this._metronome,\n            this._particles,\n            new Dome(),\n            this._keyboard,\n            this._hudKeyboard,\n            new Lighting() ]);\n\n        for (var c = 0; c < config.sound.soundfonts.length; c++) {\n            TonePlayback.loadInstrument(config.sound.soundfonts[c], config.sound.soundfontlocation);\n        }\n        document.addEventListener('keydown', event => this.onKeyDown(event) );\n    }\n\n    /**\n     * on keydown\n     * @param event\n     */\n    onKeyDown(event) {\n        if (event.code === 'Space') {\n            switch (TonePlayback.playerState) {\n                case 'ready': TonePlayback.play('./assets/audio/Bonnie_Tyler_-_Total_Eclipse_of_the_Heart.mid'); break;\n                case 'playing': TonePlayback.pause(); break;\n                case 'paused': TonePlayback.resume(); break;\n            }\n        }\n    }\n\n    create(scene, custom) {\n        scene.renderer.gammaInput = true;\n        scene.renderer.gammaOutput = true;\n    }\n\n    render(scene, custom) {}\n}\n","import QWERTYKeyManager from './qwertykeymanager.es6';\nimport MIDIKeyManager from './midikeymanager.es6';\nimport KeySignaturePrediction from './musictheory/keysignatureprediction.es6';\n\nexport default class {\n    constructor(params, cb) {\n        /**\n         * key manager\n         * @type {$ES6_ANONYMOUS_CLASS$}\n         * @private\n         */\n        if (params.device === 'QWERTY') {\n            this._keymanager = new QWERTYKeyManager(params, changed => this.onKeyChange(changed));\n        } else if (params.device === 'MIDI') {\n            this._keymanager = new MIDIKeyManager(params, changed => this.onKeyChange(changed));\n        }\n\n        /**\n         * key signature prediction\n         * @type {$ES6_ANONYMOUS_CLASS$}\n         * @private\n         */\n        this._keySigPrediction = new KeySignaturePrediction();\n\n        /**\n         * key change callback\n         */\n        this._callback = cb;\n    }\n\n    /**\n     * clear prediction history\n     */\n    clearPredictionHistory() {\n        this._keySigPrediction.clearHistory();\n    }\n\n    /**\n     * on key change\n     * @param changed\n     */\n    onKeyChange(changed) {\n        var kd = this._keymanager.getKeysDown();\n        var predicted = this._keySigPrediction.update(kd);\n        this._callback.apply(this, [ { down: kd, predictedKey: predicted, changed: changed }]);\n    }\n}\n","import Note from './musictheory/note.es6';\n\nexport default class {\n    constructor(params, cb) {\n        /**\n         * event callback\n         */\n        this._callback = cb;\n\n        /**\n         * keys down\n         * @type {Array}\n         * @private\n         */\n        this._keys = [];\n\n        /**\n         * MIDI key to notation mapping (coming from MIDI, so not customizable)\n         * the splice happens because 0 index in MIDI starts with C\n         * @type {Array.<string>}\n         * @private\n         */\n        this._mapping = Note.sharpNotations\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations).splice(3, Note.sharpNotations.length *10);\n\n        this.initializeDevice();\n    }\n\n    /**\n     * initialize midi device\n     */\n    initializeDevice() {\n        // request MIDI access\n        if (navigator.requestMIDIAccess) {\n            navigator.requestMIDIAccess().then(\n                (event) => this.onMIDISuccess(event),\n                (event) => this.onMIDIFailure(event) );\n        } else {\n            console.log(\"No MIDI support in your browser.\");\n        }\n    }\n\n    /**\n     * on midi connection success\n     * @param midi\n     */\n    onMIDISuccess(midi) {\n        var inputs = midi.inputs;\n        for (let input of inputs.values()) {\n            input.onmidimessage = msg => this.onMIDIMessage(msg);\n        }\n    }\n\n    /**\n     * on midi connection failure\n     * @param event\n     */\n    onMIDIFailure(event) {\n        console.log(\"No access to MIDI devices or your browser doesn't support WebMIDI API. Please use WebMIDIAPIShim \" + event);\n    }\n\n    /**\n     * on midi message\n     * @param msg\n     */\n    onMIDIMessage(msg) {\n        console.log(msg)\n        var cmd = msg.data[0] >> 4;\n        var channel = msg.data[0] & 0xf;\n        var noteNumber = msg.data[1];\n        var velocity = 0;\n        if (msg.data.length > 2)\n            velocity = msg.data[2] / 100;\n\n        // MIDI noteon with velocity=0 is the same as noteoff\n        if ( cmd==8 || ((cmd==9)&&(velocity==0)) ) { // noteoff\n            this.onKeyUp(noteNumber);\n        } else if (cmd == 9) { // note on\n            this.onKeyDown(noteNumber, velocity);\n        } //else if (cmd == 11) { // controller message\n    }\n\n    /**\n     * get keys down\n     */\n    getKeysDown() {\n        var down = [];\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c] > 0) {\n                var octave = 0;\n                if (c >= this._keys.length/2) { octave = 1; }\n                down.push( { notation: this._mapping[c], octave: octave, index: c, velocity: this._keys[c]} );\n            }\n        }\n        return down;\n    }\n\n    /**\n     * on key down\n     * @param key\n     * @param velocity\n     */\n    onKeyDown(key, velocity) {\n        this._keys[key] = velocity;\n        var octave = 0;\n        octave = Math.floor(key / Note.sharpNotations.length);\n        this._callback({\n            notation: this._mapping[key],\n            octave: octave,\n            index: key,\n            velocity: velocity,\n            action: 'press' });\n    }\n\n    /**\n     * on key down\n     * @param key\n     */\n    onKeyUp(key) {\n        this._keys[key] = 0.0;\n        var octave = 0;\n        octave = Math.floor(key / Note.sharpNotations.length);\n        this._callback({\n            notation: this._mapping[key],\n            octave: octave,\n            index: key,\n            velocity: 0,\n            action: 'release' });\n    }\n}\n","import Note from './note.es6';\n\nexport default class {\n    constructor() {\n        /**\n         * key signature score history\n         * @type {Array}\n         * @private\n         */\n        this._keySignatureScoreHistory = [];\n\n        /**\n         * history decay rate\n         * @type {Number}\n         * @private\n         */\n        this._keySignatureDecayRate = 0.9;\n\n        Note.generateKeySignatureLookup();\n    }\n\n    /**\n     * update keys pressed\n     * @param {Array} keys\n     */\n    update(keys) {\n        if (keys.length === 0) { return this._keySignatureScoreHistory; }\n        var keysigScores = {};\n        for (var sig in Note.keys) {\n            for (var d = 0; d < keys.length; d++) {\n                if (Note.keys[sig].indexOf(keys[d].notation) !== -1) {\n                    if (!keysigScores[sig]) { keysigScores[sig] = 0; }\n                    keysigScores[sig] ++;\n\n                    if (keys[d].notation === sig) {\n                        keysigScores[sig] += .01; // small priority boost for root note\n                    }\n                }\n            }\n        }\n\n        var scores = [];\n        for (var score in keysigScores) {\n            scores.push( { score: keysigScores[score], key: score, timestamp: Date.now() });\n        }\n\n        this.decayHistoricalScores();\n        return this.applyCurrentScoreToHistory(scores);\n    }\n\n    /**\n     * clear history\n     */\n    clearHistory() {\n        this._keySignatureScoreHistory = [];\n    }\n\n    /**\n     * slowly decay current historical scores\n     */\n    decayHistoricalScores() {\n        for (var c = 0; c < this._keySignatureScoreHistory.length; c++) {\n            this._keySignatureScoreHistory[c].score *= this._keySignatureDecayRate;\n        }\n    }\n\n    /**\n     * apply scores to history (aggregate all scores: current and past)\n     * @param scores\n     */\n    applyCurrentScoreToHistory(scores) {\n        for (var c = 0; c < scores.length; c++) {\n            var found = false;\n            for (var d = 0; d < this._keySignatureScoreHistory.length; d++) {\n                if (this._keySignatureScoreHistory[d].key === scores[c].key) {\n                    found = true;\n                    this._keySignatureScoreHistory[d].score += scores[c].score;\n                }\n            }\n            if (!found) {\n                this._keySignatureScoreHistory.push(scores[c]);\n            }\n        }\n        return this._keySignatureScoreHistory.sort(function(a, b) { return (a.score < b.score ) ? 1 : ((b.score < a.score) ? -1 : 0); });\n    }\n}\n","/**\n * Note static class\n * @constructor\n */\nexport default {\n    /** cached keysignature lookup table */\n    keys: {},\n\n    /**\n     * incremental tones as sharp notation\n     * @const\n     * @static\n     * @type {Array.<string>}\n     **/\n    sharpNotations: [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"],\n\n    /**\n     * incremental tones as flat notation\n     * @const\n     * @static\n     * @type {Array.<string>}\n     **/\n    flatNotations: [\"A\", \"Bb\", \"B\", \"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\"],\n\n    /**\n     * get notation index when notation is either flat or sharp\n     * @param notation\n     */\n    indexOfNotation(notation) {\n        var index = this.sharpNotations.indexOf(notation);\n        if (index === -1) {\n            index = this.flatNotations.indexOf(notation);\n        }\n        return index;\n    },\n\n    /**\n     * get notation given an index\n     * @param index\n     */\n    notationAtIndex(index, preferFlat) {\n        if (index >= this.sharpNotations.length) {\n            index = index % this.sharpNotations.length;\n        }\n\n        if (preferFlat) {\n            return this.flatNotations[index];\n        } else {\n            return this.sharpNotations[index];\n        }\n    },\n\n    /**\n     * odd notations\n     * @const\n     * @static\n     * @type {Array.<string>}\n     **/\n     oddNotations: [\"B#\", \"Cb\", \"E#\", \"Fb\"],\n\n    /**\n     * corrected notations\n     * @const\n     * @static\n     * @type {Array.<string>}\n     **/\n     correctedNotations: [\"C\", \"C\", \"F\", \"F\"],\n\n    /**\n     * translate index from MIDI to notation\n     * @param index\n     * @constructor\n     */\n    MIDItoNotation(index) {\n        var position = index % this.sharpNotations.length;\n        return this.sharpNotations[position];\n    },\n\n    /**\n     * translate notation and octave to MIDI index\n     * @param notation\n     */\n    notationToMIDI(notation) {\n        var ntObj = this.parseNotation(notation);\n        var ntindx = this.sharpNotations.indexOf(ntObj.notation);\n        if (ntindx === -1) {\n            ntindx = this.flatNotations.indexOf(ntObj.notation);\n        }\n        return ntObj.octave * this.sharpNotations.length + ntindx;\n    },\n\n    /**\n     * parse notation to notation and octave\n     * @param notation\n     */\n    parseNotation(notation) {\n        var note = {};\n        // only supports one digit octaves (if thats even a real issue)\n        var octave = notation.charAt(notation.length-1);\n        if (parseInt(octave) == octave) {\n            note.octave = octave;\n            note.notation = notation.substr(0, notation.length-2);\n        } else {\n            note.octave = 4; // default\n            note.notation = notation;\n        }\n\n        return note;\n    },\n\n    /**\n     * turn a notation into a frequency\n     * @static\n     * @param {string} notation\n     * @return {string} frequency\n     */\n    getFrequencyForNotation(nt) {\n        var octave = 4;\n\n        // does notation include the octave?\n        if ( !isNaN( parseInt(nt.charAt(nt.length -1)) )) {\n            octave = parseInt(nt.charAt(nt.length -1));\n            nt = nt.substr(0, nt.length-1);\n        }\n\n        // correct any flat/sharps that resolve to a natural\n        if (this.oddNotations.indexOf(nt) != -1) {\n            nt = this.correctedNotations[this.oddNotations.indexOf(nt)];\n        }\n\n        var freq;\n        var indx = this.sharpNotations.indexOf(nt);\n\n        if (indx == -1) {\n            indx = this.flatNotations.indexOf(nt);\n        }\n\n        if (indx != -1) {\n            indx += (octave-4) * this.sharpNotations.length;\n            freq = 440 * (Math.pow(2, indx/12));\n        }\n        return freq;\n    },\n\n    /**\n     * get notes in a specific key signature\n     *\n     * @static\n     * @param {string} key (root note)\n     * @param {boolean} if major key signature\n     * @param {number} octave to use (optional)\n     * @return {Array.<string>} keys in key signature\n     */\n    notesInKeySignature(key, major, octave) {\n        var notesToIndex;\n        var notesInKey = [];\n        var startPos;\n\n        // correct any flat/sharps that resolve to a natural\n        if (this.oddNotations.indexOf(key) != -1) {\n            key = this.correctedNotations[this.oddNotations.indexOf(key)];\n        }\n\n        // find the correct note and notation\n        if (this.sharpNotations.indexOf(key) != -1) {\n            notesToIndex = this.sharpNotations.slice();\n            startPos = this.sharpNotations.indexOf(key);\n        } else {\n            notesToIndex = this.flatNotations.slice();\n            startPos = this.flatNotations.indexOf(key);\n        }\n\n        // double the array length\n        var len = notesToIndex.length;\n        for ( var c = 0; c < len; c++ ) {\n            if (octave) {\n                notesToIndex.push(notesToIndex[c] + (octave+1));\n            } else {\n                notesToIndex.push(notesToIndex[c]);\n            }\n        }\n\n        // add octave notation to the first half of the array\n        if (octave) {\n            for (var c = 0; c < this.flatNotations.length; c++) {\n                notesToIndex[c] += octave;\n            }\n        }\n        // chop off the front of the array to start at the root key in the key signature\n        notesToIndex.splice(0, startPos);\n\n        // build the key signature\n        if (major) {\n            // MAJOR From root: whole step, whole step, half step, whole step, whole step, whole step, half step\n            notesInKey.push( notesToIndex[0] );\n            notesInKey.push( notesToIndex[2] );\n            notesInKey.push( notesToIndex[4] );\n            notesInKey.push( notesToIndex[5] );\n            notesInKey.push( notesToIndex[7] );\n            notesInKey.push( notesToIndex[9] );\n            notesInKey.push( notesToIndex[11] );\n        } else {\n            // MINOR From root: whole step, half step, whole step, whole step, half step, whole step, whole step\n            notesInKey.push( notesToIndex[0] );\n            notesInKey.push( notesToIndex[2] );\n            notesInKey.push( notesToIndex[3] );\n            notesInKey.push( notesToIndex[5] );\n            notesInKey.push( notesToIndex[7] );\n            notesInKey.push( notesToIndex[8] );\n            notesInKey.push( notesToIndex[10] );\n        }\n        return notesInKey;\n    },\n\n    /**\n     * pregenerate a key signature lookup table for every note\n     */\n    generateKeySignatureLookup() {\n        var kys = this.sharpNotations;\n        for (var c = 0; c < kys.length; c++) {\n            this.keys[kys[c]] = this.notesInKeySignature(kys[c], true);\n            this.keys[kys[c] + 'm'] = this.notesInKeySignature(kys[c], false);\n        }\n    }\n\n};\n","import BaseGroup from '../../node_modules/trivr/src/basegroup.es6';\nimport Style from '../themeing/style.es6';\nimport TonePlayback from '../toneplayback.es6';\n\nexport default class Dome extends BaseGroup {\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {\n        var mesh = new THREE.Mesh(this.createGeometry(), this.createMaterial());\n        mesh.position.z = 5;\n        this.add(mesh, 'dome');\n    }\n\n    /**\n     * on render\n     * @param scenecollection\n     * @param mycollection\n     */\n    onRender(scenecollection, mycollection) {\n        if (TonePlayback.isPlaying) {\n            this.group.rotation.y += Math.PI / 1024;\n        }\n    }\n\n    /**\n     * create globe geometry\n     * @returns {THREE.IcosahedronGeometry}\n     */\n    createGeometry() {\n        return new THREE.IcosahedronGeometry( 800, 2 );\n    }\n\n    /**\n     * create globe material\n     */\n    createMaterial() {\n        return new THREE.MeshPhongMaterial({\n            color      :  Style.dome.color,\n            emissive   :  Style.dome.emissive,\n            specular   :  Style.dome.specular,\n            side       :  THREE.BackSide,\n            shininess  :  10,\n            shading    :  THREE.FlatShading,\n            transparent: 1,\n            opacity    : 1\n        });\n    }\n}","import BaseGroup from '../../../node_modules/trivr/src/basegroup.es6';\nimport Input from '../../input.es6';\nimport Note from '../../musictheory/note.es6';\nimport Style from '../../themeing/style.es6';\nimport Utils from '../../utils.es6';\nimport TonePlayback from '../../toneplayback.es6';\n\nexport default class BaseKeyboard extends BaseGroup {\n    onInitialize(params) {\n        /**\n         * how much rotation occurs on keypress\n         * @type {number}\n         * @private\n         */\n        this._rotationOnPress = Math.PI/16;\n\n        /**\n         * number of octaves\n         * @type {number}\n         * @private\n         */\n        this._numOctaves = params.octaves ? params.octaves : 2;\n\n        /**\n         * starting octave (to better match with MIDI input)\n         * @type {number}\n         * @private\n         */\n        this._startingOctave = params.startoctave ? params.startoctave : 0;\n\n        /**\n         * starting note on keyboard\n         * @type {string}\n         * @private\n         */\n        this._startingNote = 'C';\n\n        /**\n         * key visuals\n         * @type {Array}\n         * @private\n         */\n        this._keys = [];\n\n        /**\n         * midi channels used\n         * @type {Array}\n         * @private\n         */\n        this._midichannels = [];\n\n        /**\n         * starting index at which point to allocate MIDI channels\n         * @type {number}\n         * @private\n         */\n        this._midiChannelStartIndex = 11;\n\n        /**\n         * suggested keys from key signature prediction\n         * @type {Array}\n         */\n        this.suggestedKeys = [];\n    }\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {\n        //TonePlayback.addEventListener('mididata', data => this.onSongData(data));\n    }\n\n    /**\n     * on render scene\n     * @param scene\n     * @param custom\n     */\n    onRender(scene, custom) {\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c].colortween.animating) {\n                this._keys[c].object.material.color.setRGB(\n                    this._keys[c].colortween.rcolor/100,\n                    this._keys[c].colortween.gcolor/100,\n                    this._keys[c].colortween.bcolor/100 );\n            }\n        }\n    }\n\n    /**\n     * on assets loaded\n     * @param geometry\n     */\n    onAssetsLoaded(geometry) {\n        var mat = new THREE.MeshStandardMaterial( {\n            metalness: 0.7,\n            roughness: 1,\n            side: THREE.FrontSide,\n            shading: THREE.FlatShading\n        });\n        this.setupScene(geometry, mat);\n    };\n\n    /**\n     * dynamically generate circle of keys\n     * @param geometry\n     * @param material\n     */\n    setupScene(geometry, material) {\n        var startOffset = Note.indexOfNotation(this._startingNote);\n        var ntindex = 0;\n        var transformPosition = 0;\n        for (var c = 0; c < this._numOctaves; c++) {\n            for (var d = 0; d < Note.sharpNotations.length; d++) {\n                var note = Note.notationAtIndex(d + startOffset);\n                transformPosition = this.addKey(transformPosition, note.indexOf('#') === -1, note, c, geometry, material);\n                ntindex ++;\n            }\n        }\n\n        return transformPosition;\n    }\n\n    /**\n     * on inactivity (fade away keys and clear key sig)\n     */\n    resetKeys() {\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c].suggested) {\n                var currentColor = this._keys[c].object.material.color.getHex();\n                Utils.copyPropsTo(this._keys[c].colortween, Utils.decToRGB(currentColor, 100), 'color');\n                this._keys[c].colortween.animating = true;\n                var target = Utils.copyPropsTo({}, Utils.decToRGB(Style.keys.normal[this._keys[c].type].color, 100), 'color');\n                createjs.Tween.get(this._keys[c].colortween)\n                    .to(target, 2000)\n                    .wait(100) // wait a few ticks, or the render cycle won't pick up the changes with the flag\n                    .call( function() { this.animating = false; } );\n            }\n        }\n    }\n\n    /**\n     * change key signature to notation given\n     * @param notation\n     */\n    changeKeySignature(notation) {\n        var c;\n        for (c = 0; c < this.suggestedKeys.length; c++) {\n            this.toggleKeySuggestion(this.suggestedKeys[c], notation, false);\n        }\n        this.suggestedKeys = Note.keys[notation];\n\n        for (c = 0; c < this.suggestedKeys.length; c++) {\n            this.toggleKeySuggestion(this.suggestedKeys[c], notation, true, c);\n        }\n    }\n\n    /**\n     * toggle key pressed\n     * @param key\n     */\n    toggleKeyPressed(k) {\n        var key = this.findKeyObjectForNotation(k.notation, k.octave);\n        if (key) {\n            if (k.velocity === 0) {\n                TonePlayback.noteOff(key.notation, key.midichannel, 1/8);\n                var channelindex = this._midichannels.indexOf(key.midichannel);\n                this._midichannels.splice(channelindex, 1);\n                clearTimeout(this._inactivityTimer);\n                key.object.rotation.set(key.originalRotation.x, key.originalRotation.y, key.originalRotation.z);\n                key.currentRotation = 0;\n                key.midichannel = -1;\n                key.down = false;\n            } else {\n                this._midichannels = this._midichannels.sort();\n                var midichannel = this._midichannels[this._midichannels.length-1] + 1;\n                if (!midichannel) {\n                    midichannel = this._midiChannelStartIndex;\n                }\n                TonePlayback.noteOn(TonePlayback.PIANO, key.notation, midichannel);\n                key.currentRotation = k.velocity * this._rotationOnPress;\n                key.object.rotateX(key.currentRotation);\n                key.midichannel = midichannel;\n                key.down = true;\n            }\n        }\n    }\n\n    /**\n     * toggle key suggestion\n     * @param notation\n     * @param keysignotation\n     * @param toggle\n     */\n    toggleKeySuggestion(notation, keysignotation, toggle) {\n        var ntIndex = Note.indexOfNotation(keysignotation);\n        var rootclr = Style.colorwheel[ntIndex];\n\n        var keys = this.findKeyObjectsForNotation(notation);\n\n        for (var c = 0; c < keys.length; c++) {\n            if (toggle) {\n                var clr;\n                if ( ntIndex===0 || ntIndex===2 || ntIndex===4 || ntIndex===6) {\n                    clr = Style.keys.stronglySuggested[keys[c].type];\n                    keys[c].suggested = 'stronglySuggested';\n                } else {\n                    clr = Style.keys.suggested[keys[c].type];\n                    keys[c].suggested = 'suggested';\n                }\n\n                keys[c].object.material.color.setHex(rootclr) ;//clr.color);\n              //  keys[c].object.material.emissive.setHex(rootclr) ; //clr.emissive);\n            } else {\n                keys[c].object.material.color.setHex(Style.keys.normal[keys[c].type].color);\n               // keys[c].object.material.emissive.setHex(Style.keys.normal[keys[c].type].emissive);\n                keys[c].suggested = false;\n            }\n        }\n    }\n\n    /**\n     * create white key geometry\n     * @returns {THREE.Mesh}\n     */\n    createWhiteKey(geometry, material) {\n        var keygeom = geometry.clone();\n        var mat = material.clone();\n        mat.color.setHex(Style.keys.normal.white.color);\n        mat.emissive.setHex(Style.keys.normal.white.emissive);\n        keygeom.translate( 0, -10, 0 );\n        var key = new THREE.Mesh( keygeom, mat);\n        return key;\n    }\n\n    /**\n     * create black key geometry\n     * @returns {THREE.Mesh}\n     */\n    createBlackKey(geometry, material) {\n        var keygeom = geometry.clone();\n        var mat = material.clone();\n        mat.color.setHex(Style.keys.normal.black.color);\n        mat.emissive.setHex(Style.keys.normal.black.emissive);\n        keygeom.translate( 0, -25, 0 );\n        keygeom.scale(1, .5, 1);\n        var key = new THREE.Mesh( keygeom, mat);\n        return key;\n    }\n\n    /**\n     * create and add a key\n     * @param {Number} transformPosition\n     * @param {Boolean} white\n     * @param {String} notation\n     * @param {Number} octave\n     * @param {THREE.Geometry} geometry\n     * @param {THREE.Material} material\n     * @return {Number} transform position\n     */\n    addKey(transformPosition, white, notation, octave, geometry, material) {\n        var key, color, rotation;\n        if (white) {\n            color = 'white';\n            key = this.createWhiteKey(geometry, material);\n        } else {\n            color = 'black';\n            key = this.createBlackKey(geometry, material);\n        }\n        transformPosition = this.applyKeyTransform(key, transformPosition, white);\n        this._keys.push({\n            type: color,\n            object: key,\n            octave: octave + this._startingOctave,\n            colortween: {},\n            notation: notation,\n            originalRotation: {\n                x: key.rotation.x,\n                y: key.rotation.y,\n                z: key.rotation.z }\n        });\n        this.add(key,'key_' + notation);\n        return transformPosition;\n    }\n\n    /**\n     * apply key transform\n     * @param {THREE.Mesh} keymesh\n     * @param {Number} transformPosition\n     * @param {Boolean} whitekey\n     */\n    applyKeyTransform(keymesh, transformPosition, whitekey) {}\n\n    /**\n     * find the key for a specific notation\n     * @param notation\n     * @returns {Array}\n     */\n    findKeyObjectsForNotation(notation) {\n        var keys = [];\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c].notation === notation) {\n                keys.push(this._keys[c]);\n            }\n        }\n        return keys;\n    }\n\n    /**\n     * find specific key object for notation and octave\n     * @param notation\n     * @param octave\n     */\n    findKeyObjectForNotation(notation, octave) {\n        var notationOffset = Note.indexOfNotation(this._startingNote);\n        var indx = octave * Note.sharpNotations.length + Note.sharpNotations.indexOf(notation) - notationOffset;\n        return this._keys[indx];\n    }\n\n    /**\n     * on song data\n     * @param data\n     */\n    onSongData(data) {\n        var notation = Note.MIDItoNotation(data.note);\n        var key = this.findKeyObjectsForNotation(notation);\n        this.toggleKeyPressed(key[0], data.velocity / 127);\n    }\n}\n","import BaseKeyboard from './basekeyboard.es6';\nimport Input from '../../input.es6';\nimport Note from '../../musictheory/note.es6';\nimport Style from '../../themeing/style.es6';\nimport Utils from '../../utils.es6';\nimport TonePlayback from '../../toneplayback.es6';\n\nexport default class CircularKeyboard extends BaseKeyboard {\n    /**\n     * apply key transform\n     * @param {THREE.Mesh} keymesh\n     * @param {Number} position in keyboard\n     * @param {Number} keyindex\n     * @param {Boolean} whitekey\n     */\n    applyKeyTransform(keymesh, transformPosition, whitekey) {\n        var rotate = 0;\n        var extraRotate = 0;\n        if (whitekey) {\n            rotate = (Math.PI * 2) / 14;\n        } else {\n            extraRotate = (Math.PI * 2) / 28;\n        }\n        keymesh.rotation.z = transformPosition + rotate + extraRotate;\n\n        return transformPosition + rotate;\n    }\n\n    /**\n     * setup scene\n     * @param geometry\n     * @param material\n     */\n    setupScene(geometry, material) {\n        super.setupScene(geometry, material);\n        this.group.position.z = -400;\n        this.group.scale.set(10, 10, 10);\n    }\n}\n","import BaseKeyboard from './basekeyboard.es6';\nimport Input from '../../input.es6';\nimport Note from '../../musictheory/note.es6';\nimport Style from '../../themeing/style.es6';\nimport Utils from '../../utils.es6';\nimport TonePlayback from '../../toneplayback.es6';\n\nexport default class TraditionalKeyboard extends BaseKeyboard {\n    onInitialize(params) {\n        super.onInitialize(params);\n\n        /**\n         * how much rotation occurs on keypress\n         * @type {number}\n         * @private\n         */\n        this._rotationOnPress = Math.PI/64;\n    }\n\n    /**\n     * apply key transform\n     * @param {THREE.Mesh} keymesh\n     * @param {Number} position in keyboard\n     * @param {Boolean} whitekey\n     * @return {Number} current position\n     */\n    applyKeyTransform(keymesh, transformPosition, whitekey) {\n        var translate = 2;\n        if (!whitekey) {\n            keymesh.position.y = 5;\n            keymesh.position.z = 1;\n            keymesh.position.x = transformPosition +1;\n            translate = 0;\n        } else {\n            keymesh.position.x = transformPosition +2;\n        }\n        keymesh.rotation.x = 0;\n        return transformPosition + translate;\n    }\n\n    /**\n     * setup scene\n     * @param geometry\n     * @param material\n     */\n    setupScene(geometry, material) {\n        var lastTransformPosition = super.setupScene(geometry, material);\n        this.group.position.x = -lastTransformPosition/2 * 10;\n        this.group.position.z = -200;\n        this.group.position.y = -200;\n        this.group.rotation.x = -Math.PI/2;\n        this.group.scale.set(10, 10, 10);\n    }\n}\n","import BaseGroup from '../../node_modules/trivr/src/basegroup.es6';\nimport Style from '../themeing/style.es6';\n\nexport default class Lighting extends BaseGroup {\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {\n        var light = new THREE.HemisphereLight( Style.lighting.hemisphere.top, Style.lighting.hemisphere.bottom, 4 );\n        var spotLight = new THREE.SpotLight( Style.lighting.spotlight );\n        spotLight.position.set( 0, 0, 400 );\n        spotLight.rotation.x = Math.PI / 2;\n\n        spotLight.shadow.mapSize.width = 1024;\n        spotLight.shadow.mapSize.height = 1024;\n\n        spotLight.shadow.camera.near = 100;\n        spotLight.shadow.camera.far = 400;\n        spotLight.shadow.camera.fov = 30;\n\n        this.add(spotLight);\n        this.add(light);\n    }\n}","import Shaders from './../shaders.es6';\nimport BaseGroup from '../../node_modules/trivr/src/basegroup.es6';\nimport Style from '../themeing/style.es6';\nimport Utils from '../utils.es6';\nimport TonePlayback from '../toneplayback.es6';\n\nexport default class Metronome extends BaseGroup {\n    onInitialize() {\n        /**\n         * metronome hammers in scene\n         * @type {Array}\n         * @private\n         */\n        this._hammers = [];\n\n        /**\n         * synth\n         * @type {Tone}\n         * @private\n         */\n        //this._synth = new Tone.DrumSynth().toMaster();\n\n        /**\n         * tween targets\n         * @type {{drum: {animating: boolean, props: {}}}}\n         * @private\n         */\n        this._tweenTargets = {\n            drum: { animating: false, props: {} },\n        };\n\n        this.setHitColor();\n    }\n\n    /**\n     * set drum hit/trigger color\n     * @param hex\n     */\n    setHitColor(hex) {\n        if (hex) {\n            this._hitColor = Utils.decToRGB(hex, 100);\n        } else {\n            this._hitColor = Utils.decToRGB(Style.metronome.hammer.hitcolor, 100);\n        }\n    }\n\n    onCreate(scenecollection, mycollection) {\n        //this.addHammer('right', Math.PI/64, Math.PI * 2, 'C4');\n        //this.addHammer('left', Math.PI/128, Math.PI/4, 'A4');\n        this.addHammer('up', Math.PI/128, Math.PI/2, 'G4');\n        this.addHammer('down', Math.PI/32, 0, 'F3');\n        this.addDrum();\n    }\n\n    /**\n     * on render\n     * @param scenecollection\n     * @param mycollection\n     */\n    onRender(scenecollection, mycollection) {\n        this.animateHammers();\n        this.animateDrum();\n    }\n\n    /**\n     * render cycle for drum\n     */\n    animateDrum() {\n        if (this._tweenTargets.drum.animating) {\n            this.drum.position.z = this._tweenTargets.drum.props.zPosition;\n            this.drum.material.bumpScale = this._tweenTargets.drum.props.bumpscale;\n            this.drum.material.color.setRGB(\n                this._tweenTargets.drum.props.r/100,\n                this._tweenTargets.drum.props.g/100,\n                this._tweenTargets.drum.props.b/100 );\n        }\n    }\n\n    /**\n     * render cycle for hammers\n     */\n    animateHammers() {\n        for (var c = 0; c < this._hammers.length; c++) {\n            var hammer = this._hammers[c];\n\n            if (hammer.animatingGlow) {\n                hammer.glow.material.color.setRGB(\n                    hammer.glowColor.r/100,\n                    hammer.glowColor.g/100,\n                    hammer.glowColor.b/100 );\n            }\n\n            var newrotation = hammer.pivot.rotation[hammer.rotationaxis] + hammer.direction * hammer.rate;\n\n            if (Math.abs(newrotation) > Math.PI - Math.PI/16) {\n                hammer.direction *= -1;\n                newrotation = Math.abs(newrotation)/newrotation * (Math.PI - Math.PI/16);\n                this.triggerDrum(hammer);\n            }\n            hammer.pivot.rotation[hammer.rotationaxis] = newrotation;\n        }\n    }\n\n    /**\n     * sound the drum, the hammer hit it\n     * @param hammer\n     */\n    triggerDrum(hammer) {\n        TonePlayback.noteOn(TonePlayback.SYNTHDRUM, hammer.note, 10, 1/8);\n       // this._synth.triggerAttackRelease(hammer.note, \"16n\");\n        hammer.animatingGlow = true;\n        var startcolor = Utils.decToRGB(Style.metronome.hammer.color, 100);\n        var endcolor = this._hitColor;\n        hammer.glowColor.r = startcolor.r;\n        hammer.glowColor.g = startcolor.g;\n        hammer.glowColor.b = startcolor.b;\n        createjs.Tween.get(hammer.glowColor)\n            .to({ r: endcolor.r, g: endcolor.g, b: endcolor.b }, 500)\n            .to({ r: startcolor.r, g: startcolor.g, b: startcolor.b }, 500)\n            .wait(100) // wait a few ticks, or the render cycle won't pick up the changes with the flag\n            .call( function (scope) { scope.animatingGlow = false; } );\n\n        var startcolor = Utils.decToRGB(Style.metronome.drum.color, 100);\n        var endcolor = this._hitColor;\n        this._tweenTargets.drum.props.r = startcolor.r;\n        this._tweenTargets.drum.props.g = startcolor.g;\n        this._tweenTargets.drum.props.b = startcolor.b;\n        this._tweenTargets.drum.props.zPosition = -400;\n        this._tweenTargets.drum.props.bumpscale = 0;\n        this._tweenTargets.drum.animating = true;\n        this._tweenTargets.drum.currentTween = createjs.Tween.get(this._tweenTargets.drum.props)\n            .to({\n                r: endcolor.r, g: endcolor.g, b: endcolor.b,\n                bumpscale: 1.5,\n                zPosition: -400 + hammer.direction * 50 }, 150)\n            .to({\n                r: startcolor.r, g: startcolor.g, b: startcolor.b,\n                bumpscale: 0,\n                zPosition: -400 }, 150)\n            .wait(100) // wait a few ticks, or the render cycle won't pick up the changes with the flag\n            .call( () => { this._tweenTargets.drum.animating = false; } );\n    }\n\n    /**\n     * add center drum\n     */\n    addDrum() {\n        var drumgeom = new THREE.CircleGeometry( 30, 24 );\n        drumgeom.scale(1,1, 0.75);\n        var mapHeight = new THREE.TextureLoader().load(Style.metronome.drum.bumpmap);\n        mapHeight.anisotropy = 4;\n        mapHeight.repeat.set(1, 1);\n        mapHeight.wrapS = mapHeight.wrapT = THREE.ClampToEdgeWrapping;\n        mapHeight.format = THREE.RGBFormat;\n\n        var material = new THREE.MeshPhongMaterial( {\n            color: Style.metronome.drum.color,\n            emissive: Style.metronome.drum.emissive,\n            specular: Style.metronome.drum.specular,\n            bumpMap: mapHeight,\n            bumpScale: 0,\n        } );\n\n        this.drum = new THREE.Mesh( drumgeom, material );\n        this.drum.position.z = -400;\n        this.add(this.drum, 'drum');\n    }\n\n    /**\n     * add metronome hammer\n     * @param origin\n     * @param rate\n     * @param offset\n     */\n    addHammer(origin, rate, offset, tone) {\n        var hammergeom = new THREE.SphereGeometry(5);\n        var centerpivot = new THREE.Object3D();\n\n        var textureCube = new THREE.CubeTextureLoader().load(Style.metronome.hammer.refractioncube);\n        textureCube.mapping = THREE.CubeRefractionMapping;\n\n        var innermaterial = new THREE.MeshBasicMaterial( {\n            envMap: textureCube } );\n\n        var outermaterial = new THREE.MeshBasicMaterial( {\n            color: Style.metronome.hammer.color,\n            transparent: true,\n            wireframe: true,\n            opacity: 0.5 } );\n\n\n        var hammer = new THREE.Mesh( hammergeom, innermaterial );\n        hammer.name = 'ball';\n        centerpivot.add(hammer);\n        centerpivot.position.z = -400;\n\n        var glow = new THREE.Mesh( hammergeom.clone(), outermaterial );\n        glow.name = 'glow';\n        glow.scale.multiplyScalar(1.2);\n        centerpivot.add(glow);\n\n        var rotationaxis;\n        switch (origin) {\n            case 'right':\n                glow.position.x = -100;\n                centerpivot.position.x = -100;\n                hammer.position.x = -100;\n                rotationaxis = 'y';\n                break;\n\n            case 'left':\n                glow.position.x = 100;\n                centerpivot.position.x = 100;\n                hammer.position.x = 100;\n                rotationaxis = 'y';\n                break;\n\n            case 'down':\n                glow.position.y = 100;\n                centerpivot.position.y = 100;\n                hammer.position.y = 100;\n                rotationaxis = 'x';\n                break;\n\n            case 'up':\n                glow.position.y = -100;\n                centerpivot.position.y = -100;\n                hammer.position.y = -100;\n                rotationaxis = 'x';\n                break;\n        }\n\n        centerpivot.rotation[rotationaxis] += offset;\n\n        this._hammers.push( {\n            animatingGlow: false,\n            glow: glow,\n            glowColor: {},\n            hammer: hammer,\n            pivot: centerpivot,\n            direction: 1,\n            rate: rate,\n            rotationaxis: rotationaxis,\n            note: tone }\n        );\n\n        this.add(centerpivot, 'hammer');\n    }\n}\n","import BaseGroup from '../../node_modules/trivr/src/basegroup.es6';\nimport Style from '../themeing/style.es6';\nimport Utils from '../utils.es6';\nimport Shaders from '../shaders.es6';\n\nexport default class ParticleFlock extends BaseGroup {\n    /**\n     * on create scene\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {\n        this.flockGPURenderer = {\n            gpuCompute: null,\n            velocityVariable: null,\n            positionVariable: null,\n            positionUniforms: null,\n            velocityUniforms: null,\n            uniforms: null\n        };\n\n        this._color;\n\n        /* TEXTURE WIDTH FOR SIMULATION */\n        this.WIDTH = 64;\n\n        var BIRDS = this.WIDTH * this.WIDTH;\n\n        this.mouseX = 0;\n        this.mouseY = 0;\n        this.BOUNDS = 1000;\n        this.BOUNDS_HALF = this.BOUNDS / 2;\n\n        this.immersed = false;\n        this.immersionLevels = { min: -200.0, max: 2000.0 };\n        this.initComputeRenderer(scene.renderer);\n\n        /*document.addEventListener( 'mousemove', e => this.onDocumentMouseMove(e), false );\n        document.addEventListener( 'touchstart', e => this.onDocumentTouchStart(e), false );\n        document.addEventListener( 'touchmove', e => this.onDocumentTouchMove(e), false );*/\n        this.initBirds();\n    }\n\n    onDocumentMouseMove( event ) {\n        this.mouseX = event.clientX - 600;//- windowHalfX;\n        this.mouseY = event.clientY - 600;//- windowHalfY;\n    }\n\n    onDocumentTouchStart( event ) {\n        if ( event.touches.length === 1 ) {\n\n            event.preventDefault();\n\n            this.mouseX = event.touches[ 0 ].pageX - 600;//- windowHalfX;\n            this.mouseY = event.touches[ 0 ].pageY - 600;//- windowHalfY;\n\n        }\n    }\n\n    onDocumentTouchMove( event ) {\n\n        if ( event.touches.length === 1 ) {\n\n            event.preventDefault();\n\n            this.mouseX = event.touches[ 0 ].pageX - 600;//windowHalfX;\n            this.mouseY = event.touches[ 0 ].pageY - 600;//windowHalfY;\n\n        }\n    }\n\n    /**\n     * set drum hit/trigger color\n     * @param hex\n     */\n    setColor(hex) {\n        var color;\n        if (hex) {\n            color = Utils.decToRGB(hex, 1);\n            this.immersed = true;\n        } else {\n            color = Utils.decToRGB(Style.floatingparticles.color, 1);\n            this.immersed = false;\n        }\n\n        if (!this._color ) {\n            this._color = color;\n            this.mesh.material.uniforms.color.value = [ this._color.r, this._color.g, this._color.b ];\n        } else {\n            this._color.animating = true;\n            createjs.Tween.get(this._color)\n                .to(color, 2000)\n                .wait(100) // wait a few ticks, or the render cycle won't pick up the changes with the flag\n                .call( function() { this.animating = false; });\n        }\n    }\n\n    onRender(time) {\n\n        if (this.immersed && this.flockGPURenderer.positionUniforms.depth.value < this.immersionLevels.max) {\n            this.flockGPURenderer.positionUniforms.depth.value += 1.0;\n        }\n\n        if (!this.immersed && this.flockGPURenderer.positionUniforms.depth.value > this.immersionLevels.min) {\n            this.flockGPURenderer.positionUniforms.depth.value -= 1.0;\n        }\n\n        var delta = time.delta / 1000;\n        if (delta > 1) delta = 1;\n        this.flockGPURenderer.positionUniforms.time.value = time.now;\n        this.flockGPURenderer.positionUniforms.delta.value = delta;\n        this.flockGPURenderer.velocityUniforms.time.value = time.now;\n        this.flockGPURenderer.velocityUniforms.delta.value = delta;\n        this.flockGPURenderer.uniforms.time.value = time.now;\n        this.flockGPURenderer.uniforms.delta.value = delta;\n        //this.flockGPURenderer.uniforms.depth.value = -200.0;\n\n        //this.flockGPURenderer.velocityUniforms.predator.value.set( 0.5 * this.mouseX / 600, - 0.5 * this.mouseY / 600, 0 );\n        this.flockGPURenderer.gpuCompute.compute();\n\n        this.flockGPURenderer.uniforms.texturePosition.value = this.flockGPURenderer.gpuCompute.getCurrentRenderTarget( this.flockGPURenderer.positionVariable ).texture;\n        this.flockGPURenderer.uniforms.textureVelocity.value = this.flockGPURenderer.gpuCompute.getCurrentRenderTarget( this.flockGPURenderer.velocityVariable ).texture;\n\n        if (this._color.animating) {\n            this.mesh.material.uniforms.color.value = [ this._color.r, this._color.g, this._color.b ];\n        }\n    }\n\n    initComputeRenderer(renderer) {\n        this.flockGPURenderer.gpuCompute = new GPUComputationRenderer( this.WIDTH, this.WIDTH, renderer );\n        var dtPosition = this.flockGPURenderer.gpuCompute.createTexture();\n        var dtVelocity = this.flockGPURenderer.gpuCompute.createTexture();\n        this.fillPositionTexture( dtPosition );\n        this.fillVelocityTexture( dtVelocity );\n\n        this.flockGPURenderer.velocityVariable = this.flockGPURenderer.gpuCompute.addVariable( \"textureVelocity\", Shaders.flockvelocity.fragment, dtVelocity );\n        this.flockGPURenderer.positionVariable = this.flockGPURenderer.gpuCompute.addVariable( \"texturePosition\", Shaders.flockposition.fragment, dtPosition );\n\n        this.flockGPURenderer.gpuCompute.setVariableDependencies( this.flockGPURenderer.velocityVariable, [ this.flockGPURenderer.positionVariable, this.flockGPURenderer.velocityVariable ] );\n        this.flockGPURenderer.gpuCompute.setVariableDependencies( this.flockGPURenderer.positionVariable, [ this.flockGPURenderer.positionVariable, this.flockGPURenderer.velocityVariable ] );\n\n        this.flockGPURenderer.positionUniforms = this.flockGPURenderer.positionVariable.material.uniforms;\n        this.flockGPURenderer.velocityUniforms = this.flockGPURenderer.velocityVariable.material.uniforms;\n\n        this.flockGPURenderer.positionUniforms.time = { value: 0.0 };\n        this.flockGPURenderer.positionUniforms.delta = { value: 0.0 };\n        this.flockGPURenderer.positionUniforms.depth = { value: -200.0 };\n        this.flockGPURenderer.velocityUniforms.time = { value: 1.0 };\n        this.flockGPURenderer.velocityUniforms.delta = { value: 0.0 };\n        this.flockGPURenderer.velocityUniforms.testing = { value: 1.0 };\n        this.flockGPURenderer.velocityUniforms.seperationDistance = { value: 1.0 };\n        this.flockGPURenderer.velocityUniforms.alignmentDistance = { value: 1.0 };\n        this.flockGPURenderer.velocityUniforms.cohesionDistance = { value: 1.0 };\n        this.flockGPURenderer.velocityUniforms.freedomFactor = { value: 1.0 };\n        this.flockGPURenderer.velocityUniforms.predator = { value: new THREE.Vector3() };\n        this.flockGPURenderer.velocityVariable.material.defines.BOUNDS = this.BOUNDS.toFixed( 2 );\n\n        this.flockGPURenderer.velocityVariable.wrapS = THREE.RepeatWrapping;\n        this.flockGPURenderer.velocityVariable.wrapT = THREE.RepeatWrapping;\n        this.flockGPURenderer.positionVariable.wrapS = THREE.RepeatWrapping;\n        this.flockGPURenderer.positionVariable.wrapT = THREE.RepeatWrapping;\n\n        var error = this.flockGPURenderer.gpuCompute.init();\n        if ( error !== null ) {\n            console.error( error );\n        }\n    }\n\n    initBirds() {\n        var geometry = new THREE.SwarmParticleGeometry(this.WIDTH);\n\n        // For Vertex and Fragment\n        this.flockGPURenderer.uniforms = {\n            color: { value: [0.0,0.0,0.0] },\n            texturePosition: { value: null },\n            textureVelocity: { value: null },\n            time: { value: 1.0 },\n            delta: { value: 0.0 }\n        };\n\n        // ShaderMaterial\n        var material = new THREE.ShaderMaterial( {\n            uniforms:       this.flockGPURenderer.uniforms,\n            vertexShader:   Shaders.flock.vertex,\n            fragmentShader: Shaders.flock.fragment,\n            //side: THREE.DoubleSide\n            //transparent: true\n        });\n\n        this.mesh = new THREE.Mesh( geometry, material );\n        this.mesh.rotation.y = Math.PI / 2;\n        // this.mesh.position.z = -100;\n        // this.mesh.position.y = -10;\n        /*this.mesh.scale.x = .2;\n        this.mesh.scale.y = .2;\n        this.mesh.scale.z = .2;*/\n        this.mesh.matrixAutoUpdate = true;\n        this.mesh.updateMatrix();\n\n        this.add(this.mesh);\n        this.setColor();\n\n    }\n\n    fillPositionTexture( texture ) {\n        var theArray = texture.image.data;\n\n        for ( var k = 0, kl = theArray.length; k < kl; k += 4 ) {\n\n            var x = (Math.random() * this.BOUNDS - this.BOUNDS_HALF)/1;\n            var y = (Math.random() * this.BOUNDS - this.BOUNDS_HALF)/1;\n            var z = (Math.random() * this.BOUNDS - this.BOUNDS_HALF)/1;\n\n            theArray[ k + 0 ] = x;\n            theArray[ k + 1 ] = y;\n            theArray[ k + 2 ] = z;\n            theArray[ k + 3 ] = 1;\n        }\n    }\n\n    fillVelocityTexture( texture ) {\n        var theArray = texture.image.data;\n\n        for ( var k = 0, kl = theArray.length; k < kl; k += 4 ) {\n            var x = Math.random() - 0.5;\n            var y = Math.random() - 0.5;\n            var z = Math.random() - 0.5;\n\n            theArray[ k + 0 ] = x * 10;\n            theArray[ k + 1 ] = y * 10;\n            theArray[ k + 2 ] = z * 10;\n            theArray[ k + 3 ] = 1;\n        }\n    }\n\n}\n","import Note from './musictheory/note.es6';\n\nexport default class {\n    constructor(params, cb) {\n        /**\n         * event callback\n         */\n        this._callback = cb;\n\n        /**\n         * JSON config\n         */\n        this._config = params;\n\n        /**\n         * keys down\n         * @type {Array}\n         * @private\n         */\n        this._keys = [];\n\n        /**\n         * potential keys pressed in order\n         * @type {string[]}\n         * @private\n         */\n        this._potentialKeys = [\n            '`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '-', '+',\n            'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']', '\\\\',\n            'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';', '\\''\n        ];\n\n        document.addEventListener('keydown', event => this.onKeyDown(event));\n        document.addEventListener('keyup', event => this.onKeyUp(event));\n    }\n\n    /**\n     * get keys down\n     * @param mapping\n     */\n    getKeysDown() {\n        var down = [];\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c] > 0) {\n                var octave = 0;\n                if (c >= this._keys.length/2) { octave = 1; }\n                down.push( { notation: Note.notationAtIndex(c), octave: octave + 2, index: c, velocity: this._keys[c]} );\n            }\n        }\n        return down;\n    }\n\n    /**\n     * on key down\n     * @param event\n     */\n    onKeyDown(event) {\n        var key = this._potentialKeys.indexOf(event.key.toLowerCase());\n        if (key !== -1 && (this._keys[key] === 0 || !this._keys[key])) {\n            this._keys[key] = 1.0; // on an actual MIDI keyboard, we'd have a velocity\n            var octave = Math.floor(key / Note.sharpNotations.length);\n            this._callback({\n                notation: Note.notationAtIndex(key),\n                octave: octave + this._config.startoctave,\n                //index: key,\n                velocity: 1.0,\n                action: 'press' });\n        }\n    }\n\n    /**\n     * on key down\n     * @param event\n     */\n    onKeyUp(event) {\n        var key = this._potentialKeys.indexOf(event.key.toLowerCase());\n        if (key !== -1) {\n            this._keys[key] = 0.0; // on an actual MIDI keyboard, we'd have a velocity\n            var octave = Math.floor(key / Note.sharpNotations.length);\n            this._callback({\n                notation: Note.notationAtIndex(key),\n                octave: octave + this._config.startoctave,\n                //index: key,\n                velocity: 0,\n                action: 'release' });\n        }\n    }\n}\n","export default {\n  \"explosion\": {\n    \"fragment\": \"varying float noise; uniform sampler2D tExplosion;  float random( vec3 scale, float seed ){   return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed ) ; }  void main() {    float r = .01 * random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );   vec2 tPos = vec2( 0, 1.0 - 1.3 * noise + r );   vec4 color = texture2D( tExplosion, tPos );   gl_FragColor = vec4( color.rgb, 1.0 );  }\",\n    \"vertex\": \"  vec3 mod289(vec3 x) {   return x - floor(x * (1.0 / 289.0)) * 289.0; }  vec4 mod289(vec4 x) {   return x - floor(x * (1.0 / 289.0)) * 289.0; }  vec4 permute(vec4 x) {   return mod289(((x*34.0)+1.0)*x); }  vec4 taylorInvSqrt(vec4 r) {   return 1.79284291400159 - 0.85373472095314 * r; }  vec3 fade(vec3 t) {   return t*t*t*(t*(t*6.0-15.0)+10.0); }  float cnoise(vec3 P) {   vec3 Pi0 = floor(P);   vec3 Pi1 = Pi0 + vec3(1.0);   Pi0 = mod289(Pi0);   Pi1 = mod289(Pi1);   vec3 Pf0 = fract(P);   vec3 Pf1 = Pf0 - vec3(1.0);   vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);   vec4 iy = vec4(Pi0.yy, Pi1.yy);   vec4 iz0 = Pi0.zzzz;   vec4 iz1 = Pi1.zzzz;    vec4 ixy = permute(permute(ix) + iy);   vec4 ixy0 = permute(ixy + iz0);   vec4 ixy1 = permute(ixy + iz1);    vec4 gx0 = ixy0 * (1.0 / 7.0);   vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;   gx0 = fract(gx0);   vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);   vec4 sz0 = step(gz0, vec4(0.0));   gx0 -= sz0 * (step(0.0, gx0) - 0.5);   gy0 -= sz0 * (step(0.0, gy0) - 0.5);    vec4 gx1 = ixy1 * (1.0 / 7.0);   vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;   gx1 = fract(gx1);   vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);   vec4 sz1 = step(gz1, vec4(0.0));   gx1 -= sz1 * (step(0.0, gx1) - 0.5);   gy1 -= sz1 * (step(0.0, gy1) - 0.5);    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);   vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);   vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);   vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);   vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);   vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);   vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);   vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));   g000 *= norm0.x;   g010 *= norm0.y;   g100 *= norm0.z;   g110 *= norm0.w;   vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));   g001 *= norm1.x;   g011 *= norm1.y;   g101 *= norm1.z;   g111 *= norm1.w;    float n000 = dot(g000, Pf0);   float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));   float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));   float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));   float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));   float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));   float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));   float n111 = dot(g111, Pf1);    vec3 fade_xyz = fade(Pf0);   vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);   vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);   float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);   return 2.2 * n_xyz; }  float pnoise(vec3 P, vec3 rep) {   vec3 Pi0 = mod(floor(P), rep);   vec3 Pi1 = mod(Pi0 + vec3(1.0), rep);   Pi0 = mod289(Pi0);   Pi1 = mod289(Pi1);   vec3 Pf0 = fract(P);   vec3 Pf1 = Pf0 - vec3(1.0);   vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);   vec4 iy = vec4(Pi0.yy, Pi1.yy);   vec4 iz0 = Pi0.zzzz;   vec4 iz1 = Pi1.zzzz;    vec4 ixy = permute(permute(ix) + iy);   vec4 ixy0 = permute(ixy + iz0);   vec4 ixy1 = permute(ixy + iz1);    vec4 gx0 = ixy0 * (1.0 / 7.0);   vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;   gx0 = fract(gx0);   vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);   vec4 sz0 = step(gz0, vec4(0.0));   gx0 -= sz0 * (step(0.0, gx0) - 0.5);   gy0 -= sz0 * (step(0.0, gy0) - 0.5);    vec4 gx1 = ixy1 * (1.0 / 7.0);   vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;   gx1 = fract(gx1);   vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);   vec4 sz1 = step(gz1, vec4(0.0));   gx1 -= sz1 * (step(0.0, gx1) - 0.5);   gy1 -= sz1 * (step(0.0, gy1) - 0.5);    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);   vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);   vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);   vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);   vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);   vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);   vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);   vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));   g000 *= norm0.x;   g010 *= norm0.y;   g100 *= norm0.z;   g110 *= norm0.w;   vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));   g001 *= norm1.x;   g011 *= norm1.y;   g101 *= norm1.z;   g111 *= norm1.w;    float n000 = dot(g000, Pf0);   float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));   float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));   float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));   float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));   float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));   float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));   float n111 = dot(g111, Pf1);    vec3 fade_xyz = fade(Pf0);   vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);   vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);   float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);   return 2.2 * n_xyz; }  varying float noise; uniform float time;  float turbulence( vec3 p ) {   float w = 100.0;   float t = -.5;   for (float f = 1.0 ; f <= 10.0 ; f++ ){     float power = pow( 2.0, f );     t += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );   }   return t; }  void main() {   noise = 10.0 *  -.10 * turbulence( .5 * normal + time );   float b = 5.0 * pnoise( 0.05 * position + vec3( 2.0 * time ), vec3( 100.0 ) );   float displacement = - 10. * noise + b;    vec3 newPosition = position + normal * displacement;   gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );  }\"\n  },\n  \"flock\": {\n    \"fragment\": \"uniform vec3 color;  void main() {     gl_FragColor = vec4( color, 0.1 ); } \",\n    \"vertex\": \"attribute vec2 reference; attribute float vertex;  uniform sampler2D texturePosition; uniform sampler2D textureVelocity;  uniform float time;  void main() {      vec4 tmpPos = texture2D( texturePosition, reference );     vec3 pos = tmpPos.xyz;     vec3 velocity = normalize(texture2D( textureVelocity, reference ).xyz);      vec3 newPosition = position;      if ( vertex == 4.0 || vertex == 7.0 ) {                 newPosition.y = sin( tmpPos.w ) * 5.;     }      newPosition = mat3( modelMatrix ) * newPosition;       velocity.z *= -1.;     float xz = length( velocity.xz );     float xyz = 1.;     float x = sqrt( 1. - velocity.y * velocity.y );      float cosry = velocity.x / xz;     float sinry = velocity.z / xz;      float cosrz = x / xyz;     float sinrz = velocity.y / xyz;      mat3 maty =  mat3(         cosry, 0, -sinry,         0    , 1, 0     ,         sinry, 0, cosry      );      mat3 matz =  mat3(         cosrz , sinrz, 0,         -sinrz, cosrz, 0,         0     , 0    , 1     );      newPosition =  maty * matz * newPosition;     newPosition += pos;     gl_Position = projectionMatrix *  viewMatrix  * vec4( newPosition, 1.0 ); } \"\n  },\n  \"flockposition\": {\n    \"fragment\": \"uniform float time; uniform float delta; uniform float depth;  void main() {      vec2 uv = gl_FragCoord.xy / resolution.xy;     vec4 tmpPos = texture2D( texturePosition, uv );     vec3 position = tmpPos.xyz;     vec3 velocity = texture2D( textureVelocity, uv ).xyz;      float phase = tmpPos.w;      phase = mod( ( phase + delta +         length( velocity.xz ) * delta * 3. +         max( velocity.y, 0.0 ) * delta * 6. ), 62.83 );      vec3 calculatedPos = vec3( position + velocity * delta * 15.);     calculatedPos.y = clamp( calculatedPos.y, -2000.0, depth);     gl_FragColor = vec4( calculatedPos, phase);  } \"\n  },\n  \"flockvelocity\": {\n    \"fragment\": \"uniform float time; uniform float testing; uniform float delta; uniform float seperationDistance; uniform float alignmentDistance; uniform float cohesionDistance; uniform float freedomFactor;  const float width = resolution.x; const float height = resolution.y;  const float PI = 3.141592653589793; const float PI_2 = PI * 2.0;  float zoneRadius = 160.0; float zoneRadiusSquared = 25600.0;  float separationThresh = 0.45; float alignmentThresh = 0.65;  const float UPPER_BOUNDS = BOUNDS; const float LOWER_BOUNDS = -UPPER_BOUNDS;  const float SPEED_LIMIT = 9.0;  float rand(vec2 co){     return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }  void main() {      zoneRadius = seperationDistance + alignmentDistance + cohesionDistance;     separationThresh = seperationDistance / zoneRadius;     alignmentThresh = ( seperationDistance + alignmentDistance ) / zoneRadius;     zoneRadiusSquared = zoneRadius * zoneRadius;       vec2 uv = gl_FragCoord.xy / resolution.xy;     vec3 flockposition, flockvelocity;      vec3 selfPosition = texture2D( texturePosition, uv ).xyz;     vec3 selfVelocity = texture2D( textureVelocity, uv ).xyz;      float dist;     vec3 dir;     float distSquared;      float seperationSquared = seperationDistance * seperationDistance;     float cohesionSquared = cohesionDistance * cohesionDistance;      float f;     float percent;      vec3 velocity = selfVelocity;      float limit = SPEED_LIMIT;                                      vec3 central = vec3( 0., 0., 0. );     dir = selfPosition - central;     dist = length( dir );      dir.y *= 2.5;     velocity -= normalize( dir ) * delta * 5.;      for (float y=0.0;y<height;y++) {         for (float x=0.0;x<width;x++) {              vec2 ref = vec2( x + 0.5, y + 0.5 ) / resolution.xy;             flockposition = texture2D( texturePosition, ref ).xyz;              dir = flockposition - selfPosition;             dist = length(dir);              if (dist < 0.0001) continue;              distSquared = dist * dist;              if (distSquared > zoneRadiusSquared ) continue;              percent = distSquared / zoneRadiusSquared;              if ( percent < separationThresh ) {                                  f = (separationThresh / percent - 1.0) * delta;                 velocity -= normalize(dir) * f;              } else if ( percent < alignmentThresh ) {                                  float threshDelta = alignmentThresh - separationThresh;                 float adjustedPercent = ( percent - separationThresh ) / threshDelta;                  flockvelocity = texture2D( textureVelocity, ref ).xyz;                  f = ( 0.5 - cos( adjustedPercent * PI_2 ) * 0.5 + 0.5 ) * delta;                 flockvelocity += normalize(flockvelocity) * f;              } else {                                  float threshDelta = 1.0 - alignmentThresh;                 float adjustedPercent = ( percent - alignmentThresh ) / threshDelta;                  f = ( 0.5 - ( cos( adjustedPercent * PI_2 ) * -0.5 + 0.5 ) ) * delta;                  velocity += normalize(dir) * f;              }          }      }                    if ( length( velocity ) > limit ) {         velocity = normalize( velocity ) * limit;     }      gl_FragColor = vec4( velocity, 1.0 );  } \"\n  },\n  \"glow\": {\n    \"fragment\": \"uniform vec3 glowColor; varying float intensity; void main()  {  vec3 glow = glowColor * intensity;     gl_FragColor = vec4( glow, 1.0 ); }\",\n    \"vertex\": \"uniform vec3 viewVector; uniform float c; uniform float p; varying float intensity; void main()  {     vec3 vNormal = normalize( normalMatrix * normal );  vec3 vNormel = normalize( normalMatrix * viewVector );  intensity = pow( c - dot(vNormal, vNormel), p );       gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }\"\n  }\n}","export default {\n    neutral: {\n        red: 0x7A6869,\n        darkred: 0x2d2627,\n        //green: 0x65876E,\n\n        green: 0xc0c4b6,\n        lightred: 0xeadfdb,\n        grayblue: 0xadaeb0,\n        brown: 0xd8c2b5,\n        orange: 0xf2cfb3\n    },\n\n    neon: {\n        blue: 0x00ecff,\n        green: 0x7cff00,\n        yellow: 0xe3ff00,\n        orange: 0xffb400,\n        violet: 0xfd00ff\n    },\n\n    grayscale: [\n        0x000000,\n        0x2a2a2a,\n        0x5a5a5a,\n        0x8a8a8a,\n        0xaaaaaa,\n        0xffffff\n    ]\n}","import Colors from './colors.es6';\nexport default {\n    colorwheel: [       0xfffa00, 0xffcf00, 0xffa600, 0xff7d01,\n                        0xff2000, 0xf42494, 0x8b20bb, 0x0024ba,\n                        0x007ac7, 0x00b2d6, 0x02b801, 0x84ce00 ],\n\n\n    keys: {\n        normal: {\n            white: {\n                emissive: Colors.grayscale[3],\n                color: Colors.neutral.red\n            },\n            black: {\n                emissive: Colors.grayscale[1],\n                color: Colors.neutral.red\n            }\n        },\n        suggested: {\n            white: {\n                emissive: Colors.grayscale[2],\n                color: Colors.neon.green\n            },\n            black: {\n                emissive: Colors.grayscale[1],\n                color: Colors.neon.green\n            }\n        },\n        stronglySuggested: {\n            white: {\n                emissive: Colors.grayscale[2],\n                color: Colors.neon.orange\n            },\n            black: {\n                emissive: Colors.grayscale[1],\n                color: Colors.neon.orange\n            }\n        },\n\n\n    },\n\n    metronome: {\n        drum: {\n            bumpmap: './assets/images/ripplemap.jpg',\n            color: Colors.neutral.darkred,\n            hitcolor: Colors.grayscale[0],\n            emissive: Colors.grayscale[0],\n            specular: Colors.neutral.grayblue\n        },\n\n        hammer: {\n            refractioncube: [\n                './assets/images/nx.jpg',\n                './assets/images/ny.jpg',\n                './assets/images/nz.jpg',\n                './assets/images/nx.jpg',\n                './assets/images/ny.jpg',\n                './assets/images/nz.jpg' ],\n            color: Colors.neutral.red,\n            hitcolor: Colors.grayscale[0]\n        }\n    },\n\n    dome: {\n        color: Colors.neutral.darkred,\n        emissive: Colors.neutral.darkred,\n        specular: Colors.neutral.red\n    },\n\n    floatingparticles: {\n        sprite: './assets/images/snowflake1.png',\n        color: Colors.grayscale[2]\n    },\n\n    lighting: {\n        hemisphere: {\n            top: Colors.neutral.darkred,\n            bottom: Colors.neutral.green\n        },\n        spotlight: Colors.grayscale[1]\n    }\n}\n","import Note from './musictheory/note.es6';\n\nexport default {\n    SYNTHDRUM: 'synth_drum',\n    PIANO:     'acoustic_grand_piano',\n\n    playerState: 'ready',\n\n    /**\n     * instruments loaded\n     */\n    _instrumentsLoaded: [],\n\n    /**\n     * play midi file\n     * @param uri of midie file\n     */\n    play(uri) {\n        this.playerState = 'loading';\n        MIDI.Player.timeWarp = 1; // speed the song is played back\n        MIDI.Player.loadFile(uri,\n            () => this.onLoaded(),\n            () => this.onProgress(),\n            (err) => this.onError(err));\n    },\n\n    /**\n     * pause playing midi file\n     */\n    pause() {\n        this.playerState = 'paused';\n        MIDI.Player.pause();\n    },\n\n    /**\n     * resume playing midi file\n     */\n    resume() {\n        this.playerState = 'playing';\n        MIDI.Player.resume();\n    },\n\n    /**\n     * check if instrument is loaded\n     * @param instrument\n     * @returns {boolean}\n     */\n    isInstrumentLoaded(instrument) {\n        if (this._instrumentsLoaded.indexOf(instrument) !== -1) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    /**\n     * load instrument\n     * @param instrument\n     */\n    loadInstrument(instrument, path) {\n        MIDI.loadPlugin({\n            soundfontUrl: path,\n            instrument: instrument,\n            onprogress: (state, progress, instrument) => this.onInstrumentLoadProgress(state, progress, instrument),\n            onsuccess: (event) => this.onInstrumentLoaded(event),\n            onerror: (err) => this.onInstrumentLoadedError(err),\n        });\n    },\n\n    /**\n     * play a tone\n     * @param instrument\n     * @param notation\n     * @param duration\n     */\n    playTone(instrument, notation, midichannel, duration) {\n        if (!this.isInstrumentLoaded(instrument)) { return; }\n\n        MIDI.programChange(0, MIDI.GM.byName[instrument].number);\n        var delay = 0; // play one note every quarter second\n        var note = Note.notationToMIDI(notation); // the MIDI note\n        var velocity = 127; // how hard the note hits\n        // play the note\n        MIDI.setVolume(0, 127);\n        MIDI.noteOn(0, note, velocity, delay);\n\n        if (duration) {\n            MIDI.noteOff(0, note, delay + duration);\n        }\n    },\n\n    /**\n     * note on\n     * @param instrument\n     * @param notation\n     * @param midichannel\n     */\n    noteOn(instrument, notation, midichannel, duration) {\n        if (!this.isInstrumentLoaded(instrument)) { return; }\n        var note = Note.notationToMIDI(notation);\n        MIDI.programChange(midichannel, MIDI.GM.byName[instrument].number);\n        var velocity = 127; // how hard the note hits\n        MIDI.setVolume(0, 127);\n        MIDI.noteOn(midichannel, note, velocity, 0);\n\n        if (duration) {\n            MIDI.noteOff(midichannel, note, duration);\n        }\n    },\n\n    /**\n     * note off\n     * @param notation\n     * @param midichannel\n     * @param delay\n     */\n    noteOff(notation, midichannel, delay) {\n        if (!delay) { delay = 0; }\n        var note = Note.notationToMIDI(notation);\n        MIDI.noteOff(midichannel, note, delay);\n    },\n\n    /**\n     * add event listener\n     * @param eventtype\n     * @param callback\n     */\n    addEventListener(eventtype, callback) {\n        if (!this._listeners) { this._listeners = []; }\n        this._listeners.push( { type: eventtype, callback: callback });\n    },\n\n    /**\n     * on instrument loaded\n     * @param event\n     */\n    onInstrumentLoaded() {},\n\n    /**\n     * on instrument load progress\n     * @param state\n     * @param progress\n     * @param instrument\n     */\n    onInstrumentLoadProgress(state, progress, instrument) {\n        if (instrument && progress === 1) {\n            console.log(instrument + ' loaded');\n            this._instrumentsLoaded.push(instrument);\n        }\n    },\n\n    /**\n     * on instrument loaded error\n     * @param err\n     */\n    onInstrumentLoadedError(err) {\n        console.log('Instrument loading error', err);\n    },\n\n    onLoaded() {\n        MIDI.programChange(0, MIDI.GM.byName[this.PIANO].number);\n        MIDI.Player.start();\n        this.playerState = 'playing';\n        this.isPlaying = true;\n        MIDI.Player.addListener(data => this.onMIDIData(data));\n    },\n\n    onProgress() {\n        console.log('progress');\n    },\n\n    onError(err) {\n        console.log('error', err);\n    },\n\n    /**\n     * on midi data callback\n     * @param data\n     */\n    onMIDIData(data) {\n        if (this._listeners) {\n            for (var c = 0; c < this._listeners.length; c++) {\n                if (this._listeners[c].type === 'mididata') {\n                    console.log(data);\n                    this._listeners[c].callback.apply(this, [{ note: data.note - 21, velocity: data.velocity }]);\n                }\n            }\n        }\n    }\n}","import Note from './musictheory/note.es6';\n\nexport default {\n    /**\n     * apply n number of properties to an object\n     * @param object\n     * @param {Object} props\n     * @param {String} namespace of property (prepend key name)\n     */\n    copyPropsTo(object, props, namespace) {\n        if (!namespace) { namespace = ''; }\n        for (var c in props) {\n            object[c + namespace] = props[c];\n        }\n        return object;\n    },\n\n    /**\n     * turn decimal color to RGB\n     * @param dec\n     * @param max\n     * @returns {{r: number, g: number, b: number}}\n     */\n    decToRGB(dec, max) {\n        if (!max) { max = 255; }\n        max += 1; // aids with rounding\n        var r = Math.floor(dec / (256*256));\n        var g = Math.floor(dec / 256) % 256;\n        var b = dec % 256;\n        return { r: r/255 * max, g: g/255 * max, b: b/255 * max };\n    },\n\n    RGBToDec(rgb) {\n        return rgb.r << 16 + rgb.g << 16 + rgb.b;\n    }\n}","export default class BaseGroup {\n    constructor(params) {\n\n        /**\n         * parent group of child objects we will create\n         * @type {THREE.Object3D}\n         * @private\n         */\n        this._group = new THREE.Object3D();\n\n        if (params && params.assets) {\n            // todo: determine when to use JSON Loader, OBJ loader, or whatever\n            var loader = new THREE.JSONLoader();\n            loader.load(params.assets, (geometry, materials) => {\n                this.onAssetsLoaded(geometry, materials);\n            });\n        }\n\n        this.onInitialize(params);\n    }\n\n    /**\n     * get name of group\n     */\n    get name() {\n        return this.constructor.name;\n    }\n\n    /**\n     * overridable methods\n     * leave empty to be a simple abstraction we don't have to call super on\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {};\n    onRender(scene, custom) {};\n    onInitialize(params) {};\n    onAssetsLoaded(geometry, material) {};\n\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     * @param custom\n     */\n    create(scene, custom) {\n        this._group.name = this.name;\n        scene.scene.add(this._group);\n        this.onCreate(scene, custom);\n    }\n\n    /**\n     * add object to scene\n     * @param object\n     */\n    add(object, name) {\n        if (!name) {\n            name = this.name + '-child';\n        }\n        object.name = name;\n        this._group.add(object);\n    }\n\n    /**\n     * get parent group object\n     * @returns {THREE.Object3D}\n     */\n    get group() {\n        return this._group;\n    }\n\n    /**\n     * get children of this group\n     * @returns {Array}\n     */\n    get children() {\n        return this._group.children;\n    }\n\n    /**\n     * on prerender scene\n     * @param scene\n     * @param custom\n     */\n    preRender(scene, custom) {}\n\n    /**\n     * on render scene\n     * @param scene\n     * @param custom\n     */\n    render(scene, custom) {\n        this.onRender(scene, custom);\n    }\n}"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvaW1wcm92LmVzNiIsInNyYy9pbnB1dC5lczYiLCJzcmMvbWlkaWtleW1hbmFnZXIuZXM2Iiwic3JjL211c2ljdGhlb3J5L2tleXNpZ25hdHVyZXByZWRpY3Rpb24uZXM2Iiwic3JjL211c2ljdGhlb3J5L25vdGUuZXM2Iiwic3JjL29iamVjdHMvZG9tZS5lczYiLCJzcmMvb2JqZWN0cy9rZXlib2FyZHMvYmFzZWtleWJvYXJkLmVzNiIsInNyYy9vYmplY3RzL2tleWJvYXJkcy9jaXJjdWxhcmtleWJvYXJkLmVzNiIsInNyYy9vYmplY3RzL2tleWJvYXJkcy90cmFkaXRpb25hbGtleWJvYXJkLmVzNiIsInNyYy9vYmplY3RzL2xpZ2h0aW5nLmVzNiIsInNyYy9vYmplY3RzL21ldHJvbm9tZS5lczYiLCJzcmMvb2JqZWN0cy9wYXJ0aWNsZWZsb2NrLmVzNiIsInNyYy9xd2VydHlrZXltYW5hZ2VyLmVzNiIsInNyYy9zaGFkZXJzLmVzNiIsInNyYy90aGVtZWluZy9jb2xvcnMuZXM2Iiwic3JjL3RoZW1laW5nL3N0eWxlLmVzNiIsInNyYy90b25lcGxheWJhY2suZXM2Iiwic3JjL3V0aWxzLmVzNiIsIi4uL3RyaXZyL3NyYy9iYXNlZ3JvdXAuZXM2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUNBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7SUFFcUIsTTtBQUNqQixvQkFBWSxLQUFaLEVBQW1CLFNBQW5CLEVBQThCO0FBQUE7O0FBQUE7O0FBQzFCOzs7O0FBSUEsYUFBSyxtQkFBTCxHQUEyQixJQUEzQjs7QUFFQTs7Ozs7QUFLQSxhQUFLLGdCQUFMLEdBQXdCLElBQXhCOztBQUVBLGFBQUssTUFBTCxHQUFjLEtBQWQ7QUFDQSxhQUFLLFFBQUwsR0FBZ0Is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Q0g7QUFDRCxtQkFBTyxJQUFQLEdBQWMsSUFBZDtBQUNBLGlCQUFLLE1BQUwsQ0FBWSxHQUFaLENBQWdCLE1BQWhCO0FBQ0g7O0FBRUQ7Ozs7Ozs7OztBQWdCQTs7Ozs7a0NBS1UsSyxFQUFPLE0sRUFBUSxDQUFFOztBQUUzQjs7Ozs7Ozs7K0JBS08sSyxFQUFPLE0sRUFBUTtBQUNsQixpQkFBSyxRQUFMLENBQWMsS0FBZCxFQUFxQixNQUFyQjtBQUNIOzs7NEJBcEVVO0FBQ1AsbUJBQU8sS0FBSyxXQUFMLENBQWlCLElBQXhCO0FBQ0g7Ozs0QkF3Q1c7QUFDUixtQkFBTyxLQUFLLE1BQVo7QUFDSDs7QUFFRDs7Ozs7Ozs0QkFJZTtBQUNYLG1CQUFPLEtBQUssTUFBTCxDQUFZLFFBQW5CO0FBQ0g7Ozs7OztrQkE1RWdCLFMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0IE1ldHJvbm9tZSBmcm9tICcuL29iamVjdHMvbWV0cm9ub21lLmVzNic7XG5pbXBvcnQgQ2lyY3VsYXJLZXlib2FyZCBmcm9tICcuL29iamVjdHMva2V5Ym9hcmRzL2NpcmN1bGFya2V5Ym9hcmQuZXM2JztcbmltcG9ydCBUcmFkaXRpb25hbEtleWJvYXJkIGZyb20gJy4vb2JqZWN0cy9rZXlib2FyZHMvdHJhZGl0aW9uYWxrZXlib2FyZC5lczYnO1xuaW1wb3J0IERvbWUgZnJvbSAnLi9vYmplY3RzL2RvbWUuZXM2JztcbmltcG9ydCBQYXJ0aWNsZXMgZnJvbSAnLi9vYmplY3RzL3BhcnRpY2xlZmxvY2suZXM2JztcbmltcG9ydCBMaWdodGluZyBmcm9tICcuL29iamVjdHMvbGlnaHRpbmcuZXM2JztcbmltcG9ydCBUb25lUGxheWJhY2sgZnJvbSAnLi90b25lcGxheWJhY2suZXM2JztcbmltcG9ydCBJbnB1dCBmcm9tICcuL2lucHV0LmVzNic7XG5pbXBvcnQgU3R5bGUgZnJvbSAnLi90aGVtZWluZy9zdHlsZS5lczYnO1xuaW1wb3J0IE5vdGUgZnJvbSAnLi9tdXNpY3RoZW9yeS9ub3RlLmVzNic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEltcHJvdiB7XG4gICAgY29uc3RydWN0b3Ioc2NlbmUsIGNvbmZpZ1VSSSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogY3VycmVudCBrZXkgc2lnbmF0dXJlXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmN1cnJlbnRLZXlTaWduYXR1cmUgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBpbmFjdGl2aXR5IHRpbWVyIGZvciBzdWdnZXN0aW9uc1xuICAgICAgICAgKiBAdHlwZSB7bnVsbH1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2luYWN0aXZpdHlUaW1lciA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fc2NlbmUgPSBzY2VuZTtcbiAgICAgICAgdGhpcy5fcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHRoaXMub25Db25maWdMb2FkZWQoKTtcbiAgICAgICAgdGhpcy5fcmVxdWVzdC5vcGVuKCdHRVQnLCBjb25maWdVUkkpO1xuICAgICAgICB0aGlzLl9yZXF1ZXN0LnNlbmQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBvbiBrZXkgY2hhbmdlXG4gICAgICogQHBhcmFtIGtleXNcbiAgICAgKi9cbiAgICBvbktleUlucHV0Q2hhbmdlKGV2ZW50KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9pbmFjdGl2aXR5VGltZXIpO1xuICAgICAgICB0aGlzLl9pbmFjdGl2aXR5VGltZXIgPSBzZXRUaW1lb3V0KCAoKSA9PiB0aGlzLm9uSW5hY3Rpdml0eVRpbWVvdXQoKSwgNTAwMCk7XG5cbiAgICAgICAgdGhpcy5fa2V5Ym9hcmQudG9nZ2xlS2V5UHJlc3NlZCh7XG4gICAgICAgICAgICBub3RhdGlvbjogZXZlbnQuY2hhbmdlZC5ub3RhdGlvbixcbiAgICAgICAgICAgIG9jdGF2ZTogZXZlbnQuY2hhbmdlZC5vY3RhdmUsXG4gICAgICAgICAgICB2ZWxvY2l0eTogZXZlbnQuY2hhbmdlZC52ZWxvY2l0eSB9KTtcblxuICAgICAgICBpZiAoZXZlbnQucHJlZGljdGVkS2V5Lmxlbmd0aCA+IDAgJiYgdGhpcy5jdXJyZW50S2V5U2lnbmF0dXJlICE9PSBldmVudC5wcmVkaWN0ZWRLZXlbMF0ua2V5KSB7XG4gICAgICAgICAgICB0aGlzLl9rZXlib2FyZC5jaGFuZ2VLZXlTaWduYXR1cmUoZXZlbnQucHJlZGljdGVkS2V5WzBdLmtleSk7XG4gICAgICAgICAgICB0aGlzLl9odWRLZXlib2FyZC5jaGFuZ2VLZXlTaWduYXR1cmUoZXZlbnQucHJlZGljdGVkS2V5WzBdLmtleSk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRLZXlTaWduYXR1cmUgPSBldmVudC5wcmVkaWN0ZWRLZXlbMF0ua2V5O1xuICAgICAgICAgICAgdGhpcy5fbWV0cm9ub21lLnNldEhpdENvbG9yKFN0eWxlLmNvbG9yd2hlZWxbTm90ZS5pbmRleE9mTm90YXRpb24oZXZlbnQucHJlZGljdGVkS2V5WzBdLmtleSldKTtcbiAgICAgICAgICAgIHRoaXMuX3BhcnRpY2xlcy5zZXRDb2xvcihTdHlsZS5jb2xvcndoZWVsW05vdGUuaW5kZXhPZk5vdGF0aW9uKGV2ZW50LnByZWRpY3RlZEtleVswXS5rZXkpXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvL3RoaXMuX2tleWJvYXJkLnRvZ2dsZUtleVByZXNzZWQoa2V5W29jdGF2ZV0sIGV2ZW50LmNoYW5nZWQudmVsb2NpdHkpO1xuICAgICAgICAgLyp2YXIga2V5ID0gdGhpcy5maW5kS2V5T2JqZWN0c0Zvck5vdGF0aW9uKGV2ZW50LmNoYW5nZWQubm90YXRpb24pO1xuICAgICAgICAgdmFyIG9jdGF2ZTtcbiAgICAgICAgIGlmIChldmVudC5jaGFuZ2VkLm9jdGF2ZSAvIDIgPT09IE1hdGguZmxvb3IoZXZlbnQuY2hhbmdlZC5vY3RhdmUgLyAyKSkge1xuICAgICAgICAgICAgb2N0YXZlID0gMTtcbiAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvY3RhdmUgPSAwO1xuICAgICAgICAgfVxuXG4gICAgICAgICB0aGlzLnRvZ2dsZUtleVByZXNzZWQoa2V5W29jdGF2ZV0sIGV2ZW50LmNoYW5nZWQudmVsb2NpdHkpO1xuXG4gICAgICAgICBpZiAoZXZlbnQucHJlZGljdGVkS2V5Lmxlbmd0aCA+IDAgJiYgZXZlbnQucHJlZGljdGVkS2V5WzBdICE9PSB0aGlzLmN1cnJlbnRLZXlTaWduYXR1cmUpIHtcbiAgICAgICAgICAgIHRoaXMub25LZXlTaWduYXR1cmVDaGFuZ2UoZXZlbnQucHJlZGljdGVkS2V5WzBdLmtleSk7XG4gICAgICAgICB9Ki9cbiAgICAgfVxuXG4gICAgLyoqXG4gICAgICogaW5hY3Rpdml0eSB0aW1lb3V0XG4gICAgICovXG4gICAgb25JbmFjdGl2aXR5VGltZW91dCgpIHtcbiAgICAgICAgdGhpcy5fa2V5Ym9hcmQucmVzZXRLZXlzKCk7XG4gICAgICAgIHRoaXMuX2h1ZEtleWJvYXJkLnJlc2V0S2V5cygpO1xuICAgICAgICB0aGlzLl9pbnB1dC5jbGVhclByZWRpY3Rpb25IaXN0b3J5KCk7XG4gICAgICAgIHRoaXMuX21ldHJvbm9tZS5zZXRIaXRDb2xvcigpO1xuICAgICAgICB0aGlzLl9wYXJ0aWNsZXMuc2V0Q29sb3IoKTtcbiAgICAgfVxuXG4gICAgLyoqXG4gICAgICogb24gY29uZmlnIGxvYWRlZFxuICAgICAqL1xuICAgIG9uQ29uZmlnTG9hZGVkKCkge1xuICAgICAgICBpZiAodGhpcy5fcmVxdWVzdC5yZWFkeVN0YXRlID09PSBYTUxIdHRwUmVxdWVzdC5ET05FKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcmVxdWVzdC5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgIHZhciBjb25maWcgPSBKU09OLnBhcnNlKHRoaXMuX3JlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldHVwKGNvbmZpZyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUaGVyZSB3YXMgYSBwcm9ibGVtIHdpdGggdGhlIHJlcXVlc3QuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogc2V0dXAgYXBwXG4gICAgICogQHBhcmFtIGNvbmZpZ1xuICAgICAqIEBwYXJhbSBjb25maWdcbiAgICAgKi9cbiAgICBzZXR1cChjb25maWcpIHtcbiAgICAgICAgdGhpcy5fc2NlbmUub25DcmVhdGUgPSB0aGlzLmNyZWF0ZTtcblxuICAgICAgICB0aGlzLl9pbnB1dCA9IG5ldyBJbnB1dChjb25maWcuaW5wdXQsIChrZXlzKSA9PiB0aGlzLm9uS2V5SW5wdXRDaGFuZ2Uoa2V5cykgKTtcbiAgICAgICAgdGhpcy5fa2V5Ym9hcmQgPSBuZXcgVHJhZGl0aW9uYWxLZXlib2FyZChjb25maWcua2V5Ym9hcmQpO1xuICAgICAgICB0aGlzLl9odWRLZXlib2FyZCA9IG5ldyBDaXJjdWxhcktleWJvYXJkKGNvbmZpZy5ub3RhdGlvbmRpc3BsYXkpO1xuICAgICAgICB0aGlzLl9tZXRyb25vbWUgPSBuZXcgTWV0cm9ub21lKCk7XG4gICAgICAgIHRoaXMuX3BhcnRpY2xlcyA9IG5ldyBQYXJ0aWNsZXMoKTtcblxuICAgICAgICB0aGlzLl9zY2VuZS5hZGRPYmplY3RzKFtcbiAgICAgICAgICAgIHRoaXMuX21ldHJvbm9tZSxcbiAgICAgICAgICAgIHRoaXMuX3BhcnRpY2xlcyxcbiAgICAgICAgICAgIG5ldyBEb21lKCksXG4gICAgICAgICAgICB0aGlzLl9rZXlib2FyZCxcbiAgICAgICAgICAgIHRoaXMuX2h1ZEtleWJvYXJkLFxuICAgICAgICAgICAgbmV3IExpZ2h0aW5nKCkgXSk7XG5cbiAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBjb25maWcuc291bmQuc291bmRmb250cy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgVG9uZVBsYXliYWNrLmxvYWRJbnN0cnVtZW50KGNvbmZpZy5zb3VuZC5zb3VuZGZvbnRzW2NdLCBjb25maWcuc291bmQuc291bmRmb250bG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBldmVudCA9PiB0aGlzLm9uS2V5RG93bihldmVudCkgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBvbiBrZXlkb3duXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICovXG4gICAgb25LZXlEb3duKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5jb2RlID09PSAnU3BhY2UnKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKFRvbmVQbGF5YmFjay5wbGF5ZXJTdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JlYWR5JzogVG9uZVBsYXliYWNrLnBsYXkoJy4vYXNzZXRzL2F1ZGlvL0Jvbm5pZV9UeWxlcl8tX1RvdGFsX0VjbGlwc2Vfb2ZfdGhlX0hlYXJ0Lm1pZCcpOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdwbGF5aW5nJzogVG9uZVBsYXliYWNrLnBhdXNlKCk7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3BhdXNlZCc6IFRvbmVQbGF5YmFjay5yZXN1bWUoKTsgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGUoc2NlbmUsIGN1c3RvbSkge1xuICAgICAgICBzY2VuZS5yZW5kZXJlci5nYW1tYUlucHV0ID0gdHJ1ZTtcbiAgICAgICAgc2NlbmUucmVuZGVyZXIuZ2FtbWFPdXRwdXQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJlbmRlcihzY2VuZSwgY3VzdG9tKSB7fVxufVxuIiwiaW1wb3J0IFFXRVJUWUtleU1hbmFnZXIgZnJvbSAnLi9xd2VydHlrZXltYW5hZ2VyLmVzNic7XG5pbXBvcnQgTUlESUtleU1hbmFnZXIgZnJvbSAnLi9taWRpa2V5bWFuYWdlci5lczYnO1xuaW1wb3J0IEtleVNpZ25hdHVyZVByZWRpY3Rpb24gZnJvbSAnLi9tdXNpY3RoZW9yeS9rZXlzaWduYXR1cmVwcmVkaWN0aW9uLmVzNic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMsIGNiKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBrZXkgbWFuYWdlclxuICAgICAgICAgKiBAdHlwZSB7JEVTNl9BTk9OWU1PVVNfQ0xBU1MkfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHBhcmFtcy5kZXZpY2UgPT09ICdRV0VSVFknKSB7XG4gICAgICAgICAgICB0aGlzLl9rZXltYW5hZ2VyID0gbmV3IFFXRVJUWUtleU1hbmFnZXIocGFyYW1zLCBjaGFuZ2VkID0+IHRoaXMub25LZXlDaGFuZ2UoY2hhbmdlZCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcy5kZXZpY2UgPT09ICdNSURJJykge1xuICAgICAgICAgICAgdGhpcy5fa2V5bWFuYWdlciA9IG5ldyBNSURJS2V5TWFuYWdlcihwYXJhbXMsIGNoYW5nZWQgPT4gdGhpcy5vbktleUNoYW5nZShjaGFuZ2VkKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICoga2V5IHNpZ25hdHVyZSBwcmVkaWN0aW9uXG4gICAgICAgICAqIEB0eXBlIHskRVM2X0FOT05ZTU9VU19DTEFTUyR9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9rZXlTaWdQcmVkaWN0aW9uID0gbmV3IEtleVNpZ25hdHVyZVByZWRpY3Rpb24oKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICoga2V5IGNoYW5nZSBjYWxsYmFja1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSBjYjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjbGVhciBwcmVkaWN0aW9uIGhpc3RvcnlcbiAgICAgKi9cbiAgICBjbGVhclByZWRpY3Rpb25IaXN0b3J5KCkge1xuICAgICAgICB0aGlzLl9rZXlTaWdQcmVkaWN0aW9uLmNsZWFySGlzdG9yeSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG9uIGtleSBjaGFuZ2VcbiAgICAgKiBAcGFyYW0gY2hhbmdlZFxuICAgICAqL1xuICAgIG9uS2V5Q2hhbmdlKGNoYW5nZWQpIHtcbiAgICAgICAgdmFyIGtkID0gdGhpcy5fa2V5bWFuYWdlci5nZXRLZXlzRG93bigpO1xuICAgICAgICB2YXIgcHJlZGljdGVkID0gdGhpcy5fa2V5U2lnUHJlZGljdGlvbi51cGRhdGUoa2QpO1xuICAgICAgICB0aGlzLl9jYWxsYmFjay5hcHBseSh0aGlzLCBbIHsgZG93bjoga2QsIHByZWRpY3RlZEtleTogcHJlZGljdGVkLCBjaGFuZ2VkOiBjaGFuZ2VkIH1dKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgTm90ZSBmcm9tICcuL211c2ljdGhlb3J5L25vdGUuZXM2JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtcywgY2IpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGV2ZW50IGNhbGxiYWNrXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9jYWxsYmFjayA9IGNiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBrZXlzIGRvd25cbiAgICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fa2V5cyA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNSURJIGtleSB0byBub3RhdGlvbiBtYXBwaW5nIChjb21pbmcgZnJvbSBNSURJLCBzbyBub3QgY3VzdG9taXphYmxlKVxuICAgICAgICAgKiB0aGUgc3BsaWNlIGhhcHBlbnMgYmVjYXVzZSAwIGluZGV4IGluIE1JREkgc3RhcnRzIHdpdGggQ1xuICAgICAgICAgKiBAdHlwZSB7QXJyYXkuPHN0cmluZz59XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9tYXBwaW5nID0gTm90ZS5zaGFycE5vdGF0aW9uc1xuICAgICAgICAgICAgLmNvbmNhdChOb3RlLnNoYXJwTm90YXRpb25zKVxuICAgICAgICAgICAgLmNvbmNhdChOb3RlLnNoYXJwTm90YXRpb25zKVxuICAgICAgICAgICAgLmNvbmNhdChOb3RlLnNoYXJwTm90YXRpb25zKVxuICAgICAgICAgICAgLmNvbmNhdChOb3RlLnNoYXJwTm90YXRpb25zKVxuICAgICAgICAgICAgLmNvbmNhdChOb3RlLnNoYXJwTm90YXRpb25zKVxuICAgICAgICAgICAgLmNvbmNhdChOb3RlLnNoYXJwTm90YXRpb25zKVxuICAgICAgICAgICAgLmNvbmNhdChOb3RlLnNoYXJwTm90YXRpb25zKVxuICAgICAgICAgICAgLmNvbmNhdChOb3RlLnNoYXJwTm90YXRpb25zKVxuICAgICAgICAgICAgLmNvbmNhdChOb3RlLnNoYXJwTm90YXRpb25zKS5zcGxpY2UoMywgTm90ZS5zaGFycE5vdGF0aW9ucy5sZW5ndGggKjEwKTtcblxuICAgICAgICB0aGlzLmluaXRpYWxpemVEZXZpY2UoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbml0aWFsaXplIG1pZGkgZGV2aWNlXG4gICAgICovXG4gICAgaW5pdGlhbGl6ZURldmljZSgpIHtcbiAgICAgICAgLy8gcmVxdWVzdCBNSURJIGFjY2Vzc1xuICAgICAgICBpZiAobmF2aWdhdG9yLnJlcXVlc3RNSURJQWNjZXNzKSB7XG4gICAgICAgICAgICBuYXZpZ2F0b3IucmVxdWVzdE1JRElBY2Nlc3MoKS50aGVuKFxuICAgICAgICAgICAgICAgIChldmVudCkgPT4gdGhpcy5vbk1JRElTdWNjZXNzKGV2ZW50KSxcbiAgICAgICAgICAgICAgICAoZXZlbnQpID0+IHRoaXMub25NSURJRmFpbHVyZShldmVudCkgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTm8gTUlESSBzdXBwb3J0IGluIHlvdXIgYnJvd3Nlci5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBvbiBtaWRpIGNvbm5lY3Rpb24gc3VjY2Vzc1xuICAgICAqIEBwYXJhbSBtaWRpXG4gICAgICovXG4gICAgb25NSURJU3VjY2VzcyhtaWRpKSB7XG4gICAgICAgIHZhciBpbnB1dHMgPSBtaWRpLmlucHV0cztcbiAgICAgICAgZm9yIChsZXQgaW5wdXQgb2YgaW5wdXRzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICBpbnB1dC5vbm1pZGltZXNzYWdlID0gbXNnID0+IHRoaXMub25NSURJTWVzc2FnZShtc2cpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogb24gbWlkaSBjb25uZWN0aW9uIGZhaWx1cmVcbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBvbk1JRElGYWlsdXJlKGV2ZW50KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTm8gYWNjZXNzIHRvIE1JREkgZGV2aWNlcyBvciB5b3VyIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IFdlYk1JREkgQVBJLiBQbGVhc2UgdXNlIFdlYk1JRElBUElTaGltIFwiICsgZXZlbnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG9uIG1pZGkgbWVzc2FnZVxuICAgICAqIEBwYXJhbSBtc2dcbiAgICAgKi9cbiAgICBvbk1JRElNZXNzYWdlKG1zZykge1xuICAgICAgICBjb25zb2xlLmxvZyhtc2cpXG4gICAgICAgIHZhciBjbWQgPSBtc2cuZGF0YVswXSA+PiA0O1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG1zZy5kYXRhWzBdICYgMHhmO1xuICAgICAgICB2YXIgbm90ZU51bWJlciA9IG1zZy5kYXRhWzFdO1xuICAgICAgICB2YXIgdmVsb2NpdHkgPSAwO1xuICAgICAgICBpZiAobXNnLmRhdGEubGVuZ3RoID4gMilcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gbXNnLmRhdGFbMl0gLyAxMDA7XG5cbiAgICAgICAgLy8gTUlESSBub3Rlb24gd2l0aCB2ZWxvY2l0eT0wIGlzIHRoZSBzYW1lIGFzIG5vdGVvZmZcbiAgICAgICAgaWYgKCBjbWQ9PTggfHwgKChjbWQ9PTkpJiYodmVsb2NpdHk9PTApKSApIHsgLy8gbm90ZW9mZlxuICAgICAgICAgICAgdGhpcy5vbktleVVwKG5vdGVOdW1iZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKGNtZCA9PSA5KSB7IC8vIG5vdGUgb25cbiAgICAgICAgICAgIHRoaXMub25LZXlEb3duKG5vdGVOdW1iZXIsIHZlbG9jaXR5KTtcbiAgICAgICAgfSAvL2Vsc2UgaWYgKGNtZCA9PSAxMSkgeyAvLyBjb250cm9sbGVyIG1lc3NhZ2VcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQga2V5cyBkb3duXG4gICAgICovXG4gICAgZ2V0S2V5c0Rvd24oKSB7XG4gICAgICAgIHZhciBkb3duID0gW107XG4gICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgdGhpcy5fa2V5cy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2tleXNbY10gPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9jdGF2ZSA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKGMgPj0gdGhpcy5fa2V5cy5sZW5ndGgvMikgeyBvY3RhdmUgPSAxOyB9XG4gICAgICAgICAgICAgICAgZG93bi5wdXNoKCB7IG5vdGF0aW9uOiB0aGlzLl9tYXBwaW5nW2NdLCBvY3RhdmU6IG9jdGF2ZSwgaW5kZXg6IGMsIHZlbG9jaXR5OiB0aGlzLl9rZXlzW2NdfSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkb3duO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG9uIGtleSBkb3duXG4gICAgICogQHBhcmFtIGtleVxuICAgICAqIEBwYXJhbSB2ZWxvY2l0eVxuICAgICAqL1xuICAgIG9uS2V5RG93bihrZXksIHZlbG9jaXR5KSB7XG4gICAgICAgIHRoaXMuX2tleXNba2V5XSA9IHZlbG9jaXR5O1xuICAgICAgICB2YXIgb2N0YXZlID0gMDtcbiAgICAgICAgb2N0YXZlID0gTWF0aC5mbG9vcihrZXkgLyBOb3RlLnNoYXJwTm90YXRpb25zLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrKHtcbiAgICAgICAgICAgIG5vdGF0aW9uOiB0aGlzLl9tYXBwaW5nW2tleV0sXG4gICAgICAgICAgICBvY3RhdmU6IG9jdGF2ZSxcbiAgICAgICAgICAgIGluZGV4OiBrZXksXG4gICAgICAgICAgICB2ZWxvY2l0eTogdmVsb2NpdHksXG4gICAgICAgICAgICBhY3Rpb246ICdwcmVzcycgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogb24ga2V5IGRvd25cbiAgICAgKiBAcGFyYW0ga2V5XG4gICAgICovXG4gICAgb25LZXlVcChrZXkpIHtcbiAgICAgICAgdGhpcy5fa2V5c1trZXldID0gMC4wO1xuICAgICAgICB2YXIgb2N0YXZlID0gMDtcbiAgICAgICAgb2N0YXZlID0gTWF0aC5mbG9vcihrZXkgLyBOb3RlLnNoYXJwTm90YXRpb25zLmxlbmd0aCk7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrKHtcbiAgICAgICAgICAgIG5vdGF0aW9uOiB0aGlzLl9tYXBwaW5nW2tleV0sXG4gICAgICAgICAgICBvY3RhdmU6IG9jdGF2ZSxcbiAgICAgICAgICAgIGluZGV4OiBrZXksXG4gICAgICAgICAgICB2ZWxvY2l0eTogMCxcbiAgICAgICAgICAgIGFjdGlvbjogJ3JlbGVhc2UnIH0pO1xuICAgIH1cbn1cbiIsImltcG9ydCBOb3RlIGZyb20gJy4vbm90ZS5lczYnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBrZXkgc2lnbmF0dXJlIHNjb3JlIGhpc3RvcnlcbiAgICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fa2V5U2lnbmF0dXJlU2NvcmVIaXN0b3J5ID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGhpc3RvcnkgZGVjYXkgcmF0ZVxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fa2V5U2lnbmF0dXJlRGVjYXlSYXRlID0gMC45O1xuXG4gICAgICAgIE5vdGUuZ2VuZXJhdGVLZXlTaWduYXR1cmVMb29rdXAoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB1cGRhdGUga2V5cyBwcmVzc2VkXG4gICAgICogQHBhcmFtIHtBcnJheX0ga2V5c1xuICAgICAqL1xuICAgIHVwZGF0ZShrZXlzKSB7XG4gICAgICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gdGhpcy5fa2V5U2lnbmF0dXJlU2NvcmVIaXN0b3J5OyB9XG4gICAgICAgIHZhciBrZXlzaWdTY29yZXMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgc2lnIGluIE5vdGUua2V5cykge1xuICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCBrZXlzLmxlbmd0aDsgZCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKE5vdGUua2V5c1tzaWddLmluZGV4T2Yoa2V5c1tkXS5ub3RhdGlvbikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICgha2V5c2lnU2NvcmVzW3NpZ10pIHsga2V5c2lnU2NvcmVzW3NpZ10gPSAwOyB9XG4gICAgICAgICAgICAgICAgICAgIGtleXNpZ1Njb3Jlc1tzaWddICsrO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXlzW2RdLm5vdGF0aW9uID09PSBzaWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXNpZ1Njb3Jlc1tzaWddICs9IC4wMTsgLy8gc21hbGwgcHJpb3JpdHkgYm9vc3QgZm9yIHJvb3Qgbm90ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNjb3JlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBzY29yZSBpbiBrZXlzaWdTY29yZXMpIHtcbiAgICAgICAgICAgIHNjb3Jlcy5wdXNoKCB7IHNjb3JlOiBrZXlzaWdTY29yZXNbc2NvcmVdLCBrZXk6IHNjb3JlLCB0aW1lc3RhbXA6IERhdGUubm93KCkgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRlY2F5SGlzdG9yaWNhbFNjb3JlcygpO1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBseUN1cnJlbnRTY29yZVRvSGlzdG9yeShzY29yZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNsZWFyIGhpc3RvcnlcbiAgICAgKi9cbiAgICBjbGVhckhpc3RvcnkoKSB7XG4gICAgICAgIHRoaXMuX2tleVNpZ25hdHVyZVNjb3JlSGlzdG9yeSA9IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIHNsb3dseSBkZWNheSBjdXJyZW50IGhpc3RvcmljYWwgc2NvcmVzXG4gICAgICovXG4gICAgZGVjYXlIaXN0b3JpY2FsU2NvcmVzKCkge1xuICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHRoaXMuX2tleVNpZ25hdHVyZVNjb3JlSGlzdG9yeS5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgdGhpcy5fa2V5U2lnbmF0dXJlU2NvcmVIaXN0b3J5W2NdLnNjb3JlICo9IHRoaXMuX2tleVNpZ25hdHVyZURlY2F5UmF0ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFwcGx5IHNjb3JlcyB0byBoaXN0b3J5IChhZ2dyZWdhdGUgYWxsIHNjb3JlczogY3VycmVudCBhbmQgcGFzdClcbiAgICAgKiBAcGFyYW0gc2NvcmVzXG4gICAgICovXG4gICAgYXBwbHlDdXJyZW50U2NvcmVUb0hpc3Rvcnkoc2NvcmVzKSB7XG4gICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgc2NvcmVzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgdGhpcy5fa2V5U2lnbmF0dXJlU2NvcmVIaXN0b3J5Lmxlbmd0aDsgZCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2tleVNpZ25hdHVyZVNjb3JlSGlzdG9yeVtkXS5rZXkgPT09IHNjb3Jlc1tjXS5rZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlTaWduYXR1cmVTY29yZUhpc3RvcnlbZF0uc2NvcmUgKz0gc2NvcmVzW2NdLnNjb3JlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9rZXlTaWduYXR1cmVTY29yZUhpc3RvcnkucHVzaChzY29yZXNbY10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9rZXlTaWduYXR1cmVTY29yZUhpc3Rvcnkuc29ydChmdW5jdGlvbihhLCBiKSB7IHJldHVybiAoYS5zY29yZSA8IGIuc2NvcmUgKSA/IDEgOiAoKGIuc2NvcmUgPCBhLnNjb3JlKSA/IC0xIDogMCk7IH0pO1xuICAgIH1cbn1cbiIsIi8qKlxuICogTm90ZSBzdGF0aWMgY2xhc3NcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgLyoqIGNhY2hlZCBrZXlzaWduYXR1cmUgbG9va3VwIHRhYmxlICovXG4gICAga2V5czoge30sXG5cbiAgICAvKipcbiAgICAgKiBpbmNyZW1lbnRhbCB0b25lcyBhcyBzaGFycCBub3RhdGlvblxuICAgICAqIEBjb25zdFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAdHlwZSB7QXJyYXkuPHN0cmluZz59XG4gICAgICoqL1xuICAgIHNoYXJwTm90YXRpb25zOiBbXCJBXCIsIFwiQSNcIiwgXCJCXCIsIFwiQ1wiLCBcIkMjXCIsIFwiRFwiLCBcIkQjXCIsIFwiRVwiLCBcIkZcIiwgXCJGI1wiLCBcIkdcIiwgXCJHI1wiXSxcblxuICAgIC8qKlxuICAgICAqIGluY3JlbWVudGFsIHRvbmVzIGFzIGZsYXQgbm90YXRpb25cbiAgICAgKiBAY29uc3RcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHR5cGUge0FycmF5LjxzdHJpbmc+fVxuICAgICAqKi9cbiAgICBmbGF0Tm90YXRpb25zOiBbXCJBXCIsIFwiQmJcIiwgXCJCXCIsIFwiQ1wiLCBcIkRiXCIsIFwiRFwiLCBcIkViXCIsIFwiRVwiLCBcIkZcIiwgXCJHYlwiLCBcIkdcIiwgXCJBYlwiXSxcblxuICAgIC8qKlxuICAgICAqIGdldCBub3RhdGlvbiBpbmRleCB3aGVuIG5vdGF0aW9uIGlzIGVpdGhlciBmbGF0IG9yIHNoYXJwXG4gICAgICogQHBhcmFtIG5vdGF0aW9uXG4gICAgICovXG4gICAgaW5kZXhPZk5vdGF0aW9uKG5vdGF0aW9uKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuc2hhcnBOb3RhdGlvbnMuaW5kZXhPZihub3RhdGlvbik7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5mbGF0Tm90YXRpb25zLmluZGV4T2Yobm90YXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2V0IG5vdGF0aW9uIGdpdmVuIGFuIGluZGV4XG4gICAgICogQHBhcmFtIGluZGV4XG4gICAgICovXG4gICAgbm90YXRpb25BdEluZGV4KGluZGV4LCBwcmVmZXJGbGF0KSB7XG4gICAgICAgIGlmIChpbmRleCA+PSB0aGlzLnNoYXJwTm90YXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgaW5kZXggPSBpbmRleCAlIHRoaXMuc2hhcnBOb3RhdGlvbnMubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByZWZlckZsYXQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZsYXROb3RhdGlvbnNbaW5kZXhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2hhcnBOb3RhdGlvbnNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIG9kZCBub3RhdGlvbnNcbiAgICAgKiBAY29uc3RcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHR5cGUge0FycmF5LjxzdHJpbmc+fVxuICAgICAqKi9cbiAgICAgb2RkTm90YXRpb25zOiBbXCJCI1wiLCBcIkNiXCIsIFwiRSNcIiwgXCJGYlwiXSxcblxuICAgIC8qKlxuICAgICAqIGNvcnJlY3RlZCBub3RhdGlvbnNcbiAgICAgKiBAY29uc3RcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHR5cGUge0FycmF5LjxzdHJpbmc+fVxuICAgICAqKi9cbiAgICAgY29ycmVjdGVkTm90YXRpb25zOiBbXCJDXCIsIFwiQ1wiLCBcIkZcIiwgXCJGXCJdLFxuXG4gICAgLyoqXG4gICAgICogdHJhbnNsYXRlIGluZGV4IGZyb20gTUlESSB0byBub3RhdGlvblxuICAgICAqIEBwYXJhbSBpbmRleFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIE1JREl0b05vdGF0aW9uKGluZGV4KSB7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IGluZGV4ICUgdGhpcy5zaGFycE5vdGF0aW9ucy5sZW5ndGg7XG4gICAgICAgIHJldHVybiB0aGlzLnNoYXJwTm90YXRpb25zW3Bvc2l0aW9uXTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdHJhbnNsYXRlIG5vdGF0aW9uIGFuZCBvY3RhdmUgdG8gTUlESSBpbmRleFxuICAgICAqIEBwYXJhbSBub3RhdGlvblxuICAgICAqL1xuICAgIG5vdGF0aW9uVG9NSURJKG5vdGF0aW9uKSB7XG4gICAgICAgIHZhciBudE9iaiA9IHRoaXMucGFyc2VOb3RhdGlvbihub3RhdGlvbik7XG4gICAgICAgIHZhciBudGluZHggPSB0aGlzLnNoYXJwTm90YXRpb25zLmluZGV4T2YobnRPYmoubm90YXRpb24pO1xuICAgICAgICBpZiAobnRpbmR4ID09PSAtMSkge1xuICAgICAgICAgICAgbnRpbmR4ID0gdGhpcy5mbGF0Tm90YXRpb25zLmluZGV4T2YobnRPYmoubm90YXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudE9iai5vY3RhdmUgKiB0aGlzLnNoYXJwTm90YXRpb25zLmxlbmd0aCArIG50aW5keDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcGFyc2Ugbm90YXRpb24gdG8gbm90YXRpb24gYW5kIG9jdGF2ZVxuICAgICAqIEBwYXJhbSBub3RhdGlvblxuICAgICAqL1xuICAgIHBhcnNlTm90YXRpb24obm90YXRpb24pIHtcbiAgICAgICAgdmFyIG5vdGUgPSB7fTtcbiAgICAgICAgLy8gb25seSBzdXBwb3J0cyBvbmUgZGlnaXQgb2N0YXZlcyAoaWYgdGhhdHMgZXZlbiBhIHJlYWwgaXNzdWUpXG4gICAgICAgIHZhciBvY3RhdmUgPSBub3RhdGlvbi5jaGFyQXQobm90YXRpb24ubGVuZ3RoLTEpO1xuICAgICAgICBpZiAocGFyc2VJbnQob2N0YXZlKSA9PSBvY3RhdmUpIHtcbiAgICAgICAgICAgIG5vdGUub2N0YXZlID0gb2N0YXZlO1xuICAgICAgICAgICAgbm90ZS5ub3RhdGlvbiA9IG5vdGF0aW9uLnN1YnN0cigwLCBub3RhdGlvbi5sZW5ndGgtMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub3RlLm9jdGF2ZSA9IDQ7IC8vIGRlZmF1bHRcbiAgICAgICAgICAgIG5vdGUubm90YXRpb24gPSBub3RhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3RlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB0dXJuIGEgbm90YXRpb24gaW50byBhIGZyZXF1ZW5jeVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbm90YXRpb25cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IGZyZXF1ZW5jeVxuICAgICAqL1xuICAgIGdldEZyZXF1ZW5jeUZvck5vdGF0aW9uKG50KSB7XG4gICAgICAgIHZhciBvY3RhdmUgPSA0O1xuXG4gICAgICAgIC8vIGRvZXMgbm90YXRpb24gaW5jbHVkZSB0aGUgb2N0YXZlP1xuICAgICAgICBpZiAoICFpc05hTiggcGFyc2VJbnQobnQuY2hhckF0KG50Lmxlbmd0aCAtMSkpICkpIHtcbiAgICAgICAgICAgIG9jdGF2ZSA9IHBhcnNlSW50KG50LmNoYXJBdChudC5sZW5ndGggLTEpKTtcbiAgICAgICAgICAgIG50ID0gbnQuc3Vic3RyKDAsIG50Lmxlbmd0aC0xKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvcnJlY3QgYW55IGZsYXQvc2hhcnBzIHRoYXQgcmVzb2x2ZSB0byBhIG5hdHVyYWxcbiAgICAgICAgaWYgKHRoaXMub2RkTm90YXRpb25zLmluZGV4T2YobnQpICE9IC0xKSB7XG4gICAgICAgICAgICBudCA9IHRoaXMuY29ycmVjdGVkTm90YXRpb25zW3RoaXMub2RkTm90YXRpb25zLmluZGV4T2YobnQpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmcmVxO1xuICAgICAgICB2YXIgaW5keCA9IHRoaXMuc2hhcnBOb3RhdGlvbnMuaW5kZXhPZihudCk7XG5cbiAgICAgICAgaWYgKGluZHggPT0gLTEpIHtcbiAgICAgICAgICAgIGluZHggPSB0aGlzLmZsYXROb3RhdGlvbnMuaW5kZXhPZihudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5keCAhPSAtMSkge1xuICAgICAgICAgICAgaW5keCArPSAob2N0YXZlLTQpICogdGhpcy5zaGFycE5vdGF0aW9ucy5sZW5ndGg7XG4gICAgICAgICAgICBmcmVxID0gNDQwICogKE1hdGgucG93KDIsIGluZHgvMTIpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnJlcTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2V0IG5vdGVzIGluIGEgc3BlY2lmaWMga2V5IHNpZ25hdHVyZVxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgKHJvb3Qgbm90ZSlcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlmIG1ham9yIGtleSBzaWduYXR1cmVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb2N0YXZlIHRvIHVzZSAob3B0aW9uYWwpXG4gICAgICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59IGtleXMgaW4ga2V5IHNpZ25hdHVyZVxuICAgICAqL1xuICAgIG5vdGVzSW5LZXlTaWduYXR1cmUoa2V5LCBtYWpvciwgb2N0YXZlKSB7XG4gICAgICAgIHZhciBub3Rlc1RvSW5kZXg7XG4gICAgICAgIHZhciBub3Rlc0luS2V5ID0gW107XG4gICAgICAgIHZhciBzdGFydFBvcztcblxuICAgICAgICAvLyBjb3JyZWN0IGFueSBmbGF0L3NoYXJwcyB0aGF0IHJlc29sdmUgdG8gYSBuYXR1cmFsXG4gICAgICAgIGlmICh0aGlzLm9kZE5vdGF0aW9ucy5pbmRleE9mKGtleSkgIT0gLTEpIHtcbiAgICAgICAgICAgIGtleSA9IHRoaXMuY29ycmVjdGVkTm90YXRpb25zW3RoaXMub2RkTm90YXRpb25zLmluZGV4T2Yoa2V5KV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaW5kIHRoZSBjb3JyZWN0IG5vdGUgYW5kIG5vdGF0aW9uXG4gICAgICAgIGlmICh0aGlzLnNoYXJwTm90YXRpb25zLmluZGV4T2Yoa2V5KSAhPSAtMSkge1xuICAgICAgICAgICAgbm90ZXNUb0luZGV4ID0gdGhpcy5zaGFycE5vdGF0aW9ucy5zbGljZSgpO1xuICAgICAgICAgICAgc3RhcnRQb3MgPSB0aGlzLnNoYXJwTm90YXRpb25zLmluZGV4T2Yoa2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vdGVzVG9JbmRleCA9IHRoaXMuZmxhdE5vdGF0aW9ucy5zbGljZSgpO1xuICAgICAgICAgICAgc3RhcnRQb3MgPSB0aGlzLmZsYXROb3RhdGlvbnMuaW5kZXhPZihrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZG91YmxlIHRoZSBhcnJheSBsZW5ndGhcbiAgICAgICAgdmFyIGxlbiA9IG5vdGVzVG9JbmRleC5sZW5ndGg7XG4gICAgICAgIGZvciAoIHZhciBjID0gMDsgYyA8IGxlbjsgYysrICkge1xuICAgICAgICAgICAgaWYgKG9jdGF2ZSkge1xuICAgICAgICAgICAgICAgIG5vdGVzVG9JbmRleC5wdXNoKG5vdGVzVG9JbmRleFtjXSArIChvY3RhdmUrMSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBub3Rlc1RvSW5kZXgucHVzaChub3Rlc1RvSW5kZXhbY10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIG9jdGF2ZSBub3RhdGlvbiB0byB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgYXJyYXlcbiAgICAgICAgaWYgKG9jdGF2ZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCB0aGlzLmZsYXROb3RhdGlvbnMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgICAgICBub3Rlc1RvSW5kZXhbY10gKz0gb2N0YXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGNob3Agb2ZmIHRoZSBmcm9udCBvZiB0aGUgYXJyYXkgdG8gc3RhcnQgYXQgdGhlIHJvb3Qga2V5IGluIHRoZSBrZXkgc2lnbmF0dXJlXG4gICAgICAgIG5vdGVzVG9JbmRleC5zcGxpY2UoMCwgc3RhcnRQb3MpO1xuXG4gICAgICAgIC8vIGJ1aWxkIHRoZSBrZXkgc2lnbmF0dXJlXG4gICAgICAgIGlmIChtYWpvcikge1xuICAgICAgICAgICAgLy8gTUFKT1IgRnJvbSByb290OiB3aG9sZSBzdGVwLCB3aG9sZSBzdGVwLCBoYWxmIHN0ZXAsIHdob2xlIHN0ZXAsIHdob2xlIHN0ZXAsIHdob2xlIHN0ZXAsIGhhbGYgc3RlcFxuICAgICAgICAgICAgbm90ZXNJbktleS5wdXNoKCBub3Rlc1RvSW5kZXhbMF0gKTtcbiAgICAgICAgICAgIG5vdGVzSW5LZXkucHVzaCggbm90ZXNUb0luZGV4WzJdICk7XG4gICAgICAgICAgICBub3Rlc0luS2V5LnB1c2goIG5vdGVzVG9JbmRleFs0XSApO1xuICAgICAgICAgICAgbm90ZXNJbktleS5wdXNoKCBub3Rlc1RvSW5kZXhbNV0gKTtcbiAgICAgICAgICAgIG5vdGVzSW5LZXkucHVzaCggbm90ZXNUb0luZGV4WzddICk7XG4gICAgICAgICAgICBub3Rlc0luS2V5LnB1c2goIG5vdGVzVG9JbmRleFs5XSApO1xuICAgICAgICAgICAgbm90ZXNJbktleS5wdXNoKCBub3Rlc1RvSW5kZXhbMTFdICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBNSU5PUiBGcm9tIHJvb3Q6IHdob2xlIHN0ZXAsIGhhbGYgc3RlcCwgd2hvbGUgc3RlcCwgd2hvbGUgc3RlcCwgaGFsZiBzdGVwLCB3aG9sZSBzdGVwLCB3aG9sZSBzdGVwXG4gICAgICAgICAgICBub3Rlc0luS2V5LnB1c2goIG5vdGVzVG9JbmRleFswXSApO1xuICAgICAgICAgICAgbm90ZXNJbktleS5wdXNoKCBub3Rlc1RvSW5kZXhbMl0gKTtcbiAgICAgICAgICAgIG5vdGVzSW5LZXkucHVzaCggbm90ZXNUb0luZGV4WzNdICk7XG4gICAgICAgICAgICBub3Rlc0luS2V5LnB1c2goIG5vdGVzVG9JbmRleFs1XSApO1xuICAgICAgICAgICAgbm90ZXNJbktleS5wdXNoKCBub3Rlc1RvSW5kZXhbN10gKTtcbiAgICAgICAgICAgIG5vdGVzSW5LZXkucHVzaCggbm90ZXNUb0luZGV4WzhdICk7XG4gICAgICAgICAgICBub3Rlc0luS2V5LnB1c2goIG5vdGVzVG9JbmRleFsxMF0gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm90ZXNJbktleTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcHJlZ2VuZXJhdGUgYSBrZXkgc2lnbmF0dXJlIGxvb2t1cCB0YWJsZSBmb3IgZXZlcnkgbm90ZVxuICAgICAqL1xuICAgIGdlbmVyYXRlS2V5U2lnbmF0dXJlTG9va3VwKCkge1xuICAgICAgICB2YXIga3lzID0gdGhpcy5zaGFycE5vdGF0aW9ucztcbiAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBreXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIHRoaXMua2V5c1treXNbY11dID0gdGhpcy5ub3Rlc0luS2V5U2lnbmF0dXJlKGt5c1tjXSwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLmtleXNba3lzW2NdICsgJ20nXSA9IHRoaXMubm90ZXNJbktleVNpZ25hdHVyZShreXNbY10sIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxufTtcbiIsImltcG9ydCBCYXNlR3JvdXAgZnJvbSAnLi4vLi4vbm9kZV9tb2R1bGVzL3RyaXZyL3NyYy9iYXNlZ3JvdXAuZXM2JztcbmltcG9ydCBTdHlsZSBmcm9tICcuLi90aGVtZWluZy9zdHlsZS5lczYnO1xuaW1wb3J0IFRvbmVQbGF5YmFjayBmcm9tICcuLi90b25lcGxheWJhY2suZXM2JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRG9tZSBleHRlbmRzIEJhc2VHcm91cCB7XG4gICAgLyoqXG4gICAgICogb24gY3JlYXRlIHNjZW5lIChvciBlYXJsaWVzdCBwb3NzaWJsZSBvcHBvcnR1bml0eSlcbiAgICAgKiBAcGFyYW0gc2NlbmVcbiAgICAgKiBAcGFyYW0gY3VzdG9tXG4gICAgICovXG4gICAgb25DcmVhdGUoc2NlbmUsIGN1c3RvbSkge1xuICAgICAgICB2YXIgbWVzaCA9IG5ldyBUSFJFRS5NZXNoKHRoaXMuY3JlYXRlR2VvbWV0cnkoKSwgdGhpcy5jcmVhdGVNYXRlcmlhbCgpKTtcbiAgICAgICAgbWVzaC5wb3NpdGlvbi56ID0gNTtcbiAgICAgICAgdGhpcy5hZGQobWVzaCwgJ2RvbWUnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBvbiByZW5kZXJcbiAgICAgKiBAcGFyYW0gc2NlbmVjb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIG15Y29sbGVjdGlvblxuICAgICAqL1xuICAgIG9uUmVuZGVyKHNjZW5lY29sbGVjdGlvbiwgbXljb2xsZWN0aW9uKSB7XG4gICAgICAgIGlmIChUb25lUGxheWJhY2suaXNQbGF5aW5nKSB7XG4gICAgICAgICAgICB0aGlzLmdyb3VwLnJvdGF0aW9uLnkgKz0gTWF0aC5QSSAvIDEwMjQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgZ2xvYmUgZ2VvbWV0cnlcbiAgICAgKiBAcmV0dXJucyB7VEhSRUUuSWNvc2FoZWRyb25HZW9tZXRyeX1cbiAgICAgKi9cbiAgICBjcmVhdGVHZW9tZXRyeSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5JY29zYWhlZHJvbkdlb21ldHJ5KCA4MDAsIDIgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBjcmVhdGUgZ2xvYmUgbWF0ZXJpYWxcbiAgICAgKi9cbiAgICBjcmVhdGVNYXRlcmlhbCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCh7XG4gICAgICAgICAgICBjb2xvciAgICAgIDogIFN0eWxlLmRvbWUuY29sb3IsXG4gICAgICAgICAgICBlbWlzc2l2ZSAgIDogIFN0eWxlLmRvbWUuZW1pc3NpdmUsXG4gICAgICAgICAgICBzcGVjdWxhciAgIDogIFN0eWxlLmRvbWUuc3BlY3VsYXIsXG4gICAgICAgICAgICBzaWRlICAgICAgIDogIFRIUkVFLkJhY2tTaWRlLFxuICAgICAgICAgICAgc2hpbmluZXNzICA6ICAxMCxcbiAgICAgICAgICAgIHNoYWRpbmcgICAgOiAgVEhSRUUuRmxhdFNoYWRpbmcsXG4gICAgICAgICAgICB0cmFuc3BhcmVudDogMSxcbiAgICAgICAgICAgIG9wYWNpdHkgICAgOiAxXG4gICAgICAgIH0pO1xuICAgIH1cbn0iLCJpbXBvcnQgQmFzZUdyb3VwIGZyb20gJy4uLy4uLy4uL25vZGVfbW9kdWxlcy90cml2ci9zcmMvYmFzZWdyb3VwLmVzNic7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vLi4vaW5wdXQuZXM2JztcbmltcG9ydCBOb3RlIGZyb20gJy4uLy4uL211c2ljdGhlb3J5L25vdGUuZXM2JztcbmltcG9ydCBTdHlsZSBmcm9tICcuLi8uLi90aGVtZWluZy9zdHlsZS5lczYnO1xuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uL3V0aWxzLmVzNic7XG5pbXBvcnQgVG9uZVBsYXliYWNrIGZyb20gJy4uLy4uL3RvbmVwbGF5YmFjay5lczYnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlS2V5Ym9hcmQgZXh0ZW5kcyBCYXNlR3JvdXAge1xuICAgIG9uSW5pdGlhbGl6ZShwYXJhbXMpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGhvdyBtdWNoIHJvdGF0aW9uIG9jY3VycyBvbiBrZXlwcmVzc1xuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcm90YXRpb25PblByZXNzID0gTWF0aC5QSS8xNjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogbnVtYmVyIG9mIG9jdGF2ZXNcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX251bU9jdGF2ZXMgPSBwYXJhbXMub2N0YXZlcyA/IHBhcmFtcy5vY3RhdmVzIDogMjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogc3RhcnRpbmcgb2N0YXZlICh0byBiZXR0ZXIgbWF0Y2ggd2l0aCBNSURJIGlucHV0KVxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fc3RhcnRpbmdPY3RhdmUgPSBwYXJhbXMuc3RhcnRvY3RhdmUgPyBwYXJhbXMuc3RhcnRvY3RhdmUgOiAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzdGFydGluZyBub3RlIG9uIGtleWJvYXJkXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9zdGFydGluZ05vdGUgPSAnQyc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGtleSB2aXN1YWxzXG4gICAgICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2tleXMgPSBbXTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogbWlkaSBjaGFubmVscyB1c2VkXG4gICAgICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX21pZGljaGFubmVscyA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzdGFydGluZyBpbmRleCBhdCB3aGljaCBwb2ludCB0byBhbGxvY2F0ZSBNSURJIGNoYW5uZWxzXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9taWRpQ2hhbm5lbFN0YXJ0SW5kZXggPSAxMTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogc3VnZ2VzdGVkIGtleXMgZnJvbSBrZXkgc2lnbmF0dXJlIHByZWRpY3Rpb25cbiAgICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdWdnZXN0ZWRLZXlzID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIG9uIGNyZWF0ZSBzY2VuZSAob3IgZWFybGllc3QgcG9zc2libGUgb3Bwb3J0dW5pdHkpXG4gICAgICogQHBhcmFtIHNjZW5lXG4gICAgICogQHBhcmFtIGN1c3RvbVxuICAgICAqL1xuICAgIG9uQ3JlYXRlKHNjZW5lLCBjdXN0b20pIHtcbiAgICAgICAgLy9Ub25lUGxheWJhY2suYWRkRXZlbnRMaXN0ZW5lcignbWlkaWRhdGEnLCBkYXRhID0+IHRoaXMub25Tb25nRGF0YShkYXRhKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogb24gcmVuZGVyIHNjZW5lXG4gICAgICogQHBhcmFtIHNjZW5lXG4gICAgICogQHBhcmFtIGN1c3RvbVxuICAgICAqL1xuICAgIG9uUmVuZGVyKHNjZW5lLCBjdXN0b20pIHtcbiAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCB0aGlzLl9rZXlzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fa2V5c1tjXS5jb2xvcnR3ZWVuLmFuaW1hdGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2tleXNbY10ub2JqZWN0Lm1hdGVyaWFsLmNvbG9yLnNldFJHQihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fa2V5c1tjXS5jb2xvcnR3ZWVuLnJjb2xvci8xMDAsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleXNbY10uY29sb3J0d2Vlbi5nY29sb3IvMTAwLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9rZXlzW2NdLmNvbG9ydHdlZW4uYmNvbG9yLzEwMCApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogb24gYXNzZXRzIGxvYWRlZFxuICAgICAqIEBwYXJhbSBnZW9tZXRyeVxuICAgICAqL1xuICAgIG9uQXNzZXRzTG9hZGVkKGdlb21ldHJ5KSB7XG4gICAgICAgIHZhciBtYXQgPSBuZXcgVEhSRUUuTWVzaFN0YW5kYXJkTWF0ZXJpYWwoIHtcbiAgICAgICAgICAgIG1ldGFsbmVzczogMC43LFxuICAgICAgICAgICAgcm91Z2huZXNzOiAxLFxuICAgICAgICAgICAgc2lkZTogVEhSRUUuRnJvbnRTaWRlLFxuICAgICAgICAgICAgc2hhZGluZzogVEhSRUUuRmxhdFNoYWRpbmdcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc2V0dXBTY2VuZShnZW9tZXRyeSwgbWF0KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogZHluYW1pY2FsbHkgZ2VuZXJhdGUgY2lyY2xlIG9mIGtleXNcbiAgICAgKiBAcGFyYW0gZ2VvbWV0cnlcbiAgICAgKiBAcGFyYW0gbWF0ZXJpYWxcbiAgICAgKi9cbiAgICBzZXR1cFNjZW5lKGdlb21ldHJ5LCBtYXRlcmlhbCkge1xuICAgICAgICB2YXIgc3RhcnRPZmZzZXQgPSBOb3RlLmluZGV4T2ZOb3RhdGlvbih0aGlzLl9zdGFydGluZ05vdGUpO1xuICAgICAgICB2YXIgbnRpbmRleCA9IDA7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1Qb3NpdGlvbiA9IDA7XG4gICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgdGhpcy5fbnVtT2N0YXZlczsgYysrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8IE5vdGUuc2hhcnBOb3RhdGlvbnMubGVuZ3RoOyBkKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbm90ZSA9IE5vdGUubm90YXRpb25BdEluZGV4KGQgKyBzdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtUG9zaXRpb24gPSB0aGlzLmFkZEtleSh0cmFuc2Zvcm1Qb3NpdGlvbiwgbm90ZS5pbmRleE9mKCcjJykgPT09IC0xLCBub3RlLCBjLCBnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuICAgICAgICAgICAgICAgIG50aW5kZXggKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtUG9zaXRpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogb24gaW5hY3Rpdml0eSAoZmFkZSBhd2F5IGtleXMgYW5kIGNsZWFyIGtleSBzaWcpXG4gICAgICovXG4gICAgcmVzZXRLZXlzKCkge1xuICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHRoaXMuX2tleXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9rZXlzW2NdLnN1Z2dlc3RlZCkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50Q29sb3IgPSB0aGlzLl9rZXlzW2NdLm9iamVjdC5tYXRlcmlhbC5jb2xvci5nZXRIZXgoKTtcbiAgICAgICAgICAgICAgICBVdGlscy5jb3B5UHJvcHNUbyh0aGlzLl9rZXlzW2NdLmNvbG9ydHdlZW4sIFV0aWxzLmRlY1RvUkdCKGN1cnJlbnRDb2xvciwgMTAwKSwgJ2NvbG9yJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fa2V5c1tjXS5jb2xvcnR3ZWVuLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IFV0aWxzLmNvcHlQcm9wc1RvKHt9LCBVdGlscy5kZWNUb1JHQihTdHlsZS5rZXlzLm5vcm1hbFt0aGlzLl9rZXlzW2NdLnR5cGVdLmNvbG9yLCAxMDApLCAnY29sb3InKTtcbiAgICAgICAgICAgICAgICBjcmVhdGVqcy5Ud2Vlbi5nZXQodGhpcy5fa2V5c1tjXS5jb2xvcnR3ZWVuKVxuICAgICAgICAgICAgICAgICAgICAudG8odGFyZ2V0LCAyMDAwKVxuICAgICAgICAgICAgICAgICAgICAud2FpdCgxMDApIC8vIHdhaXQgYSBmZXcgdGlja3MsIG9yIHRoZSByZW5kZXIgY3ljbGUgd29uJ3QgcGljayB1cCB0aGUgY2hhbmdlcyB3aXRoIHRoZSBmbGFnXG4gICAgICAgICAgICAgICAgICAgIC5jYWxsKCBmdW5jdGlvbigpIHsgdGhpcy5hbmltYXRpbmcgPSBmYWxzZTsgfSApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY2hhbmdlIGtleSBzaWduYXR1cmUgdG8gbm90YXRpb24gZ2l2ZW5cbiAgICAgKiBAcGFyYW0gbm90YXRpb25cbiAgICAgKi9cbiAgICBjaGFuZ2VLZXlTaWduYXR1cmUobm90YXRpb24pIHtcbiAgICAgICAgdmFyIGM7XG4gICAgICAgIGZvciAoYyA9IDA7IGMgPCB0aGlzLnN1Z2dlc3RlZEtleXMubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlS2V5U3VnZ2VzdGlvbih0aGlzLnN1Z2dlc3RlZEtleXNbY10sIG5vdGF0aW9uLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdWdnZXN0ZWRLZXlzID0gTm90ZS5rZXlzW25vdGF0aW9uXTtcblxuICAgICAgICBmb3IgKGMgPSAwOyBjIDwgdGhpcy5zdWdnZXN0ZWRLZXlzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUtleVN1Z2dlc3Rpb24odGhpcy5zdWdnZXN0ZWRLZXlzW2NdLCBub3RhdGlvbiwgdHJ1ZSwgYyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiB0b2dnbGUga2V5IHByZXNzZWRcbiAgICAgKiBAcGFyYW0ga2V5XG4gICAgICovXG4gICAgdG9nZ2xlS2V5UHJlc3NlZChrKSB7XG4gICAgICAgIHZhciBrZXkgPSB0aGlzLmZpbmRLZXlPYmplY3RGb3JOb3RhdGlvbihrLm5vdGF0aW9uLCBrLm9jdGF2ZSk7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChrLnZlbG9jaXR5ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgVG9uZVBsYXliYWNrLm5vdGVPZmYoa2V5Lm5vdGF0aW9uLCBrZXkubWlkaWNoYW5uZWwsIDEvOCk7XG4gICAgICAgICAgICAgICAgdmFyIGNoYW5uZWxpbmRleCA9IHRoaXMuX21pZGljaGFubmVscy5pbmRleE9mKGtleS5taWRpY2hhbm5lbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWlkaWNoYW5uZWxzLnNwbGljZShjaGFubmVsaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9pbmFjdGl2aXR5VGltZXIpO1xuICAgICAgICAgICAgICAgIGtleS5vYmplY3Qucm90YXRpb24uc2V0KGtleS5vcmlnaW5hbFJvdGF0aW9uLngsIGtleS5vcmlnaW5hbFJvdGF0aW9uLnksIGtleS5vcmlnaW5hbFJvdGF0aW9uLnopO1xuICAgICAgICAgICAgICAgIGtleS5jdXJyZW50Um90YXRpb24gPSAwO1xuICAgICAgICAgICAgICAgIGtleS5taWRpY2hhbm5lbCA9IC0xO1xuICAgICAgICAgICAgICAgIGtleS5kb3duID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX21pZGljaGFubmVscyA9IHRoaXMuX21pZGljaGFubmVscy5zb3J0KCk7XG4gICAgICAgICAgICAgICAgdmFyIG1pZGljaGFubmVsID0gdGhpcy5fbWlkaWNoYW5uZWxzW3RoaXMuX21pZGljaGFubmVscy5sZW5ndGgtMV0gKyAxO1xuICAgICAgICAgICAgICAgIGlmICghbWlkaWNoYW5uZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgbWlkaWNoYW5uZWwgPSB0aGlzLl9taWRpQ2hhbm5lbFN0YXJ0SW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFRvbmVQbGF5YmFjay5ub3RlT24oVG9uZVBsYXliYWNrLlBJQU5PLCBrZXkubm90YXRpb24sIG1pZGljaGFubmVsKTtcbiAgICAgICAgICAgICAgICBrZXkuY3VycmVudFJvdGF0aW9uID0gay52ZWxvY2l0eSAqIHRoaXMuX3JvdGF0aW9uT25QcmVzcztcbiAgICAgICAgICAgICAgICBrZXkub2JqZWN0LnJvdGF0ZVgoa2V5LmN1cnJlbnRSb3RhdGlvbik7XG4gICAgICAgICAgICAgICAga2V5Lm1pZGljaGFubmVsID0gbWlkaWNoYW5uZWw7XG4gICAgICAgICAgICAgICAga2V5LmRvd24gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogdG9nZ2xlIGtleSBzdWdnZXN0aW9uXG4gICAgICogQHBhcmFtIG5vdGF0aW9uXG4gICAgICogQHBhcmFtIGtleXNpZ25vdGF0aW9uXG4gICAgICogQHBhcmFtIHRvZ2dsZVxuICAgICAqL1xuICAgIHRvZ2dsZUtleVN1Z2dlc3Rpb24obm90YXRpb24sIGtleXNpZ25vdGF0aW9uLCB0b2dnbGUpIHtcbiAgICAgICAgdmFyIG50SW5kZXggPSBOb3RlLmluZGV4T2ZOb3RhdGlvbihrZXlzaWdub3RhdGlvbik7XG4gICAgICAgIHZhciByb290Y2xyID0gU3R5bGUuY29sb3J3aGVlbFtudEluZGV4XTtcblxuICAgICAgICB2YXIga2V5cyA9IHRoaXMuZmluZEtleU9iamVjdHNGb3JOb3RhdGlvbihub3RhdGlvbik7XG5cbiAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBrZXlzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBpZiAodG9nZ2xlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNscjtcbiAgICAgICAgICAgICAgICBpZiAoIG50SW5kZXg9PT0wIHx8IG50SW5kZXg9PT0yIHx8IG50SW5kZXg9PT00IHx8IG50SW5kZXg9PT02KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsciA9IFN0eWxlLmtleXMuc3Ryb25nbHlTdWdnZXN0ZWRba2V5c1tjXS50eXBlXTtcbiAgICAgICAgICAgICAgICAgICAga2V5c1tjXS5zdWdnZXN0ZWQgPSAnc3Ryb25nbHlTdWdnZXN0ZWQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNsciA9IFN0eWxlLmtleXMuc3VnZ2VzdGVkW2tleXNbY10udHlwZV07XG4gICAgICAgICAgICAgICAgICAgIGtleXNbY10uc3VnZ2VzdGVkID0gJ3N1Z2dlc3RlZCc7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAga2V5c1tjXS5vYmplY3QubWF0ZXJpYWwuY29sb3Iuc2V0SGV4KHJvb3RjbHIpIDsvL2Nsci5jb2xvcik7XG4gICAgICAgICAgICAgIC8vICBrZXlzW2NdLm9iamVjdC5tYXRlcmlhbC5lbWlzc2l2ZS5zZXRIZXgocm9vdGNscikgOyAvL2Nsci5lbWlzc2l2ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGtleXNbY10ub2JqZWN0Lm1hdGVyaWFsLmNvbG9yLnNldEhleChTdHlsZS5rZXlzLm5vcm1hbFtrZXlzW2NdLnR5cGVdLmNvbG9yKTtcbiAgICAgICAgICAgICAgIC8vIGtleXNbY10ub2JqZWN0Lm1hdGVyaWFsLmVtaXNzaXZlLnNldEhleChTdHlsZS5rZXlzLm5vcm1hbFtrZXlzW2NdLnR5cGVdLmVtaXNzaXZlKTtcbiAgICAgICAgICAgICAgICBrZXlzW2NdLnN1Z2dlc3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlIHdoaXRlIGtleSBnZW9tZXRyeVxuICAgICAqIEByZXR1cm5zIHtUSFJFRS5NZXNofVxuICAgICAqL1xuICAgIGNyZWF0ZVdoaXRlS2V5KGdlb21ldHJ5LCBtYXRlcmlhbCkge1xuICAgICAgICB2YXIga2V5Z2VvbSA9IGdlb21ldHJ5LmNsb25lKCk7XG4gICAgICAgIHZhciBtYXQgPSBtYXRlcmlhbC5jbG9uZSgpO1xuICAgICAgICBtYXQuY29sb3Iuc2V0SGV4KFN0eWxlLmtleXMubm9ybWFsLndoaXRlLmNvbG9yKTtcbiAgICAgICAgbWF0LmVtaXNzaXZlLnNldEhleChTdHlsZS5rZXlzLm5vcm1hbC53aGl0ZS5lbWlzc2l2ZSk7XG4gICAgICAgIGtleWdlb20udHJhbnNsYXRlKCAwLCAtMTAsIDAgKTtcbiAgICAgICAgdmFyIGtleSA9IG5ldyBUSFJFRS5NZXNoKCBrZXlnZW9tLCBtYXQpO1xuICAgICAgICByZXR1cm4ga2V5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGNyZWF0ZSBibGFjayBrZXkgZ2VvbWV0cnlcbiAgICAgKiBAcmV0dXJucyB7VEhSRUUuTWVzaH1cbiAgICAgKi9cbiAgICBjcmVhdGVCbGFja0tleShnZW9tZXRyeSwgbWF0ZXJpYWwpIHtcbiAgICAgICAgdmFyIGtleWdlb20gPSBnZW9tZXRyeS5jbG9uZSgpO1xuICAgICAgICB2YXIgbWF0ID0gbWF0ZXJpYWwuY2xvbmUoKTtcbiAgICAgICAgbWF0LmNvbG9yLnNldEhleChTdHlsZS5rZXlzLm5vcm1hbC5ibGFjay5jb2xvcik7XG4gICAgICAgIG1hdC5lbWlzc2l2ZS5zZXRIZXgoU3R5bGUua2V5cy5ub3JtYWwuYmxhY2suZW1pc3NpdmUpO1xuICAgICAgICBrZXlnZW9tLnRyYW5zbGF0ZSggMCwgLTI1LCAwICk7XG4gICAgICAgIGtleWdlb20uc2NhbGUoMSwgLjUsIDEpO1xuICAgICAgICB2YXIga2V5ID0gbmV3IFRIUkVFLk1lc2goIGtleWdlb20sIG1hdCk7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogY3JlYXRlIGFuZCBhZGQgYSBrZXlcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdHJhbnNmb3JtUG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHdoaXRlXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5vdGF0aW9uXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9jdGF2ZVxuICAgICAqIEBwYXJhbSB7VEhSRUUuR2VvbWV0cnl9IGdlb21ldHJ5XG4gICAgICogQHBhcmFtIHtUSFJFRS5NYXRlcmlhbH0gbWF0ZXJpYWxcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHRyYW5zZm9ybSBwb3NpdGlvblxuICAgICAqL1xuICAgIGFkZEtleSh0cmFuc2Zvcm1Qb3NpdGlvbiwgd2hpdGUsIG5vdGF0aW9uLCBvY3RhdmUsIGdlb21ldHJ5LCBtYXRlcmlhbCkge1xuICAgICAgICB2YXIga2V5LCBjb2xvciwgcm90YXRpb247XG4gICAgICAgIGlmICh3aGl0ZSkge1xuICAgICAgICAgICAgY29sb3IgPSAnd2hpdGUnO1xuICAgICAgICAgICAga2V5ID0gdGhpcy5jcmVhdGVXaGl0ZUtleShnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29sb3IgPSAnYmxhY2snO1xuICAgICAgICAgICAga2V5ID0gdGhpcy5jcmVhdGVCbGFja0tleShnZW9tZXRyeSwgbWF0ZXJpYWwpO1xuICAgICAgICB9XG4gICAgICAgIHRyYW5zZm9ybVBvc2l0aW9uID0gdGhpcy5hcHBseUtleVRyYW5zZm9ybShrZXksIHRyYW5zZm9ybVBvc2l0aW9uLCB3aGl0ZSk7XG4gICAgICAgIHRoaXMuX2tleXMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBjb2xvcixcbiAgICAgICAgICAgIG9iamVjdDoga2V5LFxuICAgICAgICAgICAgb2N0YXZlOiBvY3RhdmUgKyB0aGlzLl9zdGFydGluZ09jdGF2ZSxcbiAgICAgICAgICAgIGNvbG9ydHdlZW46IHt9LFxuICAgICAgICAgICAgbm90YXRpb246IG5vdGF0aW9uLFxuICAgICAgICAgICAgb3JpZ2luYWxSb3RhdGlvbjoge1xuICAgICAgICAgICAgICAgIHg6IGtleS5yb3RhdGlvbi54LFxuICAgICAgICAgICAgICAgIHk6IGtleS5yb3RhdGlvbi55LFxuICAgICAgICAgICAgICAgIHo6IGtleS5yb3RhdGlvbi56IH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYWRkKGtleSwna2V5XycgKyBub3RhdGlvbik7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1Qb3NpdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBhcHBseSBrZXkgdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHtUSFJFRS5NZXNofSBrZXltZXNoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHRyYW5zZm9ybVBvc2l0aW9uXG4gICAgICogQHBhcmFtIHtCb29sZWFufSB3aGl0ZWtleVxuICAgICAqL1xuICAgIGFwcGx5S2V5VHJhbnNmb3JtKGtleW1lc2gsIHRyYW5zZm9ybVBvc2l0aW9uLCB3aGl0ZWtleSkge31cblxuICAgIC8qKlxuICAgICAqIGZpbmQgdGhlIGtleSBmb3IgYSBzcGVjaWZpYyBub3RhdGlvblxuICAgICAqIEBwYXJhbSBub3RhdGlvblxuICAgICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICAgKi9cbiAgICBmaW5kS2V5T2JqZWN0c0Zvck5vdGF0aW9uKG5vdGF0aW9uKSB7XG4gICAgICAgIHZhciBrZXlzID0gW107XG4gICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgdGhpcy5fa2V5cy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2tleXNbY10ubm90YXRpb24gPT09IG5vdGF0aW9uKSB7XG4gICAgICAgICAgICAgICAga2V5cy5wdXNoKHRoaXMuX2tleXNbY10pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBrZXlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZpbmQgc3BlY2lmaWMga2V5IG9iamVjdCBmb3Igbm90YXRpb24gYW5kIG9jdGF2ZVxuICAgICAqIEBwYXJhbSBub3RhdGlvblxuICAgICAqIEBwYXJhbSBvY3RhdmVcbiAgICAgKi9cbiAgICBmaW5kS2V5T2JqZWN0Rm9yTm90YXRpb24obm90YXRpb24sIG9jdGF2ZSkge1xuICAgICAgICB2YXIgbm90YXRpb25PZmZzZXQgPSBOb3RlLmluZGV4T2ZOb3RhdGlvbih0aGlzLl9zdGFydGluZ05vdGUpO1xuICAgICAgICB2YXIgaW5keCA9IG9jdGF2ZSAqIE5vdGUuc2hhcnBOb3RhdGlvbnMubGVuZ3RoICsgTm90ZS5zaGFycE5vdGF0aW9ucy5pbmRleE9mKG5vdGF0aW9uKSAtIG5vdGF0aW9uT2Zmc2V0O1xuICAgICAgICByZXR1cm4gdGhpcy5fa2V5c1tpbmR4XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBvbiBzb25nIGRhdGFcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqL1xuICAgIG9uU29uZ0RhdGEoZGF0YSkge1xuICAgICAgICB2YXIgbm90YXRpb24gPSBOb3RlLk1JREl0b05vdGF0aW9uKGRhdGEubm90ZSk7XG4gICAgICAgIHZhciBrZXkgPSB0aGlzLmZpbmRLZXlPYmplY3RzRm9yTm90YXRpb24obm90YXRpb24pO1xuICAgICAgICB0aGlzLnRvZ2dsZUtleVByZXNzZWQoa2V5WzBdLCBkYXRhLnZlbG9jaXR5IC8gMTI3KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgQmFzZUtleWJvYXJkIGZyb20gJy4vYmFzZWtleWJvYXJkLmVzNic7XG5pbXBvcnQgSW5wdXQgZnJvbSAnLi4vLi4vaW5wdXQuZXM2JztcbmltcG9ydCBOb3RlIGZyb20gJy4uLy4uL211c2ljdGhlb3J5L25vdGUuZXM2JztcbmltcG9ydCBTdHlsZSBmcm9tICcuLi8uLi90aGVtZWluZy9zdHlsZS5lczYnO1xuaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uL3V0aWxzLmVzNic7XG5pbXBvcnQgVG9uZVBsYXliYWNrIGZyb20gJy4uLy4uL3RvbmVwbGF5YmFjay5lczYnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaXJjdWxhcktleWJvYXJkIGV4dGVuZHMgQmFzZUtleWJvYXJkIHtcbiAgICAvKipcbiAgICAgKiBhcHBseSBrZXkgdHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHtUSFJFRS5NZXNofSBrZXltZXNoXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHBvc2l0aW9uIGluIGtleWJvYXJkXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGtleWluZGV4XG4gICAgICogQHBhcmFtIHtCb29sZWFufSB3aGl0ZWtleVxuICAgICAqL1xuICAgIGFwcGx5S2V5VHJhbnNmb3JtKGtleW1lc2gsIHRyYW5zZm9ybVBvc2l0aW9uLCB3aGl0ZWtleSkge1xuICAgICAgICB2YXIgcm90YXRlID0gMDtcbiAgICAgICAgdmFyIGV4dHJhUm90YXRlID0gMDtcbiAgICAgICAgaWYgKHdoaXRla2V5KSB7XG4gICAgICAgICAgICByb3RhdGUgPSAoTWF0aC5QSSAqIDIpIC8gMTQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleHRyYVJvdGF0ZSA9IChNYXRoLlBJICogMikgLyAyODtcbiAgICAgICAgfVxuICAgICAgICBrZXltZXNoLnJvdGF0aW9uLnogPSB0cmFuc2Zvcm1Qb3NpdGlvbiArIHJvdGF0ZSArIGV4dHJhUm90YXRlO1xuXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1Qb3NpdGlvbiArIHJvdGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXR1cCBzY2VuZVxuICAgICAqIEBwYXJhbSBnZW9tZXRyeVxuICAgICAqIEBwYXJhbSBtYXRlcmlhbFxuICAgICAqL1xuICAgIHNldHVwU2NlbmUoZ2VvbWV0cnksIG1hdGVyaWFsKSB7XG4gICAgICAgIHN1cGVyLnNldHVwU2NlbmUoZ2VvbWV0cnksIG1hdGVyaWFsKTtcbiAgICAgICAgdGhpcy5ncm91cC5wb3NpdGlvbi56ID0gLTQwMDtcbiAgICAgICAgdGhpcy5ncm91cC5zY2FsZS5zZXQoMTAsIDEwLCAxMCk7XG4gICAgfVxufVxuIiwiaW1wb3J0IEJhc2VLZXlib2FyZCBmcm9tICcuL2Jhc2VrZXlib2FyZC5lczYnO1xuaW1wb3J0IElucHV0IGZyb20gJy4uLy4uL2lucHV0LmVzNic7XG5pbXBvcnQgTm90ZSBmcm9tICcuLi8uLi9tdXNpY3RoZW9yeS9ub3RlLmVzNic7XG5pbXBvcnQgU3R5bGUgZnJvbSAnLi4vLi4vdGhlbWVpbmcvc3R5bGUuZXM2JztcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi91dGlscy5lczYnO1xuaW1wb3J0IFRvbmVQbGF5YmFjayBmcm9tICcuLi8uLi90b25lcGxheWJhY2suZXM2JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhZGl0aW9uYWxLZXlib2FyZCBleHRlbmRzIEJhc2VLZXlib2FyZCB7XG4gICAgb25Jbml0aWFsaXplKHBhcmFtcykge1xuICAgICAgICBzdXBlci5vbkluaXRpYWxpemUocGFyYW1zKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogaG93IG11Y2ggcm90YXRpb24gb2NjdXJzIG9uIGtleXByZXNzXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9yb3RhdGlvbk9uUHJlc3MgPSBNYXRoLlBJLzY0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFwcGx5IGtleSB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge1RIUkVFLk1lc2h9IGtleW1lc2hcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcG9zaXRpb24gaW4ga2V5Ym9hcmRcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHdoaXRla2V5XG4gICAgICogQHJldHVybiB7TnVtYmVyfSBjdXJyZW50IHBvc2l0aW9uXG4gICAgICovXG4gICAgYXBwbHlLZXlUcmFuc2Zvcm0oa2V5bWVzaCwgdHJhbnNmb3JtUG9zaXRpb24sIHdoaXRla2V5KSB7XG4gICAgICAgIHZhciB0cmFuc2xhdGUgPSAyO1xuICAgICAgICBpZiAoIXdoaXRla2V5KSB7XG4gICAgICAgICAgICBrZXltZXNoLnBvc2l0aW9uLnkgPSA1O1xuICAgICAgICAgICAga2V5bWVzaC5wb3NpdGlvbi56ID0gMTtcbiAgICAgICAgICAgIGtleW1lc2gucG9zaXRpb24ueCA9IHRyYW5zZm9ybVBvc2l0aW9uICsxO1xuICAgICAgICAgICAgdHJhbnNsYXRlID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGtleW1lc2gucG9zaXRpb24ueCA9IHRyYW5zZm9ybVBvc2l0aW9uICsyO1xuICAgICAgICB9XG4gICAgICAgIGtleW1lc2gucm90YXRpb24ueCA9IDA7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1Qb3NpdGlvbiArIHRyYW5zbGF0ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXR1cCBzY2VuZVxuICAgICAqIEBwYXJhbSBnZW9tZXRyeVxuICAgICAqIEBwYXJhbSBtYXRlcmlhbFxuICAgICAqL1xuICAgIHNldHVwU2NlbmUoZ2VvbWV0cnksIG1hdGVyaWFsKSB7XG4gICAgICAgIHZhciBsYXN0VHJhbnNmb3JtUG9zaXRpb24gPSBzdXBlci5zZXR1cFNjZW5lKGdlb21ldHJ5LCBtYXRlcmlhbCk7XG4gICAgICAgIHRoaXMuZ3JvdXAucG9zaXRpb24ueCA9IC1sYXN0VHJhbnNmb3JtUG9zaXRpb24vMiAqIDEwO1xuICAgICAgICB0aGlzLmdyb3VwLnBvc2l0aW9uLnogPSAtMjAwO1xuICAgICAgICB0aGlzLmdyb3VwLnBvc2l0aW9uLnkgPSAtMjAwO1xuICAgICAgICB0aGlzLmdyb3VwLnJvdGF0aW9uLnggPSAtTWF0aC5QSS8yO1xuICAgICAgICB0aGlzLmdyb3VwLnNjYWxlLnNldCgxMCwgMTAsIDEwKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgQmFzZUdyb3VwIGZyb20gJy4uLy4uL25vZGVfbW9kdWxlcy90cml2ci9zcmMvYmFzZWdyb3VwLmVzNic7XG5pbXBvcnQgU3R5bGUgZnJvbSAnLi4vdGhlbWVpbmcvc3R5bGUuZXM2JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlnaHRpbmcgZXh0ZW5kcyBCYXNlR3JvdXAge1xuICAgIC8qKlxuICAgICAqIG9uIGNyZWF0ZSBzY2VuZSAob3IgZWFybGllc3QgcG9zc2libGUgb3Bwb3J0dW5pdHkpXG4gICAgICogQHBhcmFtIHNjZW5lXG4gICAgICogQHBhcmFtIGN1c3RvbVxuICAgICAqL1xuICAgIG9uQ3JlYXRlKHNjZW5lLCBjdXN0b20pIHtcbiAgICAgICAgdmFyIGxpZ2h0ID0gbmV3IFRIUkVFLkhlbWlzcGhlcmVMaWdodCggU3R5bGUubGlnaHRpbmcuaGVtaXNwaGVyZS50b3AsIFN0eWxlLmxpZ2h0aW5nLmhlbWlzcGhlcmUuYm90dG9tLCA0ICk7XG4gICAgICAgIHZhciBzcG90TGlnaHQgPSBuZXcgVEhSRUUuU3BvdExpZ2h0KCBTdHlsZS5saWdodGluZy5zcG90bGlnaHQgKTtcbiAgICAgICAgc3BvdExpZ2h0LnBvc2l0aW9uLnNldCggMCwgMCwgNDAwICk7XG4gICAgICAgIHNwb3RMaWdodC5yb3RhdGlvbi54ID0gTWF0aC5QSSAvIDI7XG5cbiAgICAgICAgc3BvdExpZ2h0LnNoYWRvdy5tYXBTaXplLndpZHRoID0gMTAyNDtcbiAgICAgICAgc3BvdExpZ2h0LnNoYWRvdy5tYXBTaXplLmhlaWdodCA9IDEwMjQ7XG5cbiAgICAgICAgc3BvdExpZ2h0LnNoYWRvdy5jYW1lcmEubmVhciA9IDEwMDtcbiAgICAgICAgc3BvdExpZ2h0LnNoYWRvdy5jYW1lcmEuZmFyID0gNDAwO1xuICAgICAgICBzcG90TGlnaHQuc2hhZG93LmNhbWVyYS5mb3YgPSAzMDtcblxuICAgICAgICB0aGlzLmFkZChzcG90TGlnaHQpO1xuICAgICAgICB0aGlzLmFkZChsaWdodCk7XG4gICAgfVxufSIsImltcG9ydCBTaGFkZXJzIGZyb20gJy4vLi4vc2hhZGVycy5lczYnO1xuaW1wb3J0IEJhc2VHcm91cCBmcm9tICcuLi8uLi9ub2RlX21vZHVsZXMvdHJpdnIvc3JjL2Jhc2Vncm91cC5lczYnO1xuaW1wb3J0IFN0eWxlIGZyb20gJy4uL3RoZW1laW5nL3N0eWxlLmVzNic7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vdXRpbHMuZXM2JztcbmltcG9ydCBUb25lUGxheWJhY2sgZnJvbSAnLi4vdG9uZXBsYXliYWNrLmVzNic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1ldHJvbm9tZSBleHRlbmRzIEJhc2VHcm91cCB7XG4gICAgb25Jbml0aWFsaXplKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogbWV0cm9ub21lIGhhbW1lcnMgaW4gc2NlbmVcbiAgICAgICAgICogQHR5cGUge0FycmF5fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5faGFtbWVycyA9IFtdO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBzeW50aFxuICAgICAgICAgKiBAdHlwZSB7VG9uZX1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIC8vdGhpcy5fc3ludGggPSBuZXcgVG9uZS5EcnVtU3ludGgoKS50b01hc3RlcigpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiB0d2VlbiB0YXJnZXRzXG4gICAgICAgICAqIEB0eXBlIHt7ZHJ1bToge2FuaW1hdGluZzogYm9vbGVhbiwgcHJvcHM6IHt9fX19XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl90d2VlblRhcmdldHMgPSB7XG4gICAgICAgICAgICBkcnVtOiB7IGFuaW1hdGluZzogZmFsc2UsIHByb3BzOiB7fSB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuc2V0SGl0Q29sb3IoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXQgZHJ1bSBoaXQvdHJpZ2dlciBjb2xvclxuICAgICAqIEBwYXJhbSBoZXhcbiAgICAgKi9cbiAgICBzZXRIaXRDb2xvcihoZXgpIHtcbiAgICAgICAgaWYgKGhleCkge1xuICAgICAgICAgICAgdGhpcy5faGl0Q29sb3IgPSBVdGlscy5kZWNUb1JHQihoZXgsIDEwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9oaXRDb2xvciA9IFV0aWxzLmRlY1RvUkdCKFN0eWxlLm1ldHJvbm9tZS5oYW1tZXIuaGl0Y29sb3IsIDEwMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkNyZWF0ZShzY2VuZWNvbGxlY3Rpb24sIG15Y29sbGVjdGlvbikge1xuICAgICAgICAvL3RoaXMuYWRkSGFtbWVyKCdyaWdodCcsIE1hdGguUEkvNjQsIE1hdGguUEkgKiAyLCAnQzQnKTtcbiAgICAgICAgLy90aGlzLmFkZEhhbW1lcignbGVmdCcsIE1hdGguUEkvMTI4LCBNYXRoLlBJLzQsICdBNCcpO1xuICAgICAgICB0aGlzLmFkZEhhbW1lcigndXAnLCBNYXRoLlBJLzEyOCwgTWF0aC5QSS8yLCAnRzQnKTtcbiAgICAgICAgdGhpcy5hZGRIYW1tZXIoJ2Rvd24nLCBNYXRoLlBJLzMyLCAwLCAnRjMnKTtcbiAgICAgICAgdGhpcy5hZGREcnVtKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogb24gcmVuZGVyXG4gICAgICogQHBhcmFtIHNjZW5lY29sbGVjdGlvblxuICAgICAqIEBwYXJhbSBteWNvbGxlY3Rpb25cbiAgICAgKi9cbiAgICBvblJlbmRlcihzY2VuZWNvbGxlY3Rpb24sIG15Y29sbGVjdGlvbikge1xuICAgICAgICB0aGlzLmFuaW1hdGVIYW1tZXJzKCk7XG4gICAgICAgIHRoaXMuYW5pbWF0ZURydW0oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZW5kZXIgY3ljbGUgZm9yIGRydW1cbiAgICAgKi9cbiAgICBhbmltYXRlRHJ1bSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3R3ZWVuVGFyZ2V0cy5kcnVtLmFuaW1hdGluZykge1xuICAgICAgICAgICAgdGhpcy5kcnVtLnBvc2l0aW9uLnogPSB0aGlzLl90d2VlblRhcmdldHMuZHJ1bS5wcm9wcy56UG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLmRydW0ubWF0ZXJpYWwuYnVtcFNjYWxlID0gdGhpcy5fdHdlZW5UYXJnZXRzLmRydW0ucHJvcHMuYnVtcHNjYWxlO1xuICAgICAgICAgICAgdGhpcy5kcnVtLm1hdGVyaWFsLmNvbG9yLnNldFJHQihcbiAgICAgICAgICAgICAgICB0aGlzLl90d2VlblRhcmdldHMuZHJ1bS5wcm9wcy5yLzEwMCxcbiAgICAgICAgICAgICAgICB0aGlzLl90d2VlblRhcmdldHMuZHJ1bS5wcm9wcy5nLzEwMCxcbiAgICAgICAgICAgICAgICB0aGlzLl90d2VlblRhcmdldHMuZHJ1bS5wcm9wcy5iLzEwMCApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogcmVuZGVyIGN5Y2xlIGZvciBoYW1tZXJzXG4gICAgICovXG4gICAgYW5pbWF0ZUhhbW1lcnMoKSB7XG4gICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgdGhpcy5faGFtbWVycy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgdmFyIGhhbW1lciA9IHRoaXMuX2hhbW1lcnNbY107XG5cbiAgICAgICAgICAgIGlmIChoYW1tZXIuYW5pbWF0aW5nR2xvdykge1xuICAgICAgICAgICAgICAgIGhhbW1lci5nbG93Lm1hdGVyaWFsLmNvbG9yLnNldFJHQihcbiAgICAgICAgICAgICAgICAgICAgaGFtbWVyLmdsb3dDb2xvci5yLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgaGFtbWVyLmdsb3dDb2xvci5nLzEwMCxcbiAgICAgICAgICAgICAgICAgICAgaGFtbWVyLmdsb3dDb2xvci5iLzEwMCApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbmV3cm90YXRpb24gPSBoYW1tZXIucGl2b3Qucm90YXRpb25baGFtbWVyLnJvdGF0aW9uYXhpc10gKyBoYW1tZXIuZGlyZWN0aW9uICogaGFtbWVyLnJhdGU7XG5cbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhuZXdyb3RhdGlvbikgPiBNYXRoLlBJIC0gTWF0aC5QSS8xNikge1xuICAgICAgICAgICAgICAgIGhhbW1lci5kaXJlY3Rpb24gKj0gLTE7XG4gICAgICAgICAgICAgICAgbmV3cm90YXRpb24gPSBNYXRoLmFicyhuZXdyb3RhdGlvbikvbmV3cm90YXRpb24gKiAoTWF0aC5QSSAtIE1hdGguUEkvMTYpO1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlckRydW0oaGFtbWVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhhbW1lci5waXZvdC5yb3RhdGlvbltoYW1tZXIucm90YXRpb25heGlzXSA9IG5ld3JvdGF0aW9uO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogc291bmQgdGhlIGRydW0sIHRoZSBoYW1tZXIgaGl0IGl0XG4gICAgICogQHBhcmFtIGhhbW1lclxuICAgICAqL1xuICAgIHRyaWdnZXJEcnVtKGhhbW1lcikge1xuICAgICAgICBUb25lUGxheWJhY2subm90ZU9uKFRvbmVQbGF5YmFjay5TWU5USERSVU0sIGhhbW1lci5ub3RlLCAxMCwgMS84KTtcbiAgICAgICAvLyB0aGlzLl9zeW50aC50cmlnZ2VyQXR0YWNrUmVsZWFzZShoYW1tZXIubm90ZSwgXCIxNm5cIik7XG4gICAgICAgIGhhbW1lci5hbmltYXRpbmdHbG93ID0gdHJ1ZTtcbiAgICAgICAgdmFyIHN0YXJ0Y29sb3IgPSBVdGlscy5kZWNUb1JHQihTdHlsZS5tZXRyb25vbWUuaGFtbWVyLmNvbG9yLCAxMDApO1xuICAgICAgICB2YXIgZW5kY29sb3IgPSB0aGlzLl9oaXRDb2xvcjtcbiAgICAgICAgaGFtbWVyLmdsb3dDb2xvci5yID0gc3RhcnRjb2xvci5yO1xuICAgICAgICBoYW1tZXIuZ2xvd0NvbG9yLmcgPSBzdGFydGNvbG9yLmc7XG4gICAgICAgIGhhbW1lci5nbG93Q29sb3IuYiA9IHN0YXJ0Y29sb3IuYjtcbiAgICAgICAgY3JlYXRlanMuVHdlZW4uZ2V0KGhhbW1lci5nbG93Q29sb3IpXG4gICAgICAgICAgICAudG8oeyByOiBlbmRjb2xvci5yLCBnOiBlbmRjb2xvci5nLCBiOiBlbmRjb2xvci5iIH0sIDUwMClcbiAgICAgICAgICAgIC50byh7IHI6IHN0YXJ0Y29sb3IuciwgZzogc3RhcnRjb2xvci5nLCBiOiBzdGFydGNvbG9yLmIgfSwgNTAwKVxuICAgICAgICAgICAgLndhaXQoMTAwKSAvLyB3YWl0IGEgZmV3IHRpY2tzLCBvciB0aGUgcmVuZGVyIGN5Y2xlIHdvbid0IHBpY2sgdXAgdGhlIGNoYW5nZXMgd2l0aCB0aGUgZmxhZ1xuICAgICAgICAgICAgLmNhbGwoIGZ1bmN0aW9uIChzY29wZSkgeyBzY29wZS5hbmltYXRpbmdHbG93ID0gZmFsc2U7IH0gKTtcblxuICAgICAgICB2YXIgc3RhcnRjb2xvciA9IFV0aWxzLmRlY1RvUkdCKFN0eWxlLm1ldHJvbm9tZS5kcnVtLmNvbG9yLCAxMDApO1xuICAgICAgICB2YXIgZW5kY29sb3IgPSB0aGlzLl9oaXRDb2xvcjtcbiAgICAgICAgdGhpcy5fdHdlZW5UYXJnZXRzLmRydW0ucHJvcHMuciA9IHN0YXJ0Y29sb3IucjtcbiAgICAgICAgdGhpcy5fdHdlZW5UYXJnZXRzLmRydW0ucHJvcHMuZyA9IHN0YXJ0Y29sb3IuZztcbiAgICAgICAgdGhpcy5fdHdlZW5UYXJnZXRzLmRydW0ucHJvcHMuYiA9IHN0YXJ0Y29sb3IuYjtcbiAgICAgICAgdGhpcy5fdHdlZW5UYXJnZXRzLmRydW0ucHJvcHMuelBvc2l0aW9uID0gLTQwMDtcbiAgICAgICAgdGhpcy5fdHdlZW5UYXJnZXRzLmRydW0ucHJvcHMuYnVtcHNjYWxlID0gMDtcbiAgICAgICAgdGhpcy5fdHdlZW5UYXJnZXRzLmRydW0uYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fdHdlZW5UYXJnZXRzLmRydW0uY3VycmVudFR3ZWVuID0gY3JlYXRlanMuVHdlZW4uZ2V0KHRoaXMuX3R3ZWVuVGFyZ2V0cy5kcnVtLnByb3BzKVxuICAgICAgICAgICAgLnRvKHtcbiAgICAgICAgICAgICAgICByOiBlbmRjb2xvci5yLCBnOiBlbmRjb2xvci5nLCBiOiBlbmRjb2xvci5iLFxuICAgICAgICAgICAgICAgIGJ1bXBzY2FsZTogMS41LFxuICAgICAgICAgICAgICAgIHpQb3NpdGlvbjogLTQwMCArIGhhbW1lci5kaXJlY3Rpb24gKiA1MCB9LCAxNTApXG4gICAgICAgICAgICAudG8oe1xuICAgICAgICAgICAgICAgIHI6IHN0YXJ0Y29sb3IuciwgZzogc3RhcnRjb2xvci5nLCBiOiBzdGFydGNvbG9yLmIsXG4gICAgICAgICAgICAgICAgYnVtcHNjYWxlOiAwLFxuICAgICAgICAgICAgICAgIHpQb3NpdGlvbjogLTQwMCB9LCAxNTApXG4gICAgICAgICAgICAud2FpdCgxMDApIC8vIHdhaXQgYSBmZXcgdGlja3MsIG9yIHRoZSByZW5kZXIgY3ljbGUgd29uJ3QgcGljayB1cCB0aGUgY2hhbmdlcyB3aXRoIHRoZSBmbGFnXG4gICAgICAgICAgICAuY2FsbCggKCkgPT4geyB0aGlzLl90d2VlblRhcmdldHMuZHJ1bS5hbmltYXRpbmcgPSBmYWxzZTsgfSApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZCBjZW50ZXIgZHJ1bVxuICAgICAqL1xuICAgIGFkZERydW0oKSB7XG4gICAgICAgIHZhciBkcnVtZ2VvbSA9IG5ldyBUSFJFRS5DaXJjbGVHZW9tZXRyeSggMzAsIDI0ICk7XG4gICAgICAgIGRydW1nZW9tLnNjYWxlKDEsMSwgMC43NSk7XG4gICAgICAgIHZhciBtYXBIZWlnaHQgPSBuZXcgVEhSRUUuVGV4dHVyZUxvYWRlcigpLmxvYWQoU3R5bGUubWV0cm9ub21lLmRydW0uYnVtcG1hcCk7XG4gICAgICAgIG1hcEhlaWdodC5hbmlzb3Ryb3B5ID0gNDtcbiAgICAgICAgbWFwSGVpZ2h0LnJlcGVhdC5zZXQoMSwgMSk7XG4gICAgICAgIG1hcEhlaWdodC53cmFwUyA9IG1hcEhlaWdodC53cmFwVCA9IFRIUkVFLkNsYW1wVG9FZGdlV3JhcHBpbmc7XG4gICAgICAgIG1hcEhlaWdodC5mb3JtYXQgPSBUSFJFRS5SR0JGb3JtYXQ7XG5cbiAgICAgICAgdmFyIG1hdGVyaWFsID0gbmV3IFRIUkVFLk1lc2hQaG9uZ01hdGVyaWFsKCB7XG4gICAgICAgICAgICBjb2xvcjogU3R5bGUubWV0cm9ub21lLmRydW0uY29sb3IsXG4gICAgICAgICAgICBlbWlzc2l2ZTogU3R5bGUubWV0cm9ub21lLmRydW0uZW1pc3NpdmUsXG4gICAgICAgICAgICBzcGVjdWxhcjogU3R5bGUubWV0cm9ub21lLmRydW0uc3BlY3VsYXIsXG4gICAgICAgICAgICBidW1wTWFwOiBtYXBIZWlnaHQsXG4gICAgICAgICAgICBidW1wU2NhbGU6IDAsXG4gICAgICAgIH0gKTtcblxuICAgICAgICB0aGlzLmRydW0gPSBuZXcgVEhSRUUuTWVzaCggZHJ1bWdlb20sIG1hdGVyaWFsICk7XG4gICAgICAgIHRoaXMuZHJ1bS5wb3NpdGlvbi56ID0gLTQwMDtcbiAgICAgICAgdGhpcy5hZGQodGhpcy5kcnVtLCAnZHJ1bScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZCBtZXRyb25vbWUgaGFtbWVyXG4gICAgICogQHBhcmFtIG9yaWdpblxuICAgICAqIEBwYXJhbSByYXRlXG4gICAgICogQHBhcmFtIG9mZnNldFxuICAgICAqL1xuICAgIGFkZEhhbW1lcihvcmlnaW4sIHJhdGUsIG9mZnNldCwgdG9uZSkge1xuICAgICAgICB2YXIgaGFtbWVyZ2VvbSA9IG5ldyBUSFJFRS5TcGhlcmVHZW9tZXRyeSg1KTtcbiAgICAgICAgdmFyIGNlbnRlcnBpdm90ID0gbmV3IFRIUkVFLk9iamVjdDNEKCk7XG5cbiAgICAgICAgdmFyIHRleHR1cmVDdWJlID0gbmV3IFRIUkVFLkN1YmVUZXh0dXJlTG9hZGVyKCkubG9hZChTdHlsZS5tZXRyb25vbWUuaGFtbWVyLnJlZnJhY3Rpb25jdWJlKTtcbiAgICAgICAgdGV4dHVyZUN1YmUubWFwcGluZyA9IFRIUkVFLkN1YmVSZWZyYWN0aW9uTWFwcGluZztcblxuICAgICAgICB2YXIgaW5uZXJtYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCgge1xuICAgICAgICAgICAgZW52TWFwOiB0ZXh0dXJlQ3ViZSB9ICk7XG5cbiAgICAgICAgdmFyIG91dGVybWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoIHtcbiAgICAgICAgICAgIGNvbG9yOiBTdHlsZS5tZXRyb25vbWUuaGFtbWVyLmNvbG9yLFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICAgICAgICB3aXJlZnJhbWU6IHRydWUsXG4gICAgICAgICAgICBvcGFjaXR5OiAwLjUgfSApO1xuXG5cbiAgICAgICAgdmFyIGhhbW1lciA9IG5ldyBUSFJFRS5NZXNoKCBoYW1tZXJnZW9tLCBpbm5lcm1hdGVyaWFsICk7XG4gICAgICAgIGhhbW1lci5uYW1lID0gJ2JhbGwnO1xuICAgICAgICBjZW50ZXJwaXZvdC5hZGQoaGFtbWVyKTtcbiAgICAgICAgY2VudGVycGl2b3QucG9zaXRpb24ueiA9IC00MDA7XG5cbiAgICAgICAgdmFyIGdsb3cgPSBuZXcgVEhSRUUuTWVzaCggaGFtbWVyZ2VvbS5jbG9uZSgpLCBvdXRlcm1hdGVyaWFsICk7XG4gICAgICAgIGdsb3cubmFtZSA9ICdnbG93JztcbiAgICAgICAgZ2xvdy5zY2FsZS5tdWx0aXBseVNjYWxhcigxLjIpO1xuICAgICAgICBjZW50ZXJwaXZvdC5hZGQoZ2xvdyk7XG5cbiAgICAgICAgdmFyIHJvdGF0aW9uYXhpcztcbiAgICAgICAgc3dpdGNoIChvcmlnaW4pIHtcbiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICBnbG93LnBvc2l0aW9uLnggPSAtMTAwO1xuICAgICAgICAgICAgICAgIGNlbnRlcnBpdm90LnBvc2l0aW9uLnggPSAtMTAwO1xuICAgICAgICAgICAgICAgIGhhbW1lci5wb3NpdGlvbi54ID0gLTEwMDtcbiAgICAgICAgICAgICAgICByb3RhdGlvbmF4aXMgPSAneSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIGdsb3cucG9zaXRpb24ueCA9IDEwMDtcbiAgICAgICAgICAgICAgICBjZW50ZXJwaXZvdC5wb3NpdGlvbi54ID0gMTAwO1xuICAgICAgICAgICAgICAgIGhhbW1lci5wb3NpdGlvbi54ID0gMTAwO1xuICAgICAgICAgICAgICAgIHJvdGF0aW9uYXhpcyA9ICd5JztcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgICAgICAgICAgZ2xvdy5wb3NpdGlvbi55ID0gMTAwO1xuICAgICAgICAgICAgICAgIGNlbnRlcnBpdm90LnBvc2l0aW9uLnkgPSAxMDA7XG4gICAgICAgICAgICAgICAgaGFtbWVyLnBvc2l0aW9uLnkgPSAxMDA7XG4gICAgICAgICAgICAgICAgcm90YXRpb25heGlzID0gJ3gnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICd1cCc6XG4gICAgICAgICAgICAgICAgZ2xvdy5wb3NpdGlvbi55ID0gLTEwMDtcbiAgICAgICAgICAgICAgICBjZW50ZXJwaXZvdC5wb3NpdGlvbi55ID0gLTEwMDtcbiAgICAgICAgICAgICAgICBoYW1tZXIucG9zaXRpb24ueSA9IC0xMDA7XG4gICAgICAgICAgICAgICAgcm90YXRpb25heGlzID0gJ3gnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgY2VudGVycGl2b3Qucm90YXRpb25bcm90YXRpb25heGlzXSArPSBvZmZzZXQ7XG5cbiAgICAgICAgdGhpcy5faGFtbWVycy5wdXNoKCB7XG4gICAgICAgICAgICBhbmltYXRpbmdHbG93OiBmYWxzZSxcbiAgICAgICAgICAgIGdsb3c6IGdsb3csXG4gICAgICAgICAgICBnbG93Q29sb3I6IHt9LFxuICAgICAgICAgICAgaGFtbWVyOiBoYW1tZXIsXG4gICAgICAgICAgICBwaXZvdDogY2VudGVycGl2b3QsXG4gICAgICAgICAgICBkaXJlY3Rpb246IDEsXG4gICAgICAgICAgICByYXRlOiByYXRlLFxuICAgICAgICAgICAgcm90YXRpb25heGlzOiByb3RhdGlvbmF4aXMsXG4gICAgICAgICAgICBub3RlOiB0b25lIH1cbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmFkZChjZW50ZXJwaXZvdCwgJ2hhbW1lcicpO1xuICAgIH1cbn1cbiIsImltcG9ydCBCYXNlR3JvdXAgZnJvbSAnLi4vLi4vbm9kZV9tb2R1bGVzL3RyaXZyL3NyYy9iYXNlZ3JvdXAuZXM2JztcbmltcG9ydCBTdHlsZSBmcm9tICcuLi90aGVtZWluZy9zdHlsZS5lczYnO1xuaW1wb3J0IFV0aWxzIGZyb20gJy4uL3V0aWxzLmVzNic7XG5pbXBvcnQgU2hhZGVycyBmcm9tICcuLi9zaGFkZXJzLmVzNic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhcnRpY2xlRmxvY2sgZXh0ZW5kcyBCYXNlR3JvdXAge1xuICAgIC8qKlxuICAgICAqIG9uIGNyZWF0ZSBzY2VuZVxuICAgICAqIEBwYXJhbSBzY2VuZVxuICAgICAqIEBwYXJhbSBjdXN0b21cbiAgICAgKi9cbiAgICBvbkNyZWF0ZShzY2VuZSwgY3VzdG9tKSB7XG4gICAgICAgIHRoaXMuZmxvY2tHUFVSZW5kZXJlciA9IHtcbiAgICAgICAgICAgIGdwdUNvbXB1dGU6IG51bGwsXG4gICAgICAgICAgICB2ZWxvY2l0eVZhcmlhYmxlOiBudWxsLFxuICAgICAgICAgICAgcG9zaXRpb25WYXJpYWJsZTogbnVsbCxcbiAgICAgICAgICAgIHBvc2l0aW9uVW5pZm9ybXM6IG51bGwsXG4gICAgICAgICAgICB2ZWxvY2l0eVVuaWZvcm1zOiBudWxsLFxuICAgICAgICAgICAgdW5pZm9ybXM6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9jb2xvcjtcblxuICAgICAgICAvKiBURVhUVVJFIFdJRFRIIEZPUiBTSU1VTEFUSU9OICovXG4gICAgICAgIHRoaXMuV0lEVEggPSA2NDtcblxuICAgICAgICB2YXIgQklSRFMgPSB0aGlzLldJRFRIICogdGhpcy5XSURUSDtcblxuICAgICAgICB0aGlzLm1vdXNlWCA9IDA7XG4gICAgICAgIHRoaXMubW91c2VZID0gMDtcbiAgICAgICAgdGhpcy5CT1VORFMgPSAxMDAwO1xuICAgICAgICB0aGlzLkJPVU5EU19IQUxGID0gdGhpcy5CT1VORFMgLyAyO1xuXG4gICAgICAgIHRoaXMuaW1tZXJzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbW1lcnNpb25MZXZlbHMgPSB7IG1pbjogLTIwMC4wLCBtYXg6IDIwMDAuMCB9O1xuICAgICAgICB0aGlzLmluaXRDb21wdXRlUmVuZGVyZXIoc2NlbmUucmVuZGVyZXIpO1xuXG4gICAgICAgIC8qZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ21vdXNlbW92ZScsIGUgPT4gdGhpcy5vbkRvY3VtZW50TW91c2VNb3ZlKGUpLCBmYWxzZSApO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAndG91Y2hzdGFydCcsIGUgPT4gdGhpcy5vbkRvY3VtZW50VG91Y2hTdGFydChlKSwgZmFsc2UgKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ3RvdWNobW92ZScsIGUgPT4gdGhpcy5vbkRvY3VtZW50VG91Y2hNb3ZlKGUpLCBmYWxzZSApOyovXG4gICAgICAgIHRoaXMuaW5pdEJpcmRzKCk7XG4gICAgfVxuXG4gICAgb25Eb2N1bWVudE1vdXNlTW92ZSggZXZlbnQgKSB7XG4gICAgICAgIHRoaXMubW91c2VYID0gZXZlbnQuY2xpZW50WCAtIDYwMDsvLy0gd2luZG93SGFsZlg7XG4gICAgICAgIHRoaXMubW91c2VZID0gZXZlbnQuY2xpZW50WSAtIDYwMDsvLy0gd2luZG93SGFsZlk7XG4gICAgfVxuXG4gICAgb25Eb2N1bWVudFRvdWNoU3RhcnQoIGV2ZW50ICkge1xuICAgICAgICBpZiAoIGV2ZW50LnRvdWNoZXMubGVuZ3RoID09PSAxICkge1xuXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICB0aGlzLm1vdXNlWCA9IGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWCAtIDYwMDsvLy0gd2luZG93SGFsZlg7XG4gICAgICAgICAgICB0aGlzLm1vdXNlWSA9IGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSAtIDYwMDsvLy0gd2luZG93SGFsZlk7XG5cbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uRG9jdW1lbnRUb3VjaE1vdmUoIGV2ZW50ICkge1xuXG4gICAgICAgIGlmICggZXZlbnQudG91Y2hlcy5sZW5ndGggPT09IDEgKSB7XG5cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHRoaXMubW91c2VYID0gZXZlbnQudG91Y2hlc1sgMCBdLnBhZ2VYIC0gNjAwOy8vd2luZG93SGFsZlg7XG4gICAgICAgICAgICB0aGlzLm1vdXNlWSA9IGV2ZW50LnRvdWNoZXNbIDAgXS5wYWdlWSAtIDYwMDsvL3dpbmRvd0hhbGZZO1xuXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBzZXQgZHJ1bSBoaXQvdHJpZ2dlciBjb2xvclxuICAgICAqIEBwYXJhbSBoZXhcbiAgICAgKi9cbiAgICBzZXRDb2xvcihoZXgpIHtcbiAgICAgICAgdmFyIGNvbG9yO1xuICAgICAgICBpZiAoaGV4KSB7XG4gICAgICAgICAgICBjb2xvciA9IFV0aWxzLmRlY1RvUkdCKGhleCwgMSk7XG4gICAgICAgICAgICB0aGlzLmltbWVyc2VkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbG9yID0gVXRpbHMuZGVjVG9SR0IoU3R5bGUuZmxvYXRpbmdwYXJ0aWNsZXMuY29sb3IsIDEpO1xuICAgICAgICAgICAgdGhpcy5pbW1lcnNlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9jb2xvciApIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbG9yID0gY29sb3I7XG4gICAgICAgICAgICB0aGlzLm1lc2gubWF0ZXJpYWwudW5pZm9ybXMuY29sb3IudmFsdWUgPSBbIHRoaXMuX2NvbG9yLnIsIHRoaXMuX2NvbG9yLmcsIHRoaXMuX2NvbG9yLmIgXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbG9yLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgICBjcmVhdGVqcy5Ud2Vlbi5nZXQodGhpcy5fY29sb3IpXG4gICAgICAgICAgICAgICAgLnRvKGNvbG9yLCAyMDAwKVxuICAgICAgICAgICAgICAgIC53YWl0KDEwMCkgLy8gd2FpdCBhIGZldyB0aWNrcywgb3IgdGhlIHJlbmRlciBjeWNsZSB3b24ndCBwaWNrIHVwIHRoZSBjaGFuZ2VzIHdpdGggdGhlIGZsYWdcbiAgICAgICAgICAgICAgICAuY2FsbCggZnVuY3Rpb24oKSB7IHRoaXMuYW5pbWF0aW5nID0gZmFsc2U7IH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25SZW5kZXIodGltZSkge1xuXG4gICAgICAgIGlmICh0aGlzLmltbWVyc2VkICYmIHRoaXMuZmxvY2tHUFVSZW5kZXJlci5wb3NpdGlvblVuaWZvcm1zLmRlcHRoLnZhbHVlIDwgdGhpcy5pbW1lcnNpb25MZXZlbHMubWF4KSB7XG4gICAgICAgICAgICB0aGlzLmZsb2NrR1BVUmVuZGVyZXIucG9zaXRpb25Vbmlmb3Jtcy5kZXB0aC52YWx1ZSArPSAxLjA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuaW1tZXJzZWQgJiYgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnBvc2l0aW9uVW5pZm9ybXMuZGVwdGgudmFsdWUgPiB0aGlzLmltbWVyc2lvbkxldmVscy5taW4pIHtcbiAgICAgICAgICAgIHRoaXMuZmxvY2tHUFVSZW5kZXJlci5wb3NpdGlvblVuaWZvcm1zLmRlcHRoLnZhbHVlIC09IDEuMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWx0YSA9IHRpbWUuZGVsdGEgLyAxMDAwO1xuICAgICAgICBpZiAoZGVsdGEgPiAxKSBkZWx0YSA9IDE7XG4gICAgICAgIHRoaXMuZmxvY2tHUFVSZW5kZXJlci5wb3NpdGlvblVuaWZvcm1zLnRpbWUudmFsdWUgPSB0aW1lLm5vdztcbiAgICAgICAgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnBvc2l0aW9uVW5pZm9ybXMuZGVsdGEudmFsdWUgPSBkZWx0YTtcbiAgICAgICAgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnZlbG9jaXR5VW5pZm9ybXMudGltZS52YWx1ZSA9IHRpbWUubm93O1xuICAgICAgICB0aGlzLmZsb2NrR1BVUmVuZGVyZXIudmVsb2NpdHlVbmlmb3Jtcy5kZWx0YS52YWx1ZSA9IGRlbHRhO1xuICAgICAgICB0aGlzLmZsb2NrR1BVUmVuZGVyZXIudW5pZm9ybXMudGltZS52YWx1ZSA9IHRpbWUubm93O1xuICAgICAgICB0aGlzLmZsb2NrR1BVUmVuZGVyZXIudW5pZm9ybXMuZGVsdGEudmFsdWUgPSBkZWx0YTtcbiAgICAgICAgLy90aGlzLmZsb2NrR1BVUmVuZGVyZXIudW5pZm9ybXMuZGVwdGgudmFsdWUgPSAtMjAwLjA7XG5cbiAgICAgICAgLy90aGlzLmZsb2NrR1BVUmVuZGVyZXIudmVsb2NpdHlVbmlmb3Jtcy5wcmVkYXRvci52YWx1ZS5zZXQoIDAuNSAqIHRoaXMubW91c2VYIC8gNjAwLCAtIDAuNSAqIHRoaXMubW91c2VZIC8gNjAwLCAwICk7XG4gICAgICAgIHRoaXMuZmxvY2tHUFVSZW5kZXJlci5ncHVDb21wdXRlLmNvbXB1dGUoKTtcblxuICAgICAgICB0aGlzLmZsb2NrR1BVUmVuZGVyZXIudW5pZm9ybXMudGV4dHVyZVBvc2l0aW9uLnZhbHVlID0gdGhpcy5mbG9ja0dQVVJlbmRlcmVyLmdwdUNvbXB1dGUuZ2V0Q3VycmVudFJlbmRlclRhcmdldCggdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnBvc2l0aW9uVmFyaWFibGUgKS50ZXh0dXJlO1xuICAgICAgICB0aGlzLmZsb2NrR1BVUmVuZGVyZXIudW5pZm9ybXMudGV4dHVyZVZlbG9jaXR5LnZhbHVlID0gdGhpcy5mbG9ja0dQVVJlbmRlcmVyLmdwdUNvbXB1dGUuZ2V0Q3VycmVudFJlbmRlclRhcmdldCggdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnZlbG9jaXR5VmFyaWFibGUgKS50ZXh0dXJlO1xuXG4gICAgICAgIGlmICh0aGlzLl9jb2xvci5hbmltYXRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMubWVzaC5tYXRlcmlhbC51bmlmb3Jtcy5jb2xvci52YWx1ZSA9IFsgdGhpcy5fY29sb3IuciwgdGhpcy5fY29sb3IuZywgdGhpcy5fY29sb3IuYiBdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5pdENvbXB1dGVSZW5kZXJlcihyZW5kZXJlcikge1xuICAgICAgICB0aGlzLmZsb2NrR1BVUmVuZGVyZXIuZ3B1Q29tcHV0ZSA9IG5ldyBHUFVDb21wdXRhdGlvblJlbmRlcmVyKCB0aGlzLldJRFRILCB0aGlzLldJRFRILCByZW5kZXJlciApO1xuICAgICAgICB2YXIgZHRQb3NpdGlvbiA9IHRoaXMuZmxvY2tHUFVSZW5kZXJlci5ncHVDb21wdXRlLmNyZWF0ZVRleHR1cmUoKTtcbiAgICAgICAgdmFyIGR0VmVsb2NpdHkgPSB0aGlzLmZsb2NrR1BVUmVuZGVyZXIuZ3B1Q29tcHV0ZS5jcmVhdGVUZXh0dXJlKCk7XG4gICAgICAgIHRoaXMuZmlsbFBvc2l0aW9uVGV4dHVyZSggZHRQb3NpdGlvbiApO1xuICAgICAgICB0aGlzLmZpbGxWZWxvY2l0eVRleHR1cmUoIGR0VmVsb2NpdHkgKTtcblxuICAgICAgICB0aGlzLmZsb2NrR1BVUmVuZGVyZXIudmVsb2NpdHlWYXJpYWJsZSA9IHRoaXMuZmxvY2tHUFVSZW5kZXJlci5ncHVDb21wdXRlLmFkZFZhcmlhYmxlKCBcInRleHR1cmVWZWxvY2l0eVwiLCBTaGFkZXJzLmZsb2NrdmVsb2NpdHkuZnJhZ21lbnQsIGR0VmVsb2NpdHkgKTtcbiAgICAgICAgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnBvc2l0aW9uVmFyaWFibGUgPSB0aGlzLmZsb2NrR1BVUmVuZGVyZXIuZ3B1Q29tcHV0ZS5hZGRWYXJpYWJsZSggXCJ0ZXh0dXJlUG9zaXRpb25cIiwgU2hhZGVycy5mbG9ja3Bvc2l0aW9uLmZyYWdtZW50LCBkdFBvc2l0aW9uICk7XG5cbiAgICAgICAgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLmdwdUNvbXB1dGUuc2V0VmFyaWFibGVEZXBlbmRlbmNpZXMoIHRoaXMuZmxvY2tHUFVSZW5kZXJlci52ZWxvY2l0eVZhcmlhYmxlLCBbIHRoaXMuZmxvY2tHUFVSZW5kZXJlci5wb3NpdGlvblZhcmlhYmxlLCB0aGlzLmZsb2NrR1BVUmVuZGVyZXIudmVsb2NpdHlWYXJpYWJsZSBdICk7XG4gICAgICAgIHRoaXMuZmxvY2tHUFVSZW5kZXJlci5ncHVDb21wdXRlLnNldFZhcmlhYmxlRGVwZW5kZW5jaWVzKCB0aGlzLmZsb2NrR1BVUmVuZGVyZXIucG9zaXRpb25WYXJpYWJsZSwgWyB0aGlzLmZsb2NrR1BVUmVuZGVyZXIucG9zaXRpb25WYXJpYWJsZSwgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnZlbG9jaXR5VmFyaWFibGUgXSApO1xuXG4gICAgICAgIHRoaXMuZmxvY2tHUFVSZW5kZXJlci5wb3NpdGlvblVuaWZvcm1zID0gdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnBvc2l0aW9uVmFyaWFibGUubWF0ZXJpYWwudW5pZm9ybXM7XG4gICAgICAgIHRoaXMuZmxvY2tHUFVSZW5kZXJlci52ZWxvY2l0eVVuaWZvcm1zID0gdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnZlbG9jaXR5VmFyaWFibGUubWF0ZXJpYWwudW5pZm9ybXM7XG5cbiAgICAgICAgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnBvc2l0aW9uVW5pZm9ybXMudGltZSA9IHsgdmFsdWU6IDAuMCB9O1xuICAgICAgICB0aGlzLmZsb2NrR1BVUmVuZGVyZXIucG9zaXRpb25Vbmlmb3Jtcy5kZWx0YSA9IHsgdmFsdWU6IDAuMCB9O1xuICAgICAgICB0aGlzLmZsb2NrR1BVUmVuZGVyZXIucG9zaXRpb25Vbmlmb3Jtcy5kZXB0aCA9IHsgdmFsdWU6IC0yMDAuMCB9O1xuICAgICAgICB0aGlzLmZsb2NrR1BVUmVuZGVyZXIudmVsb2NpdHlVbmlmb3Jtcy50aW1lID0geyB2YWx1ZTogMS4wIH07XG4gICAgICAgIHRoaXMuZmxvY2tHUFVSZW5kZXJlci52ZWxvY2l0eVVuaWZvcm1zLmRlbHRhID0geyB2YWx1ZTogMC4wIH07XG4gICAgICAgIHRoaXMuZmxvY2tHUFVSZW5kZXJlci52ZWxvY2l0eVVuaWZvcm1zLnRlc3RpbmcgPSB7IHZhbHVlOiAxLjAgfTtcbiAgICAgICAgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnZlbG9jaXR5VW5pZm9ybXMuc2VwZXJhdGlvbkRpc3RhbmNlID0geyB2YWx1ZTogMS4wIH07XG4gICAgICAgIHRoaXMuZmxvY2tHUFVSZW5kZXJlci52ZWxvY2l0eVVuaWZvcm1zLmFsaWdubWVudERpc3RhbmNlID0geyB2YWx1ZTogMS4wIH07XG4gICAgICAgIHRoaXMuZmxvY2tHUFVSZW5kZXJlci52ZWxvY2l0eVVuaWZvcm1zLmNvaGVzaW9uRGlzdGFuY2UgPSB7IHZhbHVlOiAxLjAgfTtcbiAgICAgICAgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnZlbG9jaXR5VW5pZm9ybXMuZnJlZWRvbUZhY3RvciA9IHsgdmFsdWU6IDEuMCB9O1xuICAgICAgICB0aGlzLmZsb2NrR1BVUmVuZGVyZXIudmVsb2NpdHlVbmlmb3Jtcy5wcmVkYXRvciA9IHsgdmFsdWU6IG5ldyBUSFJFRS5WZWN0b3IzKCkgfTtcbiAgICAgICAgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnZlbG9jaXR5VmFyaWFibGUubWF0ZXJpYWwuZGVmaW5lcy5CT1VORFMgPSB0aGlzLkJPVU5EUy50b0ZpeGVkKCAyICk7XG5cbiAgICAgICAgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnZlbG9jaXR5VmFyaWFibGUud3JhcFMgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcbiAgICAgICAgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnZlbG9jaXR5VmFyaWFibGUud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcbiAgICAgICAgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnBvc2l0aW9uVmFyaWFibGUud3JhcFMgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcbiAgICAgICAgdGhpcy5mbG9ja0dQVVJlbmRlcmVyLnBvc2l0aW9uVmFyaWFibGUud3JhcFQgPSBUSFJFRS5SZXBlYXRXcmFwcGluZztcblxuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLmZsb2NrR1BVUmVuZGVyZXIuZ3B1Q29tcHV0ZS5pbml0KCk7XG4gICAgICAgIGlmICggZXJyb3IgIT09IG51bGwgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCBlcnJvciApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW5pdEJpcmRzKCkge1xuICAgICAgICB2YXIgZ2VvbWV0cnkgPSBuZXcgVEhSRUUuU3dhcm1QYXJ0aWNsZUdlb21ldHJ5KHRoaXMuV0lEVEgpO1xuXG4gICAgICAgIC8vIEZvciBWZXJ0ZXggYW5kIEZyYWdtZW50XG4gICAgICAgIHRoaXMuZmxvY2tHUFVSZW5kZXJlci51bmlmb3JtcyA9IHtcbiAgICAgICAgICAgIGNvbG9yOiB7IHZhbHVlOiBbMC4wLDAuMCwwLjBdIH0sXG4gICAgICAgICAgICB0ZXh0dXJlUG9zaXRpb246IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgIHRleHR1cmVWZWxvY2l0eTogeyB2YWx1ZTogbnVsbCB9LFxuICAgICAgICAgICAgdGltZTogeyB2YWx1ZTogMS4wIH0sXG4gICAgICAgICAgICBkZWx0YTogeyB2YWx1ZTogMC4wIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBTaGFkZXJNYXRlcmlhbFxuICAgICAgICB2YXIgbWF0ZXJpYWwgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoIHtcbiAgICAgICAgICAgIHVuaWZvcm1zOiAgICAgICB0aGlzLmZsb2NrR1BVUmVuZGVyZXIudW5pZm9ybXMsXG4gICAgICAgICAgICB2ZXJ0ZXhTaGFkZXI6ICAgU2hhZGVycy5mbG9jay52ZXJ0ZXgsXG4gICAgICAgICAgICBmcmFnbWVudFNoYWRlcjogU2hhZGVycy5mbG9jay5mcmFnbWVudCxcbiAgICAgICAgICAgIC8vc2lkZTogVEhSRUUuRG91YmxlU2lkZVxuICAgICAgICAgICAgLy90cmFuc3BhcmVudDogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm1lc2ggPSBuZXcgVEhSRUUuTWVzaCggZ2VvbWV0cnksIG1hdGVyaWFsICk7XG4gICAgICAgIHRoaXMubWVzaC5yb3RhdGlvbi55ID0gTWF0aC5QSSAvIDI7XG4gICAgICAgIC8vIHRoaXMubWVzaC5wb3NpdGlvbi56ID0gLTEwMDtcbiAgICAgICAgLy8gdGhpcy5tZXNoLnBvc2l0aW9uLnkgPSAtMTA7XG4gICAgICAgIC8qdGhpcy5tZXNoLnNjYWxlLnggPSAuMjtcbiAgICAgICAgdGhpcy5tZXNoLnNjYWxlLnkgPSAuMjtcbiAgICAgICAgdGhpcy5tZXNoLnNjYWxlLnogPSAuMjsqL1xuICAgICAgICB0aGlzLm1lc2gubWF0cml4QXV0b1VwZGF0ZSA9IHRydWU7XG4gICAgICAgIHRoaXMubWVzaC51cGRhdGVNYXRyaXgoKTtcblxuICAgICAgICB0aGlzLmFkZCh0aGlzLm1lc2gpO1xuICAgICAgICB0aGlzLnNldENvbG9yKCk7XG5cbiAgICB9XG5cbiAgICBmaWxsUG9zaXRpb25UZXh0dXJlKCB0ZXh0dXJlICkge1xuICAgICAgICB2YXIgdGhlQXJyYXkgPSB0ZXh0dXJlLmltYWdlLmRhdGE7XG5cbiAgICAgICAgZm9yICggdmFyIGsgPSAwLCBrbCA9IHRoZUFycmF5Lmxlbmd0aDsgayA8IGtsOyBrICs9IDQgKSB7XG5cbiAgICAgICAgICAgIHZhciB4ID0gKE1hdGgucmFuZG9tKCkgKiB0aGlzLkJPVU5EUyAtIHRoaXMuQk9VTkRTX0hBTEYpLzE7XG4gICAgICAgICAgICB2YXIgeSA9IChNYXRoLnJhbmRvbSgpICogdGhpcy5CT1VORFMgLSB0aGlzLkJPVU5EU19IQUxGKS8xO1xuICAgICAgICAgICAgdmFyIHogPSAoTWF0aC5yYW5kb20oKSAqIHRoaXMuQk9VTkRTIC0gdGhpcy5CT1VORFNfSEFMRikvMTtcblxuICAgICAgICAgICAgdGhlQXJyYXlbIGsgKyAwIF0gPSB4O1xuICAgICAgICAgICAgdGhlQXJyYXlbIGsgKyAxIF0gPSB5O1xuICAgICAgICAgICAgdGhlQXJyYXlbIGsgKyAyIF0gPSB6O1xuICAgICAgICAgICAgdGhlQXJyYXlbIGsgKyAzIF0gPSAxO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZmlsbFZlbG9jaXR5VGV4dHVyZSggdGV4dHVyZSApIHtcbiAgICAgICAgdmFyIHRoZUFycmF5ID0gdGV4dHVyZS5pbWFnZS5kYXRhO1xuXG4gICAgICAgIGZvciAoIHZhciBrID0gMCwga2wgPSB0aGVBcnJheS5sZW5ndGg7IGsgPCBrbDsgayArPSA0ICkge1xuICAgICAgICAgICAgdmFyIHggPSBNYXRoLnJhbmRvbSgpIC0gMC41O1xuICAgICAgICAgICAgdmFyIHkgPSBNYXRoLnJhbmRvbSgpIC0gMC41O1xuICAgICAgICAgICAgdmFyIHogPSBNYXRoLnJhbmRvbSgpIC0gMC41O1xuXG4gICAgICAgICAgICB0aGVBcnJheVsgayArIDAgXSA9IHggKiAxMDtcbiAgICAgICAgICAgIHRoZUFycmF5WyBrICsgMSBdID0geSAqIDEwO1xuICAgICAgICAgICAgdGhlQXJyYXlbIGsgKyAyIF0gPSB6ICogMTA7XG4gICAgICAgICAgICB0aGVBcnJheVsgayArIDMgXSA9IDE7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiIsImltcG9ydCBOb3RlIGZyb20gJy4vbXVzaWN0aGVvcnkvbm90ZS5lczYnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zLCBjYikge1xuICAgICAgICAvKipcbiAgICAgICAgICogZXZlbnQgY2FsbGJhY2tcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrID0gY2I7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEpTT04gY29uZmlnXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9jb25maWcgPSBwYXJhbXM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIGtleXMgZG93blxuICAgICAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9rZXlzID0gW107XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHBvdGVudGlhbCBrZXlzIHByZXNzZWQgaW4gb3JkZXJcbiAgICAgICAgICogQHR5cGUge3N0cmluZ1tdfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcG90ZW50aWFsS2V5cyA9IFtcbiAgICAgICAgICAgICdgJywgJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnLCAnOCcsICc5JywgJzAnLCAnLScsICcrJyxcbiAgICAgICAgICAgICdxJywgJ3cnLCAnZScsICdyJywgJ3QnLCAneScsICd1JywgJ2knLCAnbycsICdwJywgJ1snLCAnXScsICdcXFxcJyxcbiAgICAgICAgICAgICdhJywgJ3MnLCAnZCcsICdmJywgJ2cnLCAnaCcsICdqJywgJ2snLCAnbCcsICc7JywgJ1xcJydcbiAgICAgICAgXTtcblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZXZlbnQgPT4gdGhpcy5vbktleURvd24oZXZlbnQpKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBldmVudCA9PiB0aGlzLm9uS2V5VXAoZXZlbnQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQga2V5cyBkb3duXG4gICAgICogQHBhcmFtIG1hcHBpbmdcbiAgICAgKi9cbiAgICBnZXRLZXlzRG93bigpIHtcbiAgICAgICAgdmFyIGRvd24gPSBbXTtcbiAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCB0aGlzLl9rZXlzLmxlbmd0aDsgYysrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fa2V5c1tjXSA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgb2N0YXZlID0gMDtcbiAgICAgICAgICAgICAgICBpZiAoYyA+PSB0aGlzLl9rZXlzLmxlbmd0aC8yKSB7IG9jdGF2ZSA9IDE7IH1cbiAgICAgICAgICAgICAgICBkb3duLnB1c2goIHsgbm90YXRpb246IE5vdGUubm90YXRpb25BdEluZGV4KGMpLCBvY3RhdmU6IG9jdGF2ZSArIDIsIGluZGV4OiBjLCB2ZWxvY2l0eTogdGhpcy5fa2V5c1tjXX0gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG93bjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBvbiBrZXkgZG93blxuICAgICAqIEBwYXJhbSBldmVudFxuICAgICAqL1xuICAgIG9uS2V5RG93bihldmVudCkge1xuICAgICAgICB2YXIga2V5ID0gdGhpcy5fcG90ZW50aWFsS2V5cy5pbmRleE9mKGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgaWYgKGtleSAhPT0gLTEgJiYgKHRoaXMuX2tleXNba2V5XSA9PT0gMCB8fCAhdGhpcy5fa2V5c1trZXldKSkge1xuICAgICAgICAgICAgdGhpcy5fa2V5c1trZXldID0gMS4wOyAvLyBvbiBhbiBhY3R1YWwgTUlESSBrZXlib2FyZCwgd2UnZCBoYXZlIGEgdmVsb2NpdHlcbiAgICAgICAgICAgIHZhciBvY3RhdmUgPSBNYXRoLmZsb29yKGtleSAvIE5vdGUuc2hhcnBOb3RhdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrKHtcbiAgICAgICAgICAgICAgICBub3RhdGlvbjogTm90ZS5ub3RhdGlvbkF0SW5kZXgoa2V5KSxcbiAgICAgICAgICAgICAgICBvY3RhdmU6IG9jdGF2ZSArIHRoaXMuX2NvbmZpZy5zdGFydG9jdGF2ZSxcbiAgICAgICAgICAgICAgICAvL2luZGV4OiBrZXksXG4gICAgICAgICAgICAgICAgdmVsb2NpdHk6IDEuMCxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdwcmVzcycgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBvbiBrZXkgZG93blxuICAgICAqIEBwYXJhbSBldmVudFxuICAgICAqL1xuICAgIG9uS2V5VXAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGtleSA9IHRoaXMuX3BvdGVudGlhbEtleXMuaW5kZXhPZihldmVudC5rZXkudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGlmIChrZXkgIT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9rZXlzW2tleV0gPSAwLjA7IC8vIG9uIGFuIGFjdHVhbCBNSURJIGtleWJvYXJkLCB3ZSdkIGhhdmUgYSB2ZWxvY2l0eVxuICAgICAgICAgICAgdmFyIG9jdGF2ZSA9IE1hdGguZmxvb3Ioa2V5IC8gTm90ZS5zaGFycE5vdGF0aW9ucy5sZW5ndGgpO1xuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2soe1xuICAgICAgICAgICAgICAgIG5vdGF0aW9uOiBOb3RlLm5vdGF0aW9uQXRJbmRleChrZXkpLFxuICAgICAgICAgICAgICAgIG9jdGF2ZTogb2N0YXZlICsgdGhpcy5fY29uZmlnLnN0YXJ0b2N0YXZlLFxuICAgICAgICAgICAgICAgIC8vaW5kZXg6IGtleSxcbiAgICAgICAgICAgICAgICB2ZWxvY2l0eTogMCxcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdyZWxlYXNlJyB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IHtcbiAgXCJleHBsb3Npb25cIjoge1xuICAgIFwiZnJhZ21lbnRcIjogXCJ2YXJ5aW5nIGZsb2F0IG5vaXNlOyB1bmlmb3JtIHNhbXBsZXIyRCB0RXhwbG9zaW9uOyAgZmxvYXQgcmFuZG9tKCB2ZWMzIHNjYWxlLCBmbG9hdCBzZWVkICl7ICAgcmV0dXJuIGZyYWN0KCBzaW4oIGRvdCggZ2xfRnJhZ0Nvb3JkLnh5eiArIHNlZWQsIHNjYWxlICkgKSAqIDQzNzU4LjU0NTMgKyBzZWVkICkgOyB9ICB2b2lkIG1haW4oKSB7ICAgIGZsb2F0IHIgPSAuMDEgKiByYW5kb20oIHZlYzMoIDEyLjk4OTgsIDc4LjIzMywgMTUxLjcxODIgKSwgMC4wICk7ICAgdmVjMiB0UG9zID0gdmVjMiggMCwgMS4wIC0gMS4zICogbm9pc2UgKyByICk7ICAgdmVjNCBjb2xvciA9IHRleHR1cmUyRCggdEV4cGxvc2lvbiwgdFBvcyApOyAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoIGNvbG9yLnJnYiwgMS4wICk7ICB9XCIsXG4gICAgXCJ2ZXJ0ZXhcIjogXCIgIHZlYzMgbW9kMjg5KHZlYzMgeCkgeyAgIHJldHVybiB4IC0gZmxvb3IoeCAqICgxLjAgLyAyODkuMCkpICogMjg5LjA7IH0gIHZlYzQgbW9kMjg5KHZlYzQgeCkgeyAgIHJldHVybiB4IC0gZmxvb3IoeCAqICgxLjAgLyAyODkuMCkpICogMjg5LjA7IH0gIHZlYzQgcGVybXV0ZSh2ZWM0IHgpIHsgICByZXR1cm4gbW9kMjg5KCgoeCozNC4wKSsxLjApKngpOyB9ICB2ZWM0IHRheWxvckludlNxcnQodmVjNCByKSB7ICAgcmV0dXJuIDEuNzkyODQyOTE0MDAxNTkgLSAwLjg1MzczNDcyMDk1MzE0ICogcjsgfSAgdmVjMyBmYWRlKHZlYzMgdCkgeyAgIHJldHVybiB0KnQqdCoodCoodCo2LjAtMTUuMCkrMTAuMCk7IH0gIGZsb2F0IGNub2lzZSh2ZWMzIFApIHsgICB2ZWMzIFBpMCA9IGZsb29yKFApOyAgIHZlYzMgUGkxID0gUGkwICsgdmVjMygxLjApOyAgIFBpMCA9IG1vZDI4OShQaTApOyAgIFBpMSA9IG1vZDI4OShQaTEpOyAgIHZlYzMgUGYwID0gZnJhY3QoUCk7ICAgdmVjMyBQZjEgPSBQZjAgLSB2ZWMzKDEuMCk7ICAgdmVjNCBpeCA9IHZlYzQoUGkwLngsIFBpMS54LCBQaTAueCwgUGkxLngpOyAgIHZlYzQgaXkgPSB2ZWM0KFBpMC55eSwgUGkxLnl5KTsgICB2ZWM0IGl6MCA9IFBpMC56enp6OyAgIHZlYzQgaXoxID0gUGkxLnp6eno7ICAgIHZlYzQgaXh5ID0gcGVybXV0ZShwZXJtdXRlKGl4KSArIGl5KTsgICB2ZWM0IGl4eTAgPSBwZXJtdXRlKGl4eSArIGl6MCk7ICAgdmVjNCBpeHkxID0gcGVybXV0ZShpeHkgKyBpejEpOyAgICB2ZWM0IGd4MCA9IGl4eTAgKiAoMS4wIC8gNy4wKTsgICB2ZWM0IGd5MCA9IGZyYWN0KGZsb29yKGd4MCkgKiAoMS4wIC8gNy4wKSkgLSAwLjU7ICAgZ3gwID0gZnJhY3QoZ3gwKTsgICB2ZWM0IGd6MCA9IHZlYzQoMC41KSAtIGFicyhneDApIC0gYWJzKGd5MCk7ICAgdmVjNCBzejAgPSBzdGVwKGd6MCwgdmVjNCgwLjApKTsgICBneDAgLT0gc3owICogKHN0ZXAoMC4wLCBneDApIC0gMC41KTsgICBneTAgLT0gc3owICogKHN0ZXAoMC4wLCBneTApIC0gMC41KTsgICAgdmVjNCBneDEgPSBpeHkxICogKDEuMCAvIDcuMCk7ICAgdmVjNCBneTEgPSBmcmFjdChmbG9vcihneDEpICogKDEuMCAvIDcuMCkpIC0gMC41OyAgIGd4MSA9IGZyYWN0KGd4MSk7ICAgdmVjNCBnejEgPSB2ZWM0KDAuNSkgLSBhYnMoZ3gxKSAtIGFicyhneTEpOyAgIHZlYzQgc3oxID0gc3RlcChnejEsIHZlYzQoMC4wKSk7ICAgZ3gxIC09IHN6MSAqIChzdGVwKDAuMCwgZ3gxKSAtIDAuNSk7ICAgZ3kxIC09IHN6MSAqIChzdGVwKDAuMCwgZ3kxKSAtIDAuNSk7ICAgIHZlYzMgZzAwMCA9IHZlYzMoZ3gwLngsZ3kwLngsZ3owLngpOyAgIHZlYzMgZzEwMCA9IHZlYzMoZ3gwLnksZ3kwLnksZ3owLnkpOyAgIHZlYzMgZzAxMCA9IHZlYzMoZ3gwLnosZ3kwLnosZ3owLnopOyAgIHZlYzMgZzExMCA9IHZlYzMoZ3gwLncsZ3kwLncsZ3owLncpOyAgIHZlYzMgZzAwMSA9IHZlYzMoZ3gxLngsZ3kxLngsZ3oxLngpOyAgIHZlYzMgZzEwMSA9IHZlYzMoZ3gxLnksZ3kxLnksZ3oxLnkpOyAgIHZlYzMgZzAxMSA9IHZlYzMoZ3gxLnosZ3kxLnosZ3oxLnopOyAgIHZlYzMgZzExMSA9IHZlYzMoZ3gxLncsZ3kxLncsZ3oxLncpOyAgICB2ZWM0IG5vcm0wID0gdGF5bG9ySW52U3FydCh2ZWM0KGRvdChnMDAwLCBnMDAwKSwgZG90KGcwMTAsIGcwMTApLCBkb3QoZzEwMCwgZzEwMCksIGRvdChnMTEwLCBnMTEwKSkpOyAgIGcwMDAgKj0gbm9ybTAueDsgICBnMDEwICo9IG5vcm0wLnk7ICAgZzEwMCAqPSBub3JtMC56OyAgIGcxMTAgKj0gbm9ybTAudzsgICB2ZWM0IG5vcm0xID0gdGF5bG9ySW52U3FydCh2ZWM0KGRvdChnMDAxLCBnMDAxKSwgZG90KGcwMTEsIGcwMTEpLCBkb3QoZzEwMSwgZzEwMSksIGRvdChnMTExLCBnMTExKSkpOyAgIGcwMDEgKj0gbm9ybTEueDsgICBnMDExICo9IG5vcm0xLnk7ICAgZzEwMSAqPSBub3JtMS56OyAgIGcxMTEgKj0gbm9ybTEudzsgICAgZmxvYXQgbjAwMCA9IGRvdChnMDAwLCBQZjApOyAgIGZsb2F0IG4xMDAgPSBkb3QoZzEwMCwgdmVjMyhQZjEueCwgUGYwLnl6KSk7ICAgZmxvYXQgbjAxMCA9IGRvdChnMDEwLCB2ZWMzKFBmMC54LCBQZjEueSwgUGYwLnopKTsgICBmbG9hdCBuMTEwID0gZG90KGcxMTAsIHZlYzMoUGYxLnh5LCBQZjAueikpOyAgIGZsb2F0IG4wMDEgPSBkb3QoZzAwMSwgdmVjMyhQZjAueHksIFBmMS56KSk7ICAgZmxvYXQgbjEwMSA9IGRvdChnMTAxLCB2ZWMzKFBmMS54LCBQZjAueSwgUGYxLnopKTsgICBmbG9hdCBuMDExID0gZG90KGcwMTEsIHZlYzMoUGYwLngsIFBmMS55eikpOyAgIGZsb2F0IG4xMTEgPSBkb3QoZzExMSwgUGYxKTsgICAgdmVjMyBmYWRlX3h5eiA9IGZhZGUoUGYwKTsgICB2ZWM0IG5feiA9IG1peCh2ZWM0KG4wMDAsIG4xMDAsIG4wMTAsIG4xMTApLCB2ZWM0KG4wMDEsIG4xMDEsIG4wMTEsIG4xMTEpLCBmYWRlX3h5ei56KTsgICB2ZWMyIG5feXogPSBtaXgobl96Lnh5LCBuX3ouencsIGZhZGVfeHl6LnkpOyAgIGZsb2F0IG5feHl6ID0gbWl4KG5feXoueCwgbl95ei55LCBmYWRlX3h5ei54KTsgICByZXR1cm4gMi4yICogbl94eXo7IH0gIGZsb2F0IHBub2lzZSh2ZWMzIFAsIHZlYzMgcmVwKSB7ICAgdmVjMyBQaTAgPSBtb2QoZmxvb3IoUCksIHJlcCk7ICAgdmVjMyBQaTEgPSBtb2QoUGkwICsgdmVjMygxLjApLCByZXApOyAgIFBpMCA9IG1vZDI4OShQaTApOyAgIFBpMSA9IG1vZDI4OShQaTEpOyAgIHZlYzMgUGYwID0gZnJhY3QoUCk7ICAgdmVjMyBQZjEgPSBQZjAgLSB2ZWMzKDEuMCk7ICAgdmVjNCBpeCA9IHZlYzQoUGkwLngsIFBpMS54LCBQaTAueCwgUGkxLngpOyAgIHZlYzQgaXkgPSB2ZWM0KFBpMC55eSwgUGkxLnl5KTsgICB2ZWM0IGl6MCA9IFBpMC56enp6OyAgIHZlYzQgaXoxID0gUGkxLnp6eno7ICAgIHZlYzQgaXh5ID0gcGVybXV0ZShwZXJtdXRlKGl4KSArIGl5KTsgICB2ZWM0IGl4eTAgPSBwZXJtdXRlKGl4eSArIGl6MCk7ICAgdmVjNCBpeHkxID0gcGVybXV0ZShpeHkgKyBpejEpOyAgICB2ZWM0IGd4MCA9IGl4eTAgKiAoMS4wIC8gNy4wKTsgICB2ZWM0IGd5MCA9IGZyYWN0KGZsb29yKGd4MCkgKiAoMS4wIC8gNy4wKSkgLSAwLjU7ICAgZ3gwID0gZnJhY3QoZ3gwKTsgICB2ZWM0IGd6MCA9IHZlYzQoMC41KSAtIGFicyhneDApIC0gYWJzKGd5MCk7ICAgdmVjNCBzejAgPSBzdGVwKGd6MCwgdmVjNCgwLjApKTsgICBneDAgLT0gc3owICogKHN0ZXAoMC4wLCBneDApIC0gMC41KTsgICBneTAgLT0gc3owICogKHN0ZXAoMC4wLCBneTApIC0gMC41KTsgICAgdmVjNCBneDEgPSBpeHkxICogKDEuMCAvIDcuMCk7ICAgdmVjNCBneTEgPSBmcmFjdChmbG9vcihneDEpICogKDEuMCAvIDcuMCkpIC0gMC41OyAgIGd4MSA9IGZyYWN0KGd4MSk7ICAgdmVjNCBnejEgPSB2ZWM0KDAuNSkgLSBhYnMoZ3gxKSAtIGFicyhneTEpOyAgIHZlYzQgc3oxID0gc3RlcChnejEsIHZlYzQoMC4wKSk7ICAgZ3gxIC09IHN6MSAqIChzdGVwKDAuMCwgZ3gxKSAtIDAuNSk7ICAgZ3kxIC09IHN6MSAqIChzdGVwKDAuMCwgZ3kxKSAtIDAuNSk7ICAgIHZlYzMgZzAwMCA9IHZlYzMoZ3gwLngsZ3kwLngsZ3owLngpOyAgIHZlYzMgZzEwMCA9IHZlYzMoZ3gwLnksZ3kwLnksZ3owLnkpOyAgIHZlYzMgZzAxMCA9IHZlYzMoZ3gwLnosZ3kwLnosZ3owLnopOyAgIHZlYzMgZzExMCA9IHZlYzMoZ3gwLncsZ3kwLncsZ3owLncpOyAgIHZlYzMgZzAwMSA9IHZlYzMoZ3gxLngsZ3kxLngsZ3oxLngpOyAgIHZlYzMgZzEwMSA9IHZlYzMoZ3gxLnksZ3kxLnksZ3oxLnkpOyAgIHZlYzMgZzAxMSA9IHZlYzMoZ3gxLnosZ3kxLnosZ3oxLnopOyAgIHZlYzMgZzExMSA9IHZlYzMoZ3gxLncsZ3kxLncsZ3oxLncpOyAgICB2ZWM0IG5vcm0wID0gdGF5bG9ySW52U3FydCh2ZWM0KGRvdChnMDAwLCBnMDAwKSwgZG90KGcwMTAsIGcwMTApLCBkb3QoZzEwMCwgZzEwMCksIGRvdChnMTEwLCBnMTEwKSkpOyAgIGcwMDAgKj0gbm9ybTAueDsgICBnMDEwICo9IG5vcm0wLnk7ICAgZzEwMCAqPSBub3JtMC56OyAgIGcxMTAgKj0gbm9ybTAudzsgICB2ZWM0IG5vcm0xID0gdGF5bG9ySW52U3FydCh2ZWM0KGRvdChnMDAxLCBnMDAxKSwgZG90KGcwMTEsIGcwMTEpLCBkb3QoZzEwMSwgZzEwMSksIGRvdChnMTExLCBnMTExKSkpOyAgIGcwMDEgKj0gbm9ybTEueDsgICBnMDExICo9IG5vcm0xLnk7ICAgZzEwMSAqPSBub3JtMS56OyAgIGcxMTEgKj0gbm9ybTEudzsgICAgZmxvYXQgbjAwMCA9IGRvdChnMDAwLCBQZjApOyAgIGZsb2F0IG4xMDAgPSBkb3QoZzEwMCwgdmVjMyhQZjEueCwgUGYwLnl6KSk7ICAgZmxvYXQgbjAxMCA9IGRvdChnMDEwLCB2ZWMzKFBmMC54LCBQZjEueSwgUGYwLnopKTsgICBmbG9hdCBuMTEwID0gZG90KGcxMTAsIHZlYzMoUGYxLnh5LCBQZjAueikpOyAgIGZsb2F0IG4wMDEgPSBkb3QoZzAwMSwgdmVjMyhQZjAueHksIFBmMS56KSk7ICAgZmxvYXQgbjEwMSA9IGRvdChnMTAxLCB2ZWMzKFBmMS54LCBQZjAueSwgUGYxLnopKTsgICBmbG9hdCBuMDExID0gZG90KGcwMTEsIHZlYzMoUGYwLngsIFBmMS55eikpOyAgIGZsb2F0IG4xMTEgPSBkb3QoZzExMSwgUGYxKTsgICAgdmVjMyBmYWRlX3h5eiA9IGZhZGUoUGYwKTsgICB2ZWM0IG5feiA9IG1peCh2ZWM0KG4wMDAsIG4xMDAsIG4wMTAsIG4xMTApLCB2ZWM0KG4wMDEsIG4xMDEsIG4wMTEsIG4xMTEpLCBmYWRlX3h5ei56KTsgICB2ZWMyIG5feXogPSBtaXgobl96Lnh5LCBuX3ouencsIGZhZGVfeHl6LnkpOyAgIGZsb2F0IG5feHl6ID0gbWl4KG5feXoueCwgbl95ei55LCBmYWRlX3h5ei54KTsgICByZXR1cm4gMi4yICogbl94eXo7IH0gIHZhcnlpbmcgZmxvYXQgbm9pc2U7IHVuaWZvcm0gZmxvYXQgdGltZTsgIGZsb2F0IHR1cmJ1bGVuY2UoIHZlYzMgcCApIHsgICBmbG9hdCB3ID0gMTAwLjA7ICAgZmxvYXQgdCA9IC0uNTsgICBmb3IgKGZsb2F0IGYgPSAxLjAgOyBmIDw9IDEwLjAgOyBmKysgKXsgICAgIGZsb2F0IHBvd2VyID0gcG93KCAyLjAsIGYgKTsgICAgIHQgKz0gYWJzKCBwbm9pc2UoIHZlYzMoIHBvd2VyICogcCApLCB2ZWMzKCAxMC4wLCAxMC4wLCAxMC4wICkgKSAvIHBvd2VyICk7ICAgfSAgIHJldHVybiB0OyB9ICB2b2lkIG1haW4oKSB7ICAgbm9pc2UgPSAxMC4wICogIC0uMTAgKiB0dXJidWxlbmNlKCAuNSAqIG5vcm1hbCArIHRpbWUgKTsgICBmbG9hdCBiID0gNS4wICogcG5vaXNlKCAwLjA1ICogcG9zaXRpb24gKyB2ZWMzKCAyLjAgKiB0aW1lICksIHZlYzMoIDEwMC4wICkgKTsgICBmbG9hdCBkaXNwbGFjZW1lbnQgPSAtIDEwLiAqIG5vaXNlICsgYjsgICAgdmVjMyBuZXdQb3NpdGlvbiA9IHBvc2l0aW9uICsgbm9ybWFsICogZGlzcGxhY2VtZW50OyAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIG5ld1Bvc2l0aW9uLCAxLjAgKTsgIH1cIlxuICB9LFxuICBcImZsb2NrXCI6IHtcbiAgICBcImZyYWdtZW50XCI6IFwidW5pZm9ybSB2ZWMzIGNvbG9yOyAgdm9pZCBtYWluKCkgeyAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCggY29sb3IsIDAuMSApOyB9IFwiLFxuICAgIFwidmVydGV4XCI6IFwiYXR0cmlidXRlIHZlYzIgcmVmZXJlbmNlOyBhdHRyaWJ1dGUgZmxvYXQgdmVydGV4OyAgdW5pZm9ybSBzYW1wbGVyMkQgdGV4dHVyZVBvc2l0aW9uOyB1bmlmb3JtIHNhbXBsZXIyRCB0ZXh0dXJlVmVsb2NpdHk7ICB1bmlmb3JtIGZsb2F0IHRpbWU7ICB2b2lkIG1haW4oKSB7ICAgICAgdmVjNCB0bXBQb3MgPSB0ZXh0dXJlMkQoIHRleHR1cmVQb3NpdGlvbiwgcmVmZXJlbmNlICk7ICAgICB2ZWMzIHBvcyA9IHRtcFBvcy54eXo7ICAgICB2ZWMzIHZlbG9jaXR5ID0gbm9ybWFsaXplKHRleHR1cmUyRCggdGV4dHVyZVZlbG9jaXR5LCByZWZlcmVuY2UgKS54eXopOyAgICAgIHZlYzMgbmV3UG9zaXRpb24gPSBwb3NpdGlvbjsgICAgICBpZiAoIHZlcnRleCA9PSA0LjAgfHwgdmVydGV4ID09IDcuMCApIHsgICAgICAgICAgICAgICAgIG5ld1Bvc2l0aW9uLnkgPSBzaW4oIHRtcFBvcy53ICkgKiA1LjsgICAgIH0gICAgICBuZXdQb3NpdGlvbiA9IG1hdDMoIG1vZGVsTWF0cml4ICkgKiBuZXdQb3NpdGlvbjsgICAgICAgdmVsb2NpdHkueiAqPSAtMS47ICAgICBmbG9hdCB4eiA9IGxlbmd0aCggdmVsb2NpdHkueHogKTsgICAgIGZsb2F0IHh5eiA9IDEuOyAgICAgZmxvYXQgeCA9IHNxcnQoIDEuIC0gdmVsb2NpdHkueSAqIHZlbG9jaXR5LnkgKTsgICAgICBmbG9hdCBjb3NyeSA9IHZlbG9jaXR5LnggLyB4ejsgICAgIGZsb2F0IHNpbnJ5ID0gdmVsb2NpdHkueiAvIHh6OyAgICAgIGZsb2F0IGNvc3J6ID0geCAvIHh5ejsgICAgIGZsb2F0IHNpbnJ6ID0gdmVsb2NpdHkueSAvIHh5ejsgICAgICBtYXQzIG1hdHkgPSAgbWF0MyggICAgICAgICBjb3NyeSwgMCwgLXNpbnJ5LCAgICAgICAgIDAgICAgLCAxLCAwICAgICAsICAgICAgICAgc2lucnksIDAsIGNvc3J5ICAgICAgKTsgICAgICBtYXQzIG1hdHogPSAgbWF0MyggICAgICAgICBjb3NyeiAsIHNpbnJ6LCAwLCAgICAgICAgIC1zaW5yeiwgY29zcnosIDAsICAgICAgICAgMCAgICAgLCAwICAgICwgMSAgICAgKTsgICAgICBuZXdQb3NpdGlvbiA9ICBtYXR5ICogbWF0eiAqIG5ld1Bvc2l0aW9uOyAgICAgbmV3UG9zaXRpb24gKz0gcG9zOyAgICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogIHZpZXdNYXRyaXggICogdmVjNCggbmV3UG9zaXRpb24sIDEuMCApOyB9IFwiXG4gIH0sXG4gIFwiZmxvY2twb3NpdGlvblwiOiB7XG4gICAgXCJmcmFnbWVudFwiOiBcInVuaWZvcm0gZmxvYXQgdGltZTsgdW5pZm9ybSBmbG9hdCBkZWx0YTsgdW5pZm9ybSBmbG9hdCBkZXB0aDsgIHZvaWQgbWFpbigpIHsgICAgICB2ZWMyIHV2ID0gZ2xfRnJhZ0Nvb3JkLnh5IC8gcmVzb2x1dGlvbi54eTsgICAgIHZlYzQgdG1wUG9zID0gdGV4dHVyZTJEKCB0ZXh0dXJlUG9zaXRpb24sIHV2ICk7ICAgICB2ZWMzIHBvc2l0aW9uID0gdG1wUG9zLnh5ejsgICAgIHZlYzMgdmVsb2NpdHkgPSB0ZXh0dXJlMkQoIHRleHR1cmVWZWxvY2l0eSwgdXYgKS54eXo7ICAgICAgZmxvYXQgcGhhc2UgPSB0bXBQb3MudzsgICAgICBwaGFzZSA9IG1vZCggKCBwaGFzZSArIGRlbHRhICsgICAgICAgICBsZW5ndGgoIHZlbG9jaXR5Lnh6ICkgKiBkZWx0YSAqIDMuICsgICAgICAgICBtYXgoIHZlbG9jaXR5LnksIDAuMCApICogZGVsdGEgKiA2LiApLCA2Mi44MyApOyAgICAgIHZlYzMgY2FsY3VsYXRlZFBvcyA9IHZlYzMoIHBvc2l0aW9uICsgdmVsb2NpdHkgKiBkZWx0YSAqIDE1Lik7ICAgICBjYWxjdWxhdGVkUG9zLnkgPSBjbGFtcCggY2FsY3VsYXRlZFBvcy55LCAtMjAwMC4wLCBkZXB0aCk7ICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KCBjYWxjdWxhdGVkUG9zLCBwaGFzZSk7ICB9IFwiXG4gIH0sXG4gIFwiZmxvY2t2ZWxvY2l0eVwiOiB7XG4gICAgXCJmcmFnbWVudFwiOiBcInVuaWZvcm0gZmxvYXQgdGltZTsgdW5pZm9ybSBmbG9hdCB0ZXN0aW5nOyB1bmlmb3JtIGZsb2F0IGRlbHRhOyB1bmlmb3JtIGZsb2F0IHNlcGVyYXRpb25EaXN0YW5jZTsgdW5pZm9ybSBmbG9hdCBhbGlnbm1lbnREaXN0YW5jZTsgdW5pZm9ybSBmbG9hdCBjb2hlc2lvbkRpc3RhbmNlOyB1bmlmb3JtIGZsb2F0IGZyZWVkb21GYWN0b3I7ICBjb25zdCBmbG9hdCB3aWR0aCA9IHJlc29sdXRpb24ueDsgY29uc3QgZmxvYXQgaGVpZ2h0ID0gcmVzb2x1dGlvbi55OyAgY29uc3QgZmxvYXQgUEkgPSAzLjE0MTU5MjY1MzU4OTc5MzsgY29uc3QgZmxvYXQgUElfMiA9IFBJICogMi4wOyAgZmxvYXQgem9uZVJhZGl1cyA9IDE2MC4wOyBmbG9hdCB6b25lUmFkaXVzU3F1YXJlZCA9IDI1NjAwLjA7ICBmbG9hdCBzZXBhcmF0aW9uVGhyZXNoID0gMC40NTsgZmxvYXQgYWxpZ25tZW50VGhyZXNoID0gMC42NTsgIGNvbnN0IGZsb2F0IFVQUEVSX0JPVU5EUyA9IEJPVU5EUzsgY29uc3QgZmxvYXQgTE9XRVJfQk9VTkRTID0gLVVQUEVSX0JPVU5EUzsgIGNvbnN0IGZsb2F0IFNQRUVEX0xJTUlUID0gOS4wOyAgZmxvYXQgcmFuZCh2ZWMyIGNvKXsgICAgIHJldHVybiBmcmFjdChzaW4oZG90KGNvLnh5ICx2ZWMyKDEyLjk4OTgsNzguMjMzKSkpICogNDM3NTguNTQ1Myk7IH0gIHZvaWQgbWFpbigpIHsgICAgICB6b25lUmFkaXVzID0gc2VwZXJhdGlvbkRpc3RhbmNlICsgYWxpZ25tZW50RGlzdGFuY2UgKyBjb2hlc2lvbkRpc3RhbmNlOyAgICAgc2VwYXJhdGlvblRocmVzaCA9IHNlcGVyYXRpb25EaXN0YW5jZSAvIHpvbmVSYWRpdXM7ICAgICBhbGlnbm1lbnRUaHJlc2ggPSAoIHNlcGVyYXRpb25EaXN0YW5jZSArIGFsaWdubWVudERpc3RhbmNlICkgLyB6b25lUmFkaXVzOyAgICAgem9uZVJhZGl1c1NxdWFyZWQgPSB6b25lUmFkaXVzICogem9uZVJhZGl1czsgICAgICAgdmVjMiB1diA9IGdsX0ZyYWdDb29yZC54eSAvIHJlc29sdXRpb24ueHk7ICAgICB2ZWMzIGZsb2NrcG9zaXRpb24sIGZsb2NrdmVsb2NpdHk7ICAgICAgdmVjMyBzZWxmUG9zaXRpb24gPSB0ZXh0dXJlMkQoIHRleHR1cmVQb3NpdGlvbiwgdXYgKS54eXo7ICAgICB2ZWMzIHNlbGZWZWxvY2l0eSA9IHRleHR1cmUyRCggdGV4dHVyZVZlbG9jaXR5LCB1diApLnh5ejsgICAgICBmbG9hdCBkaXN0OyAgICAgdmVjMyBkaXI7ICAgICBmbG9hdCBkaXN0U3F1YXJlZDsgICAgICBmbG9hdCBzZXBlcmF0aW9uU3F1YXJlZCA9IHNlcGVyYXRpb25EaXN0YW5jZSAqIHNlcGVyYXRpb25EaXN0YW5jZTsgICAgIGZsb2F0IGNvaGVzaW9uU3F1YXJlZCA9IGNvaGVzaW9uRGlzdGFuY2UgKiBjb2hlc2lvbkRpc3RhbmNlOyAgICAgIGZsb2F0IGY7ICAgICBmbG9hdCBwZXJjZW50OyAgICAgIHZlYzMgdmVsb2NpdHkgPSBzZWxmVmVsb2NpdHk7ICAgICAgZmxvYXQgbGltaXQgPSBTUEVFRF9MSU1JVDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzMgY2VudHJhbCA9IHZlYzMoIDAuLCAwLiwgMC4gKTsgICAgIGRpciA9IHNlbGZQb3NpdGlvbiAtIGNlbnRyYWw7ICAgICBkaXN0ID0gbGVuZ3RoKCBkaXIgKTsgICAgICBkaXIueSAqPSAyLjU7ICAgICB2ZWxvY2l0eSAtPSBub3JtYWxpemUoIGRpciApICogZGVsdGEgKiA1LjsgICAgICBmb3IgKGZsb2F0IHk9MC4wO3k8aGVpZ2h0O3krKykgeyAgICAgICAgIGZvciAoZmxvYXQgeD0wLjA7eDx3aWR0aDt4KyspIHsgICAgICAgICAgICAgIHZlYzIgcmVmID0gdmVjMiggeCArIDAuNSwgeSArIDAuNSApIC8gcmVzb2x1dGlvbi54eTsgICAgICAgICAgICAgZmxvY2twb3NpdGlvbiA9IHRleHR1cmUyRCggdGV4dHVyZVBvc2l0aW9uLCByZWYgKS54eXo7ICAgICAgICAgICAgICBkaXIgPSBmbG9ja3Bvc2l0aW9uIC0gc2VsZlBvc2l0aW9uOyAgICAgICAgICAgICBkaXN0ID0gbGVuZ3RoKGRpcik7ICAgICAgICAgICAgICBpZiAoZGlzdCA8IDAuMDAwMSkgY29udGludWU7ICAgICAgICAgICAgICBkaXN0U3F1YXJlZCA9IGRpc3QgKiBkaXN0OyAgICAgICAgICAgICAgaWYgKGRpc3RTcXVhcmVkID4gem9uZVJhZGl1c1NxdWFyZWQgKSBjb250aW51ZTsgICAgICAgICAgICAgIHBlcmNlbnQgPSBkaXN0U3F1YXJlZCAvIHpvbmVSYWRpdXNTcXVhcmVkOyAgICAgICAgICAgICAgaWYgKCBwZXJjZW50IDwgc2VwYXJhdGlvblRocmVzaCApIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IChzZXBhcmF0aW9uVGhyZXNoIC8gcGVyY2VudCAtIDEuMCkgKiBkZWx0YTsgICAgICAgICAgICAgICAgIHZlbG9jaXR5IC09IG5vcm1hbGl6ZShkaXIpICogZjsgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHBlcmNlbnQgPCBhbGlnbm1lbnRUaHJlc2ggKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0IHRocmVzaERlbHRhID0gYWxpZ25tZW50VGhyZXNoIC0gc2VwYXJhdGlvblRocmVzaDsgICAgICAgICAgICAgICAgIGZsb2F0IGFkanVzdGVkUGVyY2VudCA9ICggcGVyY2VudCAtIHNlcGFyYXRpb25UaHJlc2ggKSAvIHRocmVzaERlbHRhOyAgICAgICAgICAgICAgICAgIGZsb2NrdmVsb2NpdHkgPSB0ZXh0dXJlMkQoIHRleHR1cmVWZWxvY2l0eSwgcmVmICkueHl6OyAgICAgICAgICAgICAgICAgIGYgPSAoIDAuNSAtIGNvcyggYWRqdXN0ZWRQZXJjZW50ICogUElfMiApICogMC41ICsgMC41ICkgKiBkZWx0YTsgICAgICAgICAgICAgICAgIGZsb2NrdmVsb2NpdHkgKz0gbm9ybWFsaXplKGZsb2NrdmVsb2NpdHkpICogZjsgICAgICAgICAgICAgIH0gZWxzZSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0IHRocmVzaERlbHRhID0gMS4wIC0gYWxpZ25tZW50VGhyZXNoOyAgICAgICAgICAgICAgICAgZmxvYXQgYWRqdXN0ZWRQZXJjZW50ID0gKCBwZXJjZW50IC0gYWxpZ25tZW50VGhyZXNoICkgLyB0aHJlc2hEZWx0YTsgICAgICAgICAgICAgICAgICBmID0gKCAwLjUgLSAoIGNvcyggYWRqdXN0ZWRQZXJjZW50ICogUElfMiApICogLTAuNSArIDAuNSApICkgKiBkZWx0YTsgICAgICAgICAgICAgICAgICB2ZWxvY2l0eSArPSBub3JtYWxpemUoZGlyKSAqIGY7ICAgICAgICAgICAgICB9ICAgICAgICAgIH0gICAgICB9ICAgICAgICAgICAgICAgICAgICBpZiAoIGxlbmd0aCggdmVsb2NpdHkgKSA+IGxpbWl0ICkgeyAgICAgICAgIHZlbG9jaXR5ID0gbm9ybWFsaXplKCB2ZWxvY2l0eSApICogbGltaXQ7ICAgICB9ICAgICAgZ2xfRnJhZ0NvbG9yID0gdmVjNCggdmVsb2NpdHksIDEuMCApOyAgfSBcIlxuICB9LFxuICBcImdsb3dcIjoge1xuICAgIFwiZnJhZ21lbnRcIjogXCJ1bmlmb3JtIHZlYzMgZ2xvd0NvbG9yOyB2YXJ5aW5nIGZsb2F0IGludGVuc2l0eTsgdm9pZCBtYWluKCkgIHsgIHZlYzMgZ2xvdyA9IGdsb3dDb2xvciAqIGludGVuc2l0eTsgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoIGdsb3csIDEuMCApOyB9XCIsXG4gICAgXCJ2ZXJ0ZXhcIjogXCJ1bmlmb3JtIHZlYzMgdmlld1ZlY3RvcjsgdW5pZm9ybSBmbG9hdCBjOyB1bmlmb3JtIGZsb2F0IHA7IHZhcnlpbmcgZmxvYXQgaW50ZW5zaXR5OyB2b2lkIG1haW4oKSAgeyAgICAgdmVjMyB2Tm9ybWFsID0gbm9ybWFsaXplKCBub3JtYWxNYXRyaXggKiBub3JtYWwgKTsgIHZlYzMgdk5vcm1lbCA9IG5vcm1hbGl6ZSggbm9ybWFsTWF0cml4ICogdmlld1ZlY3RvciApOyAgaW50ZW5zaXR5ID0gcG93KCBjIC0gZG90KHZOb3JtYWwsIHZOb3JtZWwpLCBwICk7ICAgICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIG1vZGVsVmlld01hdHJpeCAqIHZlYzQoIHBvc2l0aW9uLCAxLjAgKTsgfVwiXG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCB7XG4gICAgbmV1dHJhbDoge1xuICAgICAgICByZWQ6IDB4N0E2ODY5LFxuICAgICAgICBkYXJrcmVkOiAweDJkMjYyNyxcbiAgICAgICAgLy9ncmVlbjogMHg2NTg3NkUsXG5cbiAgICAgICAgZ3JlZW46IDB4YzBjNGI2LFxuICAgICAgICBsaWdodHJlZDogMHhlYWRmZGIsXG4gICAgICAgIGdyYXlibHVlOiAweGFkYWViMCxcbiAgICAgICAgYnJvd246IDB4ZDhjMmI1LFxuICAgICAgICBvcmFuZ2U6IDB4ZjJjZmIzXG4gICAgfSxcblxuICAgIG5lb246IHtcbiAgICAgICAgYmx1ZTogMHgwMGVjZmYsXG4gICAgICAgIGdyZWVuOiAweDdjZmYwMCxcbiAgICAgICAgeWVsbG93OiAweGUzZmYwMCxcbiAgICAgICAgb3JhbmdlOiAweGZmYjQwMCxcbiAgICAgICAgdmlvbGV0OiAweGZkMDBmZlxuICAgIH0sXG5cbiAgICBncmF5c2NhbGU6IFtcbiAgICAgICAgMHgwMDAwMDAsXG4gICAgICAgIDB4MmEyYTJhLFxuICAgICAgICAweDVhNWE1YSxcbiAgICAgICAgMHg4YThhOGEsXG4gICAgICAgIDB4YWFhYWFhLFxuICAgICAgICAweGZmZmZmZlxuICAgIF1cbn0iLCJpbXBvcnQgQ29sb3JzIGZyb20gJy4vY29sb3JzLmVzNic7XG5leHBvcnQgZGVmYXVsdCB7XG4gICAgY29sb3J3aGVlbDogWyAgICAgICAweGZmZmEwMCwgMHhmZmNmMDAsIDB4ZmZhNjAwLCAweGZmN2QwMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDB4ZmYyMDAwLCAweGY0MjQ5NCwgMHg4YjIwYmIsIDB4MDAyNGJhLFxuICAgICAgICAgICAgICAgICAgICAgICAgMHgwMDdhYzcsIDB4MDBiMmQ2LCAweDAyYjgwMSwgMHg4NGNlMDAgXSxcblxuXG4gICAga2V5czoge1xuICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgIHdoaXRlOiB7XG4gICAgICAgICAgICAgICAgZW1pc3NpdmU6IENvbG9ycy5ncmF5c2NhbGVbM10sXG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5uZXV0cmFsLnJlZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsYWNrOiB7XG4gICAgICAgICAgICAgICAgZW1pc3NpdmU6IENvbG9ycy5ncmF5c2NhbGVbMV0sXG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5uZXV0cmFsLnJlZFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdWdnZXN0ZWQ6IHtcbiAgICAgICAgICAgIHdoaXRlOiB7XG4gICAgICAgICAgICAgICAgZW1pc3NpdmU6IENvbG9ycy5ncmF5c2NhbGVbMl0sXG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5uZW9uLmdyZWVuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmxhY2s6IHtcbiAgICAgICAgICAgICAgICBlbWlzc2l2ZTogQ29sb3JzLmdyYXlzY2FsZVsxXSxcbiAgICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLm5lb24uZ3JlZW5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc3Ryb25nbHlTdWdnZXN0ZWQ6IHtcbiAgICAgICAgICAgIHdoaXRlOiB7XG4gICAgICAgICAgICAgICAgZW1pc3NpdmU6IENvbG9ycy5ncmF5c2NhbGVbMl0sXG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5uZW9uLm9yYW5nZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJsYWNrOiB7XG4gICAgICAgICAgICAgICAgZW1pc3NpdmU6IENvbG9ycy5ncmF5c2NhbGVbMV0sXG4gICAgICAgICAgICAgICAgY29sb3I6IENvbG9ycy5uZW9uLm9yYW5nZVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG5cbiAgICB9LFxuXG4gICAgbWV0cm9ub21lOiB7XG4gICAgICAgIGRydW06IHtcbiAgICAgICAgICAgIGJ1bXBtYXA6ICcuL2Fzc2V0cy9pbWFnZXMvcmlwcGxlbWFwLmpwZycsXG4gICAgICAgICAgICBjb2xvcjogQ29sb3JzLm5ldXRyYWwuZGFya3JlZCxcbiAgICAgICAgICAgIGhpdGNvbG9yOiBDb2xvcnMuZ3JheXNjYWxlWzBdLFxuICAgICAgICAgICAgZW1pc3NpdmU6IENvbG9ycy5ncmF5c2NhbGVbMF0sXG4gICAgICAgICAgICBzcGVjdWxhcjogQ29sb3JzLm5ldXRyYWwuZ3JheWJsdWVcbiAgICAgICAgfSxcblxuICAgICAgICBoYW1tZXI6IHtcbiAgICAgICAgICAgIHJlZnJhY3Rpb25jdWJlOiBbXG4gICAgICAgICAgICAgICAgJy4vYXNzZXRzL2ltYWdlcy9ueC5qcGcnLFxuICAgICAgICAgICAgICAgICcuL2Fzc2V0cy9pbWFnZXMvbnkuanBnJyxcbiAgICAgICAgICAgICAgICAnLi9hc3NldHMvaW1hZ2VzL256LmpwZycsXG4gICAgICAgICAgICAgICAgJy4vYXNzZXRzL2ltYWdlcy9ueC5qcGcnLFxuICAgICAgICAgICAgICAgICcuL2Fzc2V0cy9pbWFnZXMvbnkuanBnJyxcbiAgICAgICAgICAgICAgICAnLi9hc3NldHMvaW1hZ2VzL256LmpwZycgXSxcbiAgICAgICAgICAgIGNvbG9yOiBDb2xvcnMubmV1dHJhbC5yZWQsXG4gICAgICAgICAgICBoaXRjb2xvcjogQ29sb3JzLmdyYXlzY2FsZVswXVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGRvbWU6IHtcbiAgICAgICAgY29sb3I6IENvbG9ycy5uZXV0cmFsLmRhcmtyZWQsXG4gICAgICAgIGVtaXNzaXZlOiBDb2xvcnMubmV1dHJhbC5kYXJrcmVkLFxuICAgICAgICBzcGVjdWxhcjogQ29sb3JzLm5ldXRyYWwucmVkXG4gICAgfSxcblxuICAgIGZsb2F0aW5ncGFydGljbGVzOiB7XG4gICAgICAgIHNwcml0ZTogJy4vYXNzZXRzL2ltYWdlcy9zbm93Zmxha2UxLnBuZycsXG4gICAgICAgIGNvbG9yOiBDb2xvcnMuZ3JheXNjYWxlWzJdXG4gICAgfSxcblxuICAgIGxpZ2h0aW5nOiB7XG4gICAgICAgIGhlbWlzcGhlcmU6IHtcbiAgICAgICAgICAgIHRvcDogQ29sb3JzLm5ldXRyYWwuZGFya3JlZCxcbiAgICAgICAgICAgIGJvdHRvbTogQ29sb3JzLm5ldXRyYWwuZ3JlZW5cbiAgICAgICAgfSxcbiAgICAgICAgc3BvdGxpZ2h0OiBDb2xvcnMuZ3JheXNjYWxlWzFdXG4gICAgfVxufVxuIiwiaW1wb3J0IE5vdGUgZnJvbSAnLi9tdXNpY3RoZW9yeS9ub3RlLmVzNic7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBTWU5USERSVU06ICdzeW50aF9kcnVtJyxcbiAgICBQSUFOTzogICAgICdhY291c3RpY19ncmFuZF9waWFubycsXG5cbiAgICBwbGF5ZXJTdGF0ZTogJ3JlYWR5JyxcblxuICAgIC8qKlxuICAgICAqIGluc3RydW1lbnRzIGxvYWRlZFxuICAgICAqL1xuICAgIF9pbnN0cnVtZW50c0xvYWRlZDogW10sXG5cbiAgICAvKipcbiAgICAgKiBwbGF5IG1pZGkgZmlsZVxuICAgICAqIEBwYXJhbSB1cmkgb2YgbWlkaWUgZmlsZVxuICAgICAqL1xuICAgIHBsYXkodXJpKSB7XG4gICAgICAgIHRoaXMucGxheWVyU3RhdGUgPSAnbG9hZGluZyc7XG4gICAgICAgIE1JREkuUGxheWVyLnRpbWVXYXJwID0gMTsgLy8gc3BlZWQgdGhlIHNvbmcgaXMgcGxheWVkIGJhY2tcbiAgICAgICAgTUlESS5QbGF5ZXIubG9hZEZpbGUodXJpLFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5vbkxvYWRlZCgpLFxuICAgICAgICAgICAgKCkgPT4gdGhpcy5vblByb2dyZXNzKCksXG4gICAgICAgICAgICAoZXJyKSA9PiB0aGlzLm9uRXJyb3IoZXJyKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHBhdXNlIHBsYXlpbmcgbWlkaSBmaWxlXG4gICAgICovXG4gICAgcGF1c2UoKSB7XG4gICAgICAgIHRoaXMucGxheWVyU3RhdGUgPSAncGF1c2VkJztcbiAgICAgICAgTUlESS5QbGF5ZXIucGF1c2UoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVzdW1lIHBsYXlpbmcgbWlkaSBmaWxlXG4gICAgICovXG4gICAgcmVzdW1lKCkge1xuICAgICAgICB0aGlzLnBsYXllclN0YXRlID0gJ3BsYXlpbmcnO1xuICAgICAgICBNSURJLlBsYXllci5yZXN1bWUoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2hlY2sgaWYgaW5zdHJ1bWVudCBpcyBsb2FkZWRcbiAgICAgKiBAcGFyYW0gaW5zdHJ1bWVudFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzSW5zdHJ1bWVudExvYWRlZChpbnN0cnVtZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9pbnN0cnVtZW50c0xvYWRlZC5pbmRleE9mKGluc3RydW1lbnQpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogbG9hZCBpbnN0cnVtZW50XG4gICAgICogQHBhcmFtIGluc3RydW1lbnRcbiAgICAgKi9cbiAgICBsb2FkSW5zdHJ1bWVudChpbnN0cnVtZW50LCBwYXRoKSB7XG4gICAgICAgIE1JREkubG9hZFBsdWdpbih7XG4gICAgICAgICAgICBzb3VuZGZvbnRVcmw6IHBhdGgsXG4gICAgICAgICAgICBpbnN0cnVtZW50OiBpbnN0cnVtZW50LFxuICAgICAgICAgICAgb25wcm9ncmVzczogKHN0YXRlLCBwcm9ncmVzcywgaW5zdHJ1bWVudCkgPT4gdGhpcy5vbkluc3RydW1lbnRMb2FkUHJvZ3Jlc3Moc3RhdGUsIHByb2dyZXNzLCBpbnN0cnVtZW50KSxcbiAgICAgICAgICAgIG9uc3VjY2VzczogKGV2ZW50KSA9PiB0aGlzLm9uSW5zdHJ1bWVudExvYWRlZChldmVudCksXG4gICAgICAgICAgICBvbmVycm9yOiAoZXJyKSA9PiB0aGlzLm9uSW5zdHJ1bWVudExvYWRlZEVycm9yKGVyciksXG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBwbGF5IGEgdG9uZVxuICAgICAqIEBwYXJhbSBpbnN0cnVtZW50XG4gICAgICogQHBhcmFtIG5vdGF0aW9uXG4gICAgICogQHBhcmFtIGR1cmF0aW9uXG4gICAgICovXG4gICAgcGxheVRvbmUoaW5zdHJ1bWVudCwgbm90YXRpb24sIG1pZGljaGFubmVsLCBkdXJhdGlvbikge1xuICAgICAgICBpZiAoIXRoaXMuaXNJbnN0cnVtZW50TG9hZGVkKGluc3RydW1lbnQpKSB7IHJldHVybjsgfVxuXG4gICAgICAgIE1JREkucHJvZ3JhbUNoYW5nZSgwLCBNSURJLkdNLmJ5TmFtZVtpbnN0cnVtZW50XS5udW1iZXIpO1xuICAgICAgICB2YXIgZGVsYXkgPSAwOyAvLyBwbGF5IG9uZSBub3RlIGV2ZXJ5IHF1YXJ0ZXIgc2Vjb25kXG4gICAgICAgIHZhciBub3RlID0gTm90ZS5ub3RhdGlvblRvTUlESShub3RhdGlvbik7IC8vIHRoZSBNSURJIG5vdGVcbiAgICAgICAgdmFyIHZlbG9jaXR5ID0gMTI3OyAvLyBob3cgaGFyZCB0aGUgbm90ZSBoaXRzXG4gICAgICAgIC8vIHBsYXkgdGhlIG5vdGVcbiAgICAgICAgTUlESS5zZXRWb2x1bWUoMCwgMTI3KTtcbiAgICAgICAgTUlESS5ub3RlT24oMCwgbm90ZSwgdmVsb2NpdHksIGRlbGF5KTtcblxuICAgICAgICBpZiAoZHVyYXRpb24pIHtcbiAgICAgICAgICAgIE1JREkubm90ZU9mZigwLCBub3RlLCBkZWxheSArIGR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBub3RlIG9uXG4gICAgICogQHBhcmFtIGluc3RydW1lbnRcbiAgICAgKiBAcGFyYW0gbm90YXRpb25cbiAgICAgKiBAcGFyYW0gbWlkaWNoYW5uZWxcbiAgICAgKi9cbiAgICBub3RlT24oaW5zdHJ1bWVudCwgbm90YXRpb24sIG1pZGljaGFubmVsLCBkdXJhdGlvbikge1xuICAgICAgICBpZiAoIXRoaXMuaXNJbnN0cnVtZW50TG9hZGVkKGluc3RydW1lbnQpKSB7IHJldHVybjsgfVxuICAgICAgICB2YXIgbm90ZSA9IE5vdGUubm90YXRpb25Ub01JREkobm90YXRpb24pO1xuICAgICAgICBNSURJLnByb2dyYW1DaGFuZ2UobWlkaWNoYW5uZWwsIE1JREkuR00uYnlOYW1lW2luc3RydW1lbnRdLm51bWJlcik7XG4gICAgICAgIHZhciB2ZWxvY2l0eSA9IDEyNzsgLy8gaG93IGhhcmQgdGhlIG5vdGUgaGl0c1xuICAgICAgICBNSURJLnNldFZvbHVtZSgwLCAxMjcpO1xuICAgICAgICBNSURJLm5vdGVPbihtaWRpY2hhbm5lbCwgbm90ZSwgdmVsb2NpdHksIDApO1xuXG4gICAgICAgIGlmIChkdXJhdGlvbikge1xuICAgICAgICAgICAgTUlESS5ub3RlT2ZmKG1pZGljaGFubmVsLCBub3RlLCBkdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogbm90ZSBvZmZcbiAgICAgKiBAcGFyYW0gbm90YXRpb25cbiAgICAgKiBAcGFyYW0gbWlkaWNoYW5uZWxcbiAgICAgKiBAcGFyYW0gZGVsYXlcbiAgICAgKi9cbiAgICBub3RlT2ZmKG5vdGF0aW9uLCBtaWRpY2hhbm5lbCwgZGVsYXkpIHtcbiAgICAgICAgaWYgKCFkZWxheSkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgdmFyIG5vdGUgPSBOb3RlLm5vdGF0aW9uVG9NSURJKG5vdGF0aW9uKTtcbiAgICAgICAgTUlESS5ub3RlT2ZmKG1pZGljaGFubmVsLCBub3RlLCBkZWxheSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGFkZCBldmVudCBsaXN0ZW5lclxuICAgICAqIEBwYXJhbSBldmVudHR5cGVcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBhZGRFdmVudExpc3RlbmVyKGV2ZW50dHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHsgdGhpcy5fbGlzdGVuZXJzID0gW107IH1cbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2goIHsgdHlwZTogZXZlbnR0eXBlLCBjYWxsYmFjazogY2FsbGJhY2sgfSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIG9uIGluc3RydW1lbnQgbG9hZGVkXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICovXG4gICAgb25JbnN0cnVtZW50TG9hZGVkKCkge30sXG5cbiAgICAvKipcbiAgICAgKiBvbiBpbnN0cnVtZW50IGxvYWQgcHJvZ3Jlc3NcbiAgICAgKiBAcGFyYW0gc3RhdGVcbiAgICAgKiBAcGFyYW0gcHJvZ3Jlc3NcbiAgICAgKiBAcGFyYW0gaW5zdHJ1bWVudFxuICAgICAqL1xuICAgIG9uSW5zdHJ1bWVudExvYWRQcm9ncmVzcyhzdGF0ZSwgcHJvZ3Jlc3MsIGluc3RydW1lbnQpIHtcbiAgICAgICAgaWYgKGluc3RydW1lbnQgJiYgcHJvZ3Jlc3MgPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGluc3RydW1lbnQgKyAnIGxvYWRlZCcpO1xuICAgICAgICAgICAgdGhpcy5faW5zdHJ1bWVudHNMb2FkZWQucHVzaChpbnN0cnVtZW50KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBvbiBpbnN0cnVtZW50IGxvYWRlZCBlcnJvclxuICAgICAqIEBwYXJhbSBlcnJcbiAgICAgKi9cbiAgICBvbkluc3RydW1lbnRMb2FkZWRFcnJvcihlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0luc3RydW1lbnQgbG9hZGluZyBlcnJvcicsIGVycik7XG4gICAgfSxcblxuICAgIG9uTG9hZGVkKCkge1xuICAgICAgICBNSURJLnByb2dyYW1DaGFuZ2UoMCwgTUlESS5HTS5ieU5hbWVbdGhpcy5QSUFOT10ubnVtYmVyKTtcbiAgICAgICAgTUlESS5QbGF5ZXIuc3RhcnQoKTtcbiAgICAgICAgdGhpcy5wbGF5ZXJTdGF0ZSA9ICdwbGF5aW5nJztcbiAgICAgICAgdGhpcy5pc1BsYXlpbmcgPSB0cnVlO1xuICAgICAgICBNSURJLlBsYXllci5hZGRMaXN0ZW5lcihkYXRhID0+IHRoaXMub25NSURJRGF0YShkYXRhKSk7XG4gICAgfSxcblxuICAgIG9uUHJvZ3Jlc3MoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdwcm9ncmVzcycpO1xuICAgIH0sXG5cbiAgICBvbkVycm9yKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnZXJyb3InLCBlcnIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBvbiBtaWRpIGRhdGEgY2FsbGJhY2tcbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqL1xuICAgIG9uTUlESURhdGEoZGF0YSkge1xuICAgICAgICBpZiAodGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHRoaXMuX2xpc3RlbmVycy5sZW5ndGg7IGMrKykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9saXN0ZW5lcnNbY10udHlwZSA9PT0gJ21pZGlkYXRhJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzW2NdLmNhbGxiYWNrLmFwcGx5KHRoaXMsIFt7IG5vdGU6IGRhdGEubm90ZSAtIDIxLCB2ZWxvY2l0eTogZGF0YS52ZWxvY2l0eSB9XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCBOb3RlIGZyb20gJy4vbXVzaWN0aGVvcnkvbm90ZS5lczYnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gICAgLyoqXG4gICAgICogYXBwbHkgbiBudW1iZXIgb2YgcHJvcGVydGllcyB0byBhbiBvYmplY3RcbiAgICAgKiBAcGFyYW0gb2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IHByb3BzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBvZiBwcm9wZXJ0eSAocHJlcGVuZCBrZXkgbmFtZSlcbiAgICAgKi9cbiAgICBjb3B5UHJvcHNUbyhvYmplY3QsIHByb3BzLCBuYW1lc3BhY2UpIHtcbiAgICAgICAgaWYgKCFuYW1lc3BhY2UpIHsgbmFtZXNwYWNlID0gJyc7IH1cbiAgICAgICAgZm9yICh2YXIgYyBpbiBwcm9wcykge1xuICAgICAgICAgICAgb2JqZWN0W2MgKyBuYW1lc3BhY2VdID0gcHJvcHNbY107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdHVybiBkZWNpbWFsIGNvbG9yIHRvIFJHQlxuICAgICAqIEBwYXJhbSBkZWNcbiAgICAgKiBAcGFyYW0gbWF4XG4gICAgICogQHJldHVybnMge3tyOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyfX1cbiAgICAgKi9cbiAgICBkZWNUb1JHQihkZWMsIG1heCkge1xuICAgICAgICBpZiAoIW1heCkgeyBtYXggPSAyNTU7IH1cbiAgICAgICAgbWF4ICs9IDE7IC8vIGFpZHMgd2l0aCByb3VuZGluZ1xuICAgICAgICB2YXIgciA9IE1hdGguZmxvb3IoZGVjIC8gKDI1NioyNTYpKTtcbiAgICAgICAgdmFyIGcgPSBNYXRoLmZsb29yKGRlYyAvIDI1NikgJSAyNTY7XG4gICAgICAgIHZhciBiID0gZGVjICUgMjU2O1xuICAgICAgICByZXR1cm4geyByOiByLzI1NSAqIG1heCwgZzogZy8yNTUgKiBtYXgsIGI6IGIvMjU1ICogbWF4IH07XG4gICAgfSxcblxuICAgIFJHQlRvRGVjKHJnYikge1xuICAgICAgICByZXR1cm4gcmdiLnIgPDwgMTYgKyByZ2IuZyA8PCAxNiArIHJnYi5iO1xuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlR3JvdXAge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtcykge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBwYXJlbnQgZ3JvdXAgb2YgY2hpbGQgb2JqZWN0cyB3ZSB3aWxsIGNyZWF0ZVxuICAgICAgICAgKiBAdHlwZSB7VEhSRUUuT2JqZWN0M0R9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9ncm91cCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuXG4gICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmFzc2V0cykge1xuICAgICAgICAgICAgLy8gdG9kbzogZGV0ZXJtaW5lIHdoZW4gdG8gdXNlIEpTT04gTG9hZGVyLCBPQkogbG9hZGVyLCBvciB3aGF0ZXZlclxuICAgICAgICAgICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5KU09OTG9hZGVyKCk7XG4gICAgICAgICAgICBsb2FkZXIubG9hZChwYXJhbXMuYXNzZXRzLCAoZ2VvbWV0cnksIG1hdGVyaWFscykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMub25Bc3NldHNMb2FkZWQoZ2VvbWV0cnksIG1hdGVyaWFscyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25Jbml0aWFsaXplKHBhcmFtcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogZ2V0IG5hbWUgb2YgZ3JvdXBcbiAgICAgKi9cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBvdmVycmlkYWJsZSBtZXRob2RzXG4gICAgICogbGVhdmUgZW1wdHkgdG8gYmUgYSBzaW1wbGUgYWJzdHJhY3Rpb24gd2UgZG9uJ3QgaGF2ZSB0byBjYWxsIHN1cGVyIG9uXG4gICAgICogQHBhcmFtIHNjZW5lXG4gICAgICogQHBhcmFtIGN1c3RvbVxuICAgICAqL1xuICAgIG9uQ3JlYXRlKHNjZW5lLCBjdXN0b20pIHt9O1xuICAgIG9uUmVuZGVyKHNjZW5lLCBjdXN0b20pIHt9O1xuICAgIG9uSW5pdGlhbGl6ZShwYXJhbXMpIHt9O1xuICAgIG9uQXNzZXRzTG9hZGVkKGdlb21ldHJ5LCBtYXRlcmlhbCkge307XG5cbiAgICAvKipcbiAgICAgKiBvbiBjcmVhdGUgc2NlbmUgKG9yIGVhcmxpZXN0IHBvc3NpYmxlIG9wcG9ydHVuaXR5KVxuICAgICAqIEBwYXJhbSBzY2VuZVxuICAgICAqIEBwYXJhbSBjdXN0b21cbiAgICAgKi9cbiAgICBjcmVhdGUoc2NlbmUsIGN1c3RvbSkge1xuICAgICAgICB0aGlzLl9ncm91cC5uYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICBzY2VuZS5zY2VuZS5hZGQodGhpcy5fZ3JvdXApO1xuICAgICAgICB0aGlzLm9uQ3JlYXRlKHNjZW5lLCBjdXN0b20pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGFkZCBvYmplY3QgdG8gc2NlbmVcbiAgICAgKiBAcGFyYW0gb2JqZWN0XG4gICAgICovXG4gICAgYWRkKG9iamVjdCwgbmFtZSkge1xuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIG5hbWUgPSB0aGlzLm5hbWUgKyAnLWNoaWxkJztcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX2dyb3VwLmFkZChvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBwYXJlbnQgZ3JvdXAgb2JqZWN0XG4gICAgICogQHJldHVybnMge1RIUkVFLk9iamVjdDNEfVxuICAgICAqL1xuICAgIGdldCBncm91cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGdldCBjaGlsZHJlbiBvZiB0aGlzIGdyb3VwXG4gICAgICogQHJldHVybnMge0FycmF5fVxuICAgICAqL1xuICAgIGdldCBjaGlsZHJlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyb3VwLmNoaWxkcmVuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIG9uIHByZXJlbmRlciBzY2VuZVxuICAgICAqIEBwYXJhbSBzY2VuZVxuICAgICAqIEBwYXJhbSBjdXN0b21cbiAgICAgKi9cbiAgICBwcmVSZW5kZXIoc2NlbmUsIGN1c3RvbSkge31cblxuICAgIC8qKlxuICAgICAqIG9uIHJlbmRlciBzY2VuZVxuICAgICAqIEBwYXJhbSBzY2VuZVxuICAgICAqIEBwYXJhbSBjdXN0b21cbiAgICAgKi9cbiAgICByZW5kZXIoc2NlbmUsIGN1c3RvbSkge1xuICAgICAgICB0aGlzLm9uUmVuZGVyKHNjZW5lLCBjdXN0b20pO1xuICAgIH1cbn0iXX0="}