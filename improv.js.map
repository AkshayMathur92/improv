{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/trivr/src/basegroup.es6","src/improv.es6","src/input.es6","src/midikeymanager.es6","src/musictheory/keysignatureprediction.es6","src/musictheory/note.es6","src/objects/dome.es6","src/objects/floatingparticles.es6","src/objects/keyboard.es6","src/objects/lighting.es6","src/objects/metronome.es6","src/qwertykeymanager.es6","src/shaders.es6","src/themeing/colors.es6","src/themeing/style.es6","src/utils.es6"],"names":[],"mappings":"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","file":"improv.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export default class BaseGroup {\n    constructor(params) {\n\n        /**\n         * parent group of child objects we will create\n         * @type {THREE.Object3D}\n         * @private\n         */\n        this._group = new THREE.Object3D();\n\n        if (params && params.assets) {\n            // todo: determine when to use JSON Loader, OBJ loader, or whatever\n            var loader = new THREE.JSONLoader();\n            loader.load(params.assets, (geometry, materials) => {\n                this.onAssetsLoaded(geometry, materials);\n            });\n        }\n\n        this.onInitialize(params);\n    }\n\n    /**\n     * get name of group\n     */\n    get name() {\n        return this.constructor.name;\n    }\n\n    /**\n     * overridable methods\n     * leave empty to be a simple abstraction we don't have to call super on\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {};\n    onRender(scene, custom) {};\n    onInitialize(params) {};\n    onAssetsLoaded(geometry, material) {};\n\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     * @param custom\n     */\n    create(scene, custom) {\n        this._group.name = this.name;\n        scene.scene.add(this._group);\n        this.onCreate(scene, custom);\n    }\n\n    /**\n     * add object to scene\n     * @param object\n     */\n    add(object, name) {\n        if (!name) {\n            name = this.name + '-child';\n        }\n        object.name = name;\n        this._group.add(object);\n    }\n\n    /**\n     * get parent group object\n     * @returns {THREE.Object3D}\n     */\n    get group() {\n        return this._group;\n    }\n\n    /**\n     * get children of this group\n     * @returns {Array}\n     */\n    get children() {\n        return this._group.children;\n    }\n\n    /**\n     * on prerender scene\n     * @param scene\n     * @param custom\n     */\n    preRender(scene, custom) {}\n\n    /**\n     * on render scene\n     * @param scene\n     * @param custom\n     */\n    render(scene, custom) {\n        this.onRender(scene, custom);\n    }\n}","import Input from './input.es6';\nimport Metronome from './objects/metronome.es6';\nimport Keyboard from './objects/keyboard.es6';\nimport Dome from './objects/dome.es6';\nimport FloatingParticles from './objects/floatingparticles.es6';\nimport Lighting from './objects/lighting.es6';\n\nexport default class Improv {\n    constructor(scene, params) {\n        scene.onCreate = this.create;\n        scene.addObjects([\n            new Metronome(),\n            new FloatingParticles(),\n            new Dome(),\n            new Keyboard({ assets: './assets/models/keyboardkey.json', input: params.input }),\n            new Lighting() ]);\n    }\n\n    create(scene, custom) {\n        scene.renderer.gammaInput = true;\n        scene.renderer.gammaOutput = true;\n    }\n\n    render(scene, custom) {}\n}","import QWERTYKeyManager from './qwertykeymanager.es6';\nimport MIDIKeyManager from './midikeymanager.es6';\nimport KeySignaturePrediction from './musictheory/keysignatureprediction.es6';\n\nexport default class {\n    constructor(type, cb) {\n        /**\n         * key manager\n         * @type {$ES6_ANONYMOUS_CLASS$}\n         * @private\n         */\n        if (type === 'QWERTY') {\n            this._keymanager = new QWERTYKeyManager( changed => this.onKeyChange(changed));\n        } else if (type === 'MIDI') {\n            this._keymanager = new MIDIKeyManager( changed => this.onKeyChange(changed));\n        }\n\n        /**\n         * key signature prediction\n         * @type {$ES6_ANONYMOUS_CLASS$}\n         * @private\n         */\n        this._keySigPrediction = new KeySignaturePrediction();\n\n        /**\n         * key change callback\n         */\n        this._callback = cb;\n    }\n\n    /**\n     * clear prediction history\n     */\n    clearPredictionHistory() {\n        this._keySigPrediction.clearHistory();\n    }\n\n    /**\n     * on key change\n     * @param changed\n     */\n    onKeyChange(changed) {\n        var kd = this._keymanager.getKeysDown();\n        var predicted = this._keySigPrediction.update(kd);\n        this._callback.apply(this, [ { down: kd, predictedKey: predicted, changed: changed }]);\n    }\n}","import Note from './musictheory/note.es6';\n\nexport default class {\n    constructor(cb) {\n        /**\n         * event callback\n         */\n        this._callback = cb;\n\n        /**\n         * keys down\n         * @type {Array}\n         * @private\n         */\n        this._keys = [];\n\n        /**\n         * MIDI key to notation mapping (coming from MIDI, so not customizable)\n         * the splice happens because 0 index in MIDI starts with C\n         * @type {Array.<string>}\n         * @private\n         */\n        this._mapping = Note.sharpNotations\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations)\n            .concat(Note.sharpNotations).splice(3, Note.sharpNotations.length *10);\n\n        // request MIDI access\n        if (navigator.requestMIDIAccess) {\n            navigator.requestMIDIAccess().then(\n                (event) => this.onMIDISuccess(event),\n                (event) => this.onMIDIFailure(event) );\n        } else {\n            console.log(\"No MIDI support in your browser.\");\n        }\n    }\n\n    /**\n     * on midi connection success\n     * @param midi\n     */\n    onMIDISuccess(midi) {\n        var inputs = midi.inputs;\n        for (let input of inputs.values()) {\n            input.onmidimessage = msg => this.onMIDIMessage(msg);\n        }\n    }\n\n    /**\n     * on midi connection failure\n     * @param event\n     */\n    onMIDIFailure(event) {\n        console.log(\"No access to MIDI devices or your browser doesn't support WebMIDI API. Please use WebMIDIAPIShim \" + event);\n    }\n\n    /**\n     * on midi message\n     * @param msg\n     */\n    onMIDIMessage(msg) {\n        var cmd = msg.data[0] >> 4;\n        var channel = msg.data[0] & 0xf;\n        var noteNumber = msg.data[1];\n        var velocity = 0;\n        if (msg.data.length > 2)\n            velocity = msg.data[2] / 100;\n\n        // MIDI noteon with velocity=0 is the same as noteoff\n        if ( cmd==8 || ((cmd==9)&&(velocity==0)) ) { // noteoff\n            this.onKeyUp(noteNumber);\n        } else if (cmd == 9) { // note on\n            this.onKeyDown(noteNumber, velocity);\n        } //else if (cmd == 11) { // controller message\n    }\n\n    /**\n     * get keys down\n     */\n    getKeysDown() {\n        var down = [];\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c] > 0) {\n                var octave = 0;\n                if (c >= this._keys.length/2) { octave = 1; }\n                down.push( { notation: this._mapping[c], octave: octave, index: c, velocity: this._keys[c]} );\n            }\n        }\n        return down;\n    }\n\n    /**\n     * on key down\n     * @param key\n     * @param velocity\n     */\n    onKeyDown(key, velocity) {\n        this._keys[key] = velocity;\n        var octave = 0;\n        octave = Math.floor(key / Note.sharpNotations.length);\n        this._callback({\n            notation: this._mapping[key],\n            octave: octave,\n            index: key,\n            velocity: velocity,\n            action: 'press' });\n    }\n\n    /**\n     * on key down\n     * @param key\n     */\n    onKeyUp(key) {\n        this._keys[key] = 0.0;\n        var octave = 0;\n        octave = Math.floor(key / Note.sharpNotations.length);\n        this._callback({\n            notation: this._mapping[key],\n            octave: octave,\n            index: key,\n            velocity: 0,\n            action: 'release' });\n    }\n}","import Note from './note.es6';\n\nexport default class {\n    constructor() {\n        /**\n         * key signature score history\n         * @type {Array}\n         * @private\n         */\n        this._keySignatureScoreHistory = [];\n\n        /**\n         * history decay rate\n         * @type {Number}\n         * @private\n         */\n        this._keySignatureDecayRate = 0.9;\n\n        Note.generateKeySignatureLookup();\n    }\n\n    /**\n     * update keys pressed\n     * @param {Array} keys\n     */\n    update(keys) {\n        if (keys.length === 0) { return this._keySignatureScoreHistory; }\n        var keysigScores = {};\n        for (var sig in Note.keys) {\n            for (var d = 0; d < keys.length; d++) {\n                if (Note.keys[sig].indexOf(keys[d].notation) !== -1) {\n                    if (!keysigScores[sig]) { keysigScores[sig] = 0; }\n                    keysigScores[sig] ++;\n\n                    if (keys[d].notation === sig) {\n                        keysigScores[sig] += .5; // small priority boost for root note\n                    }\n                }\n            }\n        }\n\n        var scores = [];\n        for (var score in keysigScores) {\n            scores.push( { score: keysigScores[score], key: score, timestamp: Date.now() });\n        }\n\n        this.decayHistoricalScores();\n        console.log(this._keySignatureScoreHistory)\n        return this.applyCurrentScoreToHistory(scores);\n    }\n\n    /**\n     * clear history\n     */\n    clearHistory() {\n        this._keySignatureScoreHistory = [];\n    }\n\n    /**\n     * slowly decay current historical scores\n     */\n    decayHistoricalScores() {\n        for (var c = 0; c < this._keySignatureScoreHistory.length; c++) {\n            this._keySignatureScoreHistory[c].score *= this._keySignatureDecayRate;\n        }\n    }\n\n    /**\n     * apply scores to history (aggregate all scores: current and past)\n     * @param scores\n     */\n    applyCurrentScoreToHistory(scores) {\n        for (var c = 0; c < scores.length; c++) {\n            var found = false;\n            for (var d = 0; d < this._keySignatureScoreHistory.length; d++) {\n                if (this._keySignatureScoreHistory[d].key === scores[c].key) {\n                    found = true;\n                    this._keySignatureScoreHistory[d].score += scores[c].score;\n                }\n            }\n            if (!found) {\n                this._keySignatureScoreHistory.push(scores[c]);\n            }\n        }\n        return this._keySignatureScoreHistory.sort(function(a, b) { return (a.score < b.score ) ? 1 : ((b.score < a.score) ? -1 : 0); });\n    }\n}","/**\n * Note static class\n * @constructor\n */\nexport default {\n    /** cached keysignature lookup table */\n    keys: {},\n\n    /**\n     * incremental tones as sharp notation\n     * @const\n     * @static\n     * @type {Array.<string>}\n     **/\n    sharpNotations: [\"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\"],\n\n    /**\n     * incremental tones as flat notation\n     * @const\n     * @static\n     * @type {Array.<string>}\n     **/\n    flatNotations: [\"A\", \"Bb\", \"B\", \"C\", \"Db\", \"D\", \"Eb\", \"E\", \"F\", \"Gb\", \"G\", \"Ab\"],\n\n    /**\n     * odd notations\n     * @const\n     * @static\n     * @type {Array.<string>}\n     **/\n     oddNotations: [\"B#\", \"Cb\", \"E#\", \"Fb\"],\n\n    /**\n     * corrected notations\n     * @const\n     * @static\n     * @type {Array.<string>}\n     **/\n     correctedNotations: [\"C\", \"C\", \"F\", \"F\"],\n\n    /**\n     * turn a notation into a frequency\n     * @static\n     * @param {string} notation\n     * @return {string} frequency\n     */\n    getFrequencyForNotation(nt) {\n        var octave = 4;\n\n        // does notation include the octave?\n        if ( !isNaN( parseInt(nt.charAt(nt.length -1)) )) {\n            octave = parseInt(nt.charAt(nt.length -1));\n            nt = nt.substr(0, nt.length-1);\n        }\n\n        // correct any flat/sharps that resolve to a natural\n        if (this.oddNotations.indexOf(nt) != -1) {\n            nt = this.correctedNotations[this.oddNotations.indexOf(nt)];\n        }\n\n        var freq;\n        var indx = this.sharpNotations.indexOf(nt);\n\n        if (indx == -1) {\n            indx = this.flatNotations.indexOf(nt);\n        }\n\n        if (indx != -1) {\n            indx += (octave-4) * this.sharpNotations.length;\n            freq = 440 * (Math.pow(2, indx/12));\n        }\n        return freq;\n    },\n\n    /**\n     * get notes in a specific key signature\n     *\n     * @static\n     * @param {string} key (root note)\n     * @param {boolean} if major key signature\n     * @param {number} octave to use (optional)\n     * @return {Array.<string>} keys in key signature\n     */\n    notesInKeySignature(key, major, octave) {\n        var notesToIndex;\n        var notesInKey = [];\n        var startPos;\n\n        // correct any flat/sharps that resolve to a natural\n        if (this.oddNotations.indexOf(key) != -1) {\n            key = this.correctedNotations[this.oddNotations.indexOf(key)];\n        }\n\n        // find the correct note and notation\n        if (this.sharpNotations.indexOf(key) != -1) {\n            notesToIndex = this.sharpNotations.slice();\n            startPos = this.sharpNotations.indexOf(key);\n        } else {\n            notesToIndex = this.flatNotations.slice();\n            startPos = this.flatNotations.indexOf(key);\n        }\n\n        // double the array length\n        var len = notesToIndex.length;\n        for ( var c = 0; c < len; c++ ) {\n            if (octave) {\n                notesToIndex.push(notesToIndex[c] + (octave+1));\n            } else {\n                notesToIndex.push(notesToIndex[c]);\n            }\n        }\n\n        // add octave notation to the first half of the array\n        if (octave) {\n            for (var c = 0; c < this.flatNotations.length; c++) {\n                notesToIndex[c] += octave;\n            }\n        }\n        // chop off the front of the array to start at the root key in the key signature\n        notesToIndex.splice(0, startPos);\n\n        // build the key signature\n        if (major) {\n            // MAJOR From root: whole step, whole step, half step, whole step, whole step, whole step, half step\n            notesInKey.push( notesToIndex[0] );\n            notesInKey.push( notesToIndex[2] );\n            notesInKey.push( notesToIndex[4] );\n            notesInKey.push( notesToIndex[5] );\n            notesInKey.push( notesToIndex[7] );\n            notesInKey.push( notesToIndex[9] );\n            notesInKey.push( notesToIndex[11] );\n        } else {\n            // MINOR From root: whole step, half step, whole step, whole step, half step, whole step, whole step\n            notesInKey.push( notesToIndex[0] );\n            notesInKey.push( notesToIndex[2] );\n            notesInKey.push( notesToIndex[3] );\n            notesInKey.push( notesToIndex[5] );\n            notesInKey.push( notesToIndex[7] );\n            notesInKey.push( notesToIndex[8] );\n            notesInKey.push( notesToIndex[10] );\n        }\n        return notesInKey;\n    },\n\n    /**\n     * pregenerate a key signature lookup table for every note\n     */\n    generateKeySignatureLookup() {\n        var kys = this.sharpNotations;\n        for (var c = 0; c < kys.length; c++) {\n            this.keys[kys[c]] = this.notesInKeySignature(kys[c], true);\n            this.keys[kys[c] + 'm'] = this.notesInKeySignature(kys[c], false);\n        }\n    }\n\n};","import BaseGroup from '../../node_modules/trivr/src/basegroup.es6';\nimport Style from '../themeing/style.es6';\n\nexport default class Dome extends BaseGroup {\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {\n        var mesh = new THREE.Mesh(this.createGeometry(), this.createMaterial());\n        mesh.position.z = 5;\n        this.add(mesh, 'dome');\n    }\n\n    /**\n     * create globe geometry\n     * @returns {THREE.IcosahedronGeometry}\n     */\n    createGeometry() {\n        return new THREE.IcosahedronGeometry( 800, 2 );\n    }\n\n    /**\n     * create globe material\n     */\n    createMaterial() {\n        return new THREE.MeshPhongMaterial({\n            color      :  Style.dome.color,\n            emissive   :  Style.dome.emissive,\n            specular   :  Style.dome.specular,\n            side       :  THREE.BackSide,\n            shininess  :  10,\n            shading    :  THREE.FlatShading,\n            transparent: 1,\n            opacity    : 1\n        });\n    }\n}","import BaseGroup from '../../node_modules/trivr/src/basegroup.es6';\nimport Style from '../themeing/style.es6';\n\nexport default class FloatingParticles extends BaseGroup {\n    /**\n     * on create scene\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {\n        var geometry = new THREE.Geometry();\n        var textureLoader = new THREE.TextureLoader();\n        var sprite = textureLoader.load(Style.floatingparticles.sprite);\n\n        for (var i = 0; i < 10000; i ++) {\n            var vertex = new THREE.Vector3();\n            vertex.x = Math.random() * 2000 - 1000;\n            vertex.y = Math.random() * 2000 - 1000;\n            vertex.z = Math.random() * 2000 - 1000;\n            geometry.vertices.push( vertex );\n        }\n\n        this.materials = [];\n        for (var i = 0; i < 4; i ++ ) {\n            this.materials[i] = new THREE.PointsMaterial({\n                size: Math.random()*1.0 + .75,\n                map: sprite,\n                blending: THREE.AdditiveBlending,\n                depthTest: false,\n                transparent : true });\n\n            this.materials[i].color.set(Style.floatingparticles.color);\n\n            var particles = new THREE.Points( geometry, this.materials[i] );\n\n            particles.rotation.x = Math.random() * 6;\n            particles.rotation.y = Math.random() * 6;\n            particles.rotation.z = Math.random() * 6;\n            this.add(particles);\n\n        }\n    }\n\n    onRender() {\n        var time = Date.now() * 0.00005;\n        for (var i = 0; i < this.children.length; i ++) {\n            var object = this.children[ i ];\n            if ( object instanceof THREE.Points ) {\n                object.rotation.y = time * ( i < 4 ? i + 1 : - ( i + 1 ) );\n            }\n        }\n\n        /*for ( i = 0; i < this.materials.length; i ++ ) {\n            var h = ( 360 * ( 0 + time ) % 360 ) / 360;\n            this.materials[i].color.setHSL( 1, .5, h );\n        }*/\n    }\n\n}","import BaseGroup from '../../node_modules/trivr/src/basegroup.es6';\nimport Input from '../input.es6';\nimport Note from '../musictheory/note.es6';\nimport Style from '../themeing/style.es6';\nimport Utils from '../utils.es6';\n\nexport default class Keyboard extends BaseGroup {\n   onInitialize(params) {\n       /**\n        * inactivity timer for suggestions\n        * @type {null}\n        * @private\n        */\n       this._inactivityTimer = null;\n\n       /**\n        * key visuals\n        * @type {Array}\n        * @private\n        */\n       this._keys = [];\n\n       /**\n        * keyboard/key input\n        * @type {$ES6_ANONYMOUS_CLASS$}\n        * @private\n        */\n       this._input = new Input(params.input, (keys) => this.onKeyInputChange(keys) );\n\n       /**\n        * suggested keys from key signature prediction\n        * @type {Array}\n        */\n       this.suggestedKeys = [];\n\n       /**\n        * current key signature\n        * @type {String}\n        */\n       this.currentKeySignature = null;\n   }\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {}\n\n    /**\n     * on render scene\n     * @param scene\n     * @param custom\n     */\n    onRender(scene, custom) {\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c].colortween.animating) {\n                this._keys[c].object.material.color.setRGB(\n                    this._keys[c].colortween.rcolor/100,\n                    this._keys[c].colortween.gcolor/100,\n                    this._keys[c].colortween.bcolor/100 );\n                this._keys[c].object.material.emissive.setRGB(\n                    this._keys[c].colortween.remissive/100,\n                    this._keys[c].colortween.gemissive/100,\n                    this._keys[c].colortween.bemissive/100 );\n            }\n        }\n    }\n\n    /**\n     * on assets loaded\n     * @param geometry\n     */\n    onAssetsLoaded(geometry) {\n        var mat = new THREE.MeshStandardMaterial( {\n            metalness: 0.7,\n            roughness: 1,\n            side: THREE.FrontSide,\n            shading: THREE.FlatShading\n        });\n        this.setupScene(geometry, mat);\n    };\n\n    /**\n     * dynamically generate circle of keys\n     * @param geometry\n     * @param material\n     */\n    setupScene(geometry, material) {\n        var counter = 0;\n        for (var c = 0; c < 14; c++) {\n            this.addKey(- c * Math.PI * 2 / 14, true, String.fromCharCode('A'.charCodeAt(0) + counter), geometry, material);\n\n            if (counter !== 1 && counter !== 4) {\n                this.addKey(-(c * Math.PI * 2 / 14 + Math.PI/14), false, String.fromCharCode('A'.charCodeAt(0) + counter) + '#', geometry, material);\n            }\n\n            counter ++;\n            if (counter >= 7) {\n                counter = 0;\n            }\n        }\n        this.group.rotation.z = Math.PI;\n        this.group.position.z = -400;\n        this.group.scale.set(10, 10, 10);\n    }\n\n    /**\n     * on inactivity (fade away keys and clear key sig)\n     */\n    onInactive() {\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c].suggested) {\n                var suggestionType = this._keys[c].suggested;\n                Utils.copyPropsTo(this._keys[c].colortween, Utils.decToRGB(Style.keys[suggestionType][this._keys[c].type].emissive, 100), 'emissive');\n                Utils.copyPropsTo(this._keys[c].colortween, Utils.decToRGB(Style.keys[suggestionType][this._keys[c].type].color, 100), 'color');\n                this._keys[c].colortween.animating = true;\n\n                var target = Utils.copyPropsTo({}, Utils.decToRGB(Style.keys.normal[this._keys[c].type].color, 100), 'emissive');\n                Utils.copyPropsTo(target, Utils.decToRGB(Style.keys.normal[this._keys[c].type].emissive, 100), 'color');\n\n                this._input.clearPredictionHistory();\n                createjs.Tween.get(this._keys[c].colortween)\n                    .to(target, 2000)\n                    .wait(100) // wait a few ticks, or the render cycle won't pick up the changes with the flag\n                    .call( function() { this.animating = false; } );\n            }\n        }\n    }\n\n    /**\n     * on key change\n     * @param keys\n     */\n    onKeyInputChange(event) {\n        var key = this.findKeyObjectsForNotation(event.changed.notation);\n        var octave;\n        if (event.changed.octave / 2 === Math.floor(event.changed.octave / 2)) {\n            octave = 1;\n        } else {\n            octave = 0;\n        }\n\n        this.toggleKeyPressed(key[octave], event.changed.velocity);\n\n        if (event.predictedKey.length > 0 && event.predictedKey[0] !== this.currentKeySignature) {\n            this.onKeySignatureChange(event.predictedKey[0].key);\n        }\n    }\n\n    /**\n     * handler when key signature changes\n     * @param keysig\n     */\n    onKeySignatureChange(keysig) {\n        var c;\n        for (c = 0; c < this.suggestedKeys.length; c++) {\n            this.toggleKeySuggestion(this.suggestedKeys[c], false);\n        }\n        this.currentKeySignature = keysig;\n        this.suggestedKeys = Note.keys[keysig];\n\n        for (c = 0; c < this.suggestedKeys.length; c++) {\n            this.toggleKeySuggestion(this.suggestedKeys[c], true, c);\n        }\n    }\n\n    /**\n     * toggle key pressed\n     * @param key\n     * @param velocity\n     */\n    toggleKeyPressed(key, velocity) {\n        if (velocity === 0) {\n            clearTimeout(this._inactivityTimer);\n            key.object.rotation.set(key.originalRotation.x, key.originalRotation.y, key.originalRotation.z);\n            key.currentRotation = 0;\n            key.down = false;\n        } else {\n            key.currentRotation = velocity * Math.PI/16;\n            key.object.rotateX(key.currentRotation);\n            key.down = true;\n        }\n    }\n\n    /**\n     * toggle key suggestion\n     * @param notation\n     * @param toggle\n     * @param index in keysig\n     */\n    toggleKeySuggestion(notation, toggle, index) {\n        var keys = this.findKeyObjectsForNotation(notation);\n        for (var c = 0; c < keys.length; c++) {\n            if (toggle) {\n                clearTimeout(this._inactivityTimer);\n                this._inactivityTimer = setTimeout( () => this.onInactive(), 5000);\n                var clr;\n                if ( index===0 || index===2 || index===4 || index===6) {\n                    clr = Style.keys.stronglySuggested[keys[c].type];\n                    keys[c].suggested = 'stronglySuggested';\n                } else {\n                    clr = Style.keys.suggested[keys[c].type];\n                    keys[c].suggested = 'suggested';\n                }\n                keys[c].object.material.color.setHex(clr.color);\n                keys[c].object.material.emissive.setHex(clr.emissive);\n             } else {\n                keys[c].object.material.color.setHex(Style.keys.normal[keys[c].type].color);\n                keys[c].object.material.emissive.setHex(Style.keys.normal[keys[c].type].emissive);\n                keys[c].suggested = false;\n            }\n        }\n    }\n\n    /**\n     * create white key geometry\n     * @returns {THREE.Mesh}\n     */\n    createWhiteKey(geometry, material) {\n        var keygeom = geometry.clone();\n        var mat = material.clone();\n        mat.color.setHex(Style.keys.normal.white.color);\n        mat.emissive.setHex(Style.keys.normal.white.emissive);\n        keygeom.translate( 0, -10, 0 );\n        var key = new THREE.Mesh( keygeom, mat);\n        return key;\n    }\n\n    /**\n     * create black key geometry\n     * @returns {THREE.Mesh}\n     */\n    createBlackKey(geometry, material) {\n        var keygeom = geometry.clone();\n        var mat = material.clone();\n        mat.color.setHex(Style.keys.normal.black.color);\n        mat.emissive.setHex(Style.keys.normal.black.emissive);\n        keygeom.translate( 0, -25, 0 );\n        keygeom.scale(1, .5, 1);\n        var key = new THREE.Mesh( keygeom, mat);\n        return key;\n    }\n\n    /**\n     * create and add a key\n     * @param {Number} rotation\n     * @param {Boolean} white\n     */\n    addKey(rotation, white, notation, geometry, material) {\n        var key, color;\n        if (white) {\n            color = 'white';\n            key = this.createWhiteKey(geometry, material);\n        } else {\n            color = 'black';\n            key = this.createBlackKey(geometry, material);\n        }\n        key.rotation.z = rotation;\n        this._keys.push({\n            type: color,\n            object: key,\n            colortween: {},\n            notation: notation,\n            originalRotation: {\n                x: key.rotation.x,\n                y: key.rotation.y,\n                z: key.rotation.z }\n        });\n        this.add(key,'key_' + notation);\n    }\n\n\n    /**\n     * find the key for a specific notation\n     * todo: choose most appropriate octave\n     * @param notation\n     * @returns {Array}\n     */\n    findKeyObjectsForNotation(notation) {\n        var keys = []; // multiple keys for multiple octaves (just 2 right now)\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c].notation === notation) {\n                keys.push(this._keys[c]);\n            }\n        }\n        return keys;\n    }\n}","import BaseGroup from '../../node_modules/trivr/src/basegroup.es6';\nimport Style from '../themeing/style.es6';\n\nexport default class Lighting extends BaseGroup {\n    /**\n     * on create scene (or earliest possible opportunity)\n     * @param scene\n     * @param custom\n     */\n    onCreate(scene, custom) {\n        var light = new THREE.HemisphereLight( Style.lighting.hemisphere.top, Style.lighting.hemisphere.bottom, 4 );\n        var spotLight = new THREE.SpotLight( Style.lighting.spotlight );\n        spotLight.position.set( 0, 0, 400 );\n        spotLight.rotation.x = Math.PI / 2;\n\n        spotLight.shadow.mapSize.width = 1024;\n        spotLight.shadow.mapSize.height = 1024;\n\n        spotLight.shadow.camera.near = 100;\n        spotLight.shadow.camera.far = 400;\n        spotLight.shadow.camera.fov = 30;\n\n        this.add(spotLight);\n        this.add(light);\n    }\n}","import Shaders from './../shaders.es6';\nimport BaseGroup from '../../node_modules/trivr/src/basegroup.es6';\nimport Style from '../themeing/style.es6';\nimport Utils from '../utils.es6';\n\nexport default class Metronome extends BaseGroup {\n    onInitialize() {\n        /**\n         * metronome hammers in scene\n         * @type {Array}\n         * @private\n         */\n        this._hammers = [];\n\n        /**\n         * synth\n         * @type {Tone}\n         * @private\n         */\n        this._synth = new Tone.DrumSynth().toMaster();\n\n        /**\n         * tween targets\n         * @type {{drum: {animating: boolean, props: {}}}}\n         * @private\n         */\n        this._tweenTargets = {\n            drum: { animating: false, props: {} },\n        }\n    }\n\n    onCreate(scenecollection, mycollection) {\n        this.addHammer('right', Math.PI/64, Math.PI * 2, 'C4');\n        //this.addHammer('left', Math.PI/128, 0, 'A4');\n        this.addHammer('up', Math.PI/64, Math.PI/2, 'G5');\n        this.addHammer('down', Math.PI/64, 0, 'F3');\n        this.addDrum();\n    }\n\n    /**\n     * on render\n     * @param scenecollection\n     * @param mycollection\n     */\n    onRender(scenecollection, mycollection) {\n        this.animateHammers();\n        this.animateDrum();\n    }\n\n    /**\n     * render cycle for drum\n     */\n    animateDrum() {\n        if (this._tweenTargets.drum.animating) {\n            this.drum.position.z = this._tweenTargets.drum.props.zPosition;\n            this.drum.material.bumpScale = this._tweenTargets.drum.props.bumpscale;\n            this.drum.material.color.setRGB(\n                this._tweenTargets.drum.props.r/100,\n                this._tweenTargets.drum.props.g/100,\n                this._tweenTargets.drum.props.b/100 );\n        }\n    }\n\n    /**\n     * render cycle for hammers\n     */\n    animateHammers() {\n        for (var c = 0; c < this._hammers.length; c++) {\n            var hammer = this._hammers[c];\n\n            if (hammer.animatingGlow) {\n                hammer.glow.material.color.setRGB(\n                    hammer.glowColor.r/100,\n                    hammer.glowColor.g/100,\n                    hammer.glowColor.b/100 );\n            }\n\n            var newrotation = hammer.pivot.rotation[hammer.rotationaxis] + hammer.direction * hammer.rate;\n\n            if (Math.abs(newrotation) > Math.PI - Math.PI/16) {\n                hammer.direction *= -1;\n                newrotation = Math.abs(newrotation)/newrotation * (Math.PI - Math.PI/16);\n                this.triggerDrum(hammer);\n            }\n            hammer.pivot.rotation[hammer.rotationaxis] = newrotation;\n        }\n    }\n\n    /**\n     * sound the drum, the hammer hit it\n     * @param hammer\n     */\n    triggerDrum(hammer) {\n        this._synth.triggerAttackRelease(hammer.note, \"16n\");\n        hammer.animatingGlow = true;\n        var startcolor = Utils.decToRGB(Style.metronome.hammer.color, 100);\n        var endcolor = Utils.decToRGB(Style.metronome.hammer.hitcolor, 100);\n        hammer.glowColor.r = startcolor.r;\n        hammer.glowColor.g = startcolor.g;\n        hammer.glowColor.b = startcolor.b;\n        createjs.Tween.get(hammer.glowColor)\n            .to({ r: endcolor.r, g: endcolor.g, b: endcolor.b }, 500)\n            .to({ r: startcolor.r, g: startcolor.g, b: startcolor.b }, 500)\n            .wait(100) // wait a few ticks, or the render cycle won't pick up the changes with the flag\n            .call( function (scope) { scope.animatingGlow = false; } );\n\n        var startcolor = Utils.decToRGB(Style.metronome.drum.color, 100);\n        var endcolor = Utils.decToRGB(Style.metronome.drum.hitcolor, 100);\n        this._tweenTargets.drum.props.r = startcolor.r;\n        this._tweenTargets.drum.props.g = startcolor.g;\n        this._tweenTargets.drum.props.b = startcolor.b;\n        this._tweenTargets.drum.props.zPosition = -400;\n        this._tweenTargets.drum.props.bumpscale = 0;\n        this._tweenTargets.drum.animating = true;\n        this._tweenTargets.drum.currentTween = createjs.Tween.get(this._tweenTargets.drum.props)\n            .to({\n                r: endcolor.r, g: endcolor.g, b: endcolor.b,\n                bumpscale: 5,\n                zPosition: -400 + hammer.direction * 50 }, 150)\n            .to({\n                r: startcolor.r, g: startcolor.g, b: startcolor.b,\n                bumpscale: 0,\n                zPosition: -400 }, 150)\n            .wait(100) // wait a few ticks, or the render cycle won't pick up the changes with the flag\n            .call( () => { this._tweenTargets.drum.animating = false; } );\n    }\n\n    /**\n     * add center drum\n     */\n    addDrum() {\n        var drumgeom = new THREE.CircleGeometry( 30, 24 );\n        drumgeom.scale(1,1, 0.75);\n        var mapHeight = new THREE.TextureLoader().load(Style.metronome.drum.bumpmap);\n        mapHeight.anisotropy = 4;\n        mapHeight.repeat.set(1, 1);\n        mapHeight.wrapS = mapHeight.wrapT = THREE.ClampToEdgeWrapping;\n        mapHeight.format = THREE.RGBFormat;\n\n        var material = new THREE.MeshPhongMaterial( {\n            color: Style.metronome.drum.color,\n            emissive: Style.metronome.drum.emissive,\n            specular: Style.metronome.drum.specular,\n            bumpMap: mapHeight,\n            bumpScale: 0,\n        } );\n\n        this.drum = new THREE.Mesh( drumgeom, material );\n        this.drum.position.z = -400;\n        this.add(this.drum, 'drum');\n    }\n\n    /**\n     * add metronome hammer\n     * @param origin\n     * @param rate\n     * @param offset\n     */\n    addHammer(origin, rate, offset, tone) {\n        var hammergeom = new THREE.SphereGeometry(5);\n        var centerpivot = new THREE.Object3D();\n\n        var textureCube = new THREE.CubeTextureLoader().load(Style.metronome.hammer.refractioncube);\n        textureCube.mapping = THREE.CubeRefractionMapping;\n\n        var innermaterial = new THREE.MeshBasicMaterial( {\n            envMap: textureCube } );\n\n        var outermaterial = new THREE.MeshBasicMaterial( {\n            color: Style.metronome.hammer.color,\n            transparent: true,\n            wireframe: true,\n            opacity: 0.5 } );\n\n\n        var hammer = new THREE.Mesh( hammergeom, innermaterial );\n        hammer.name = 'ball';\n        centerpivot.add(hammer);\n        centerpivot.position.z = -400;\n\n        var glow = new THREE.Mesh( hammergeom.clone(), outermaterial );\n        glow.name = 'glow';\n        glow.scale.multiplyScalar(1.2);\n        centerpivot.add(glow);\n\n        var rotationaxis;\n        switch (origin) {\n            case 'right':\n                glow.position.x = -100;\n                centerpivot.position.x = -100;\n                hammer.position.x = -100;\n                rotationaxis = 'y';\n                break;\n\n            case 'left':\n                glow.position.x = 100;\n                centerpivot.position.x = 100;\n                hammer.position.x = 100;\n                rotationaxis = 'y';\n                break;\n\n            case 'down':\n                glow.position.y = 100;\n                centerpivot.position.y = 100;\n                hammer.position.y = 100;\n                rotationaxis = 'x';\n                break;\n\n            case 'up':\n                glow.position.y = -100;\n                centerpivot.position.y = -100;\n                hammer.position.y = -100;\n                rotationaxis = 'x';\n                break;\n        }\n\n        centerpivot.rotation[rotationaxis] += offset;\n\n        this._hammers.push( {\n            animatingGlow: false,\n            glow: glow,\n            glowColor: {},\n            hammer: hammer,\n            pivot: centerpivot,\n            direction: 1,\n            rate: rate,\n            rotationaxis: rotationaxis,\n            note: tone }\n        );\n\n        this.add(centerpivot, 'hammer');\n    }\n}","import Note from './musictheory/note.es6';\n\nexport default class {\n    constructor(cb) {\n        /**\n         * event callback\n         */\n        this._callback = cb;\n\n        /**\n         * keys down\n         * @type {Array}\n         * @private\n         */\n        this._keys = [];\n\n        /**\n         * keyboard to key mapping\n         * @type {Array.<string>}\n         * @private\n         */\n        this._mapping = Note.sharpNotations.concat(Note.sharpNotations);\n\n        /**\n         * potential keys pressed in order\n         * @type {string[]}\n         * @private\n         */\n        this._potentialKeys = [\n            '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '-', '+',\n            'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', '[', ']'\n        ];\n\n        document.addEventListener('keydown', event => this.onKeyDown(event));\n        document.addEventListener('keyup', event => this.onKeyUp(event));\n    }\n\n    /**\n     * get keys down\n     * @param mapping\n     */\n    getKeysDown() {\n        var down = [];\n        for (var c = 0; c < this._keys.length; c++) {\n            if (this._keys[c] > 0) {\n                var octave = 0;\n                if (c >= this._keys.length/2) { octave = 1; }\n                down.push( { notation: this._mapping[c], octave: octave, index: c, velocity: this._keys[c]} );\n            }\n        }\n        return down;\n    }\n\n    /**\n     * on key down\n     * @param event\n     */\n    onKeyDown(event) {\n        var key = this._potentialKeys.indexOf(event.key.toLowerCase());\n        if (key !== -1 && (this._keys[key] === 0 || !this._keys[key])) {\n            this._keys[key] = 1.0; // on an actual MIDI keyboard, we'd have a velocity\n            var octave = Math.floor(key / Note.sharpNotations.length);\n            this._callback({\n                notation: this._mapping[key],\n                octave: octave,\n                index: key,\n                velocity: 1.0,\n                action: 'press' });\n        }\n    }\n\n    /**\n     * on key down\n     * @param event\n     */\n    onKeyUp(event) {\n        var key = this._potentialKeys.indexOf(event.key.toLowerCase());\n        if (key !== -1) {\n            this._keys[key] = 0.0; // on an actual MIDI keyboard, we'd have a velocity\n            var octave = Math.floor(key / Note.sharpNotations.length);\n            this._callback({\n                notation: this._mapping[key],\n                octave: octave,\n                index: key,\n                velocity: 0,\n                action: 'release' });\n        }\n    }\n}","export default {\n  \"explosion\": {\n    \"fragment\": \"varying float noise; uniform sampler2D tExplosion;  float random( vec3 scale, float seed ){   return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed ) ; }  void main() {    float r = .01 * random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );   vec2 tPos = vec2( 0, 1.0 - 1.3 * noise + r );   vec4 color = texture2D( tExplosion, tPos );   gl_FragColor = vec4( color.rgb, 1.0 );  }\",\n    \"vertex\": \"  vec3 mod289(vec3 x) {   return x - floor(x * (1.0 / 289.0)) * 289.0; }  vec4 mod289(vec4 x) {   return x - floor(x * (1.0 / 289.0)) * 289.0; }  vec4 permute(vec4 x) {   return mod289(((x*34.0)+1.0)*x); }  vec4 taylorInvSqrt(vec4 r) {   return 1.79284291400159 - 0.85373472095314 * r; }  vec3 fade(vec3 t) {   return t*t*t*(t*(t*6.0-15.0)+10.0); }  float cnoise(vec3 P) {   vec3 Pi0 = floor(P);   vec3 Pi1 = Pi0 + vec3(1.0);   Pi0 = mod289(Pi0);   Pi1 = mod289(Pi1);   vec3 Pf0 = fract(P);   vec3 Pf1 = Pf0 - vec3(1.0);   vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);   vec4 iy = vec4(Pi0.yy, Pi1.yy);   vec4 iz0 = Pi0.zzzz;   vec4 iz1 = Pi1.zzzz;    vec4 ixy = permute(permute(ix) + iy);   vec4 ixy0 = permute(ixy + iz0);   vec4 ixy1 = permute(ixy + iz1);    vec4 gx0 = ixy0 * (1.0 / 7.0);   vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;   gx0 = fract(gx0);   vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);   vec4 sz0 = step(gz0, vec4(0.0));   gx0 -= sz0 * (step(0.0, gx0) - 0.5);   gy0 -= sz0 * (step(0.0, gy0) - 0.5);    vec4 gx1 = ixy1 * (1.0 / 7.0);   vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;   gx1 = fract(gx1);   vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);   vec4 sz1 = step(gz1, vec4(0.0));   gx1 -= sz1 * (step(0.0, gx1) - 0.5);   gy1 -= sz1 * (step(0.0, gy1) - 0.5);    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);   vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);   vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);   vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);   vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);   vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);   vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);   vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));   g000 *= norm0.x;   g010 *= norm0.y;   g100 *= norm0.z;   g110 *= norm0.w;   vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));   g001 *= norm1.x;   g011 *= norm1.y;   g101 *= norm1.z;   g111 *= norm1.w;    float n000 = dot(g000, Pf0);   float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));   float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));   float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));   float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));   float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));   float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));   float n111 = dot(g111, Pf1);    vec3 fade_xyz = fade(Pf0);   vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);   vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);   float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);   return 2.2 * n_xyz; }  float pnoise(vec3 P, vec3 rep) {   vec3 Pi0 = mod(floor(P), rep);   vec3 Pi1 = mod(Pi0 + vec3(1.0), rep);   Pi0 = mod289(Pi0);   Pi1 = mod289(Pi1);   vec3 Pf0 = fract(P);   vec3 Pf1 = Pf0 - vec3(1.0);   vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);   vec4 iy = vec4(Pi0.yy, Pi1.yy);   vec4 iz0 = Pi0.zzzz;   vec4 iz1 = Pi1.zzzz;    vec4 ixy = permute(permute(ix) + iy);   vec4 ixy0 = permute(ixy + iz0);   vec4 ixy1 = permute(ixy + iz1);    vec4 gx0 = ixy0 * (1.0 / 7.0);   vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;   gx0 = fract(gx0);   vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);   vec4 sz0 = step(gz0, vec4(0.0));   gx0 -= sz0 * (step(0.0, gx0) - 0.5);   gy0 -= sz0 * (step(0.0, gy0) - 0.5);    vec4 gx1 = ixy1 * (1.0 / 7.0);   vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;   gx1 = fract(gx1);   vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);   vec4 sz1 = step(gz1, vec4(0.0));   gx1 -= sz1 * (step(0.0, gx1) - 0.5);   gy1 -= sz1 * (step(0.0, gy1) - 0.5);    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);   vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);   vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);   vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);   vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);   vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);   vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);   vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));   g000 *= norm0.x;   g010 *= norm0.y;   g100 *= norm0.z;   g110 *= norm0.w;   vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));   g001 *= norm1.x;   g011 *= norm1.y;   g101 *= norm1.z;   g111 *= norm1.w;    float n000 = dot(g000, Pf0);   float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));   float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));   float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));   float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));   float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));   float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));   float n111 = dot(g111, Pf1);    vec3 fade_xyz = fade(Pf0);   vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);   vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);   float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);   return 2.2 * n_xyz; }  varying float noise; uniform float time;  float turbulence( vec3 p ) {   float w = 100.0;   float t = -.5;   for (float f = 1.0 ; f <= 10.0 ; f++ ){     float power = pow( 2.0, f );     t += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );   }   return t; }  void main() {   noise = 10.0 *  -.10 * turbulence( .5 * normal + time );   float b = 5.0 * pnoise( 0.05 * position + vec3( 2.0 * time ), vec3( 100.0 ) );   float displacement = - 10. * noise + b;    vec3 newPosition = position + normal * displacement;   gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );  }\"\n  },\n  \"glow\": {\n    \"fragment\": \"uniform vec3 glowColor; varying float intensity; void main()  {  vec3 glow = glowColor * intensity;     gl_FragColor = vec4( glow, 1.0 ); }\",\n    \"vertex\": \"uniform vec3 viewVector; uniform float c; uniform float p; varying float intensity; void main()  {     vec3 vNormal = normalize( normalMatrix * normal );  vec3 vNormel = normalize( normalMatrix * viewVector );  intensity = pow( c - dot(vNormal, vNormel), p );       gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 ); }\"\n  }\n}","export default {\n    neutral: {\n        red: 0x7A6869,\n        darkred: 0x2d2627,\n        //green: 0x65876E,\n\n        green: 0xc0c4b6,\n        lightred: 0xeadfdb,\n        grayblue: 0xadaeb0,\n        brown: 0xd8c2b5,\n        orange: 0xf2cfb3\n    },\n\n    neon: {\n        blue: 0x00ecff,\n        green: 0x7cff00,\n        yellow: 0xe3ff00,\n        orange: 0xffb400,\n        violet: 0xfd00ff\n    },\n\n    grayscale: [\n        0x000000,\n        0x2a2a2a,\n        0x5a5a5a,\n        0x8a8a8a,\n        0xaaaaaa,\n        0xffffff\n    ]\n}","import Colors from './colors.es6';\nexport default {\n    keys: {\n        normal: {\n            white: {\n                emissive: Colors.grayscale[3],\n                color: Colors.neutral.red\n            },\n            black: {\n                emissive: Colors.grayscale[1],\n                color: Colors.neutral.red\n            }\n        },\n        suggested: {\n            white: {\n                emissive: Colors.grayscale[2],\n                color: Colors.neon.green\n            },\n            black: {\n                emissive: Colors.grayscale[1],\n                color: Colors.neon.green\n            }\n        },\n        stronglySuggested: {\n            white: {\n                emissive: Colors.grayscale[2],\n                color: Colors.neon.orange\n            },\n            black: {\n                emissive: Colors.grayscale[1],\n                color: Colors.neon.orange\n            }\n        }\n    },\n\n    metronome: {\n        drum: {\n            bumpmap: './assets/images/ripplemap.jpg',\n            color: Colors.neutral.darkred,\n            hitcolor: Colors.neon.blue,\n            emissive: Colors.grayscale[0],\n            specular: Colors.neutral.grayblue\n        },\n\n        hammer: {\n            refractioncube: [\n                './assets/images/nx.jpg',\n                './assets/images/ny.jpg',\n                './assets/images/nz.jpg',\n                './assets/images/nx.jpg',\n                './assets/images/ny.jpg',\n                './assets/images/nz.jpg' ],\n            color: Colors.neutral.red,\n            hitcolor: Colors.neon.blue\n        }\n    },\n\n    dome: {\n        color: Colors.neutral.darkred,\n        emissive: Colors.neutral.darkred,\n        specular: Colors.neutral.red\n    },\n\n    floatingparticles: {\n        sprite: './assets/images/snowflake1.png',\n        color: Colors.grayscale[2]\n    },\n\n    lighting: {\n        hemisphere: {\n            top: Colors.neutral.darkred,\n            bottom: Colors.neutral.green\n        },\n        spotlight: Colors.grayscale[1]\n    }\n}","export default {\n    /**\n     * apply n number of properties to an object\n     * @param object\n     * @param {Object} props\n     * @param {String} namespace of property (prepend key name)\n     */\n    copyPropsTo(object, props, namespace) {\n        if (!namespace) { namespace = ''; }\n        for (var c in props) {\n            object[c + namespace] = props[c];\n        }\n        return object;\n    },\n\n    /**\n     * turn decimal color to RGB\n     * @param dec\n     * @param max\n     * @returns {{r: number, g: number, b: number}}\n     */\n    decToRGB(dec, max) {\n        if (!max) { max = 255; }\n        max += 1; // aids with rounding\n        var r = Math.floor(dec / (256*256));\n        var g = Math.floor(dec / 256) % 256;\n        var b = dec % 256;\n        return { r: r/255 * max, g: g/255 * max, b: b/255 * max };\n    },\n\n    RGBToDec(rgb) {\n        return rgb.r << 16 + rgb.g << 16 + rgb.b;\n    }\n}"]}